{"version":3,"file":"htmlmark.umd.js","sources":["../lib/regex/index.js","../lib/util/utils.js","../lib/util/esc.js","../lib/util/tokens.js","../lib/util/indent.js","../lib/tokenizer/table.js","../lib/tokenizer/image.js","../lib/tokenizer/comment.js","../lib/tokenizer/hrLine.js","../lib/tokenizer/codeblock.js","../lib/parser/index.js","../lib/tokenizer/quote.js","../lib/tokenizer/heading.js","../lib/tokenizer/list.js","../lib/tokenizer/html.js","../lib/tokenizer/paragraph.js","../lib/tokenizer/frontMatter.js","../lib/tokenizer/newline.js","../lib/tokenizer/index.js","../lib/lexer/index.js","../lib/index.js"],"sourcesContent":["const REGEX = {\n\tHR_LINE: /^\\s*[-+*](?:(?:\\s[-+*]){2,}|[-+*]{2,})$/g,\n\tQUOTE: {\n\t\tITEM: /^\\s*(?:>\\s*)+(?<value>.+)/g,\n\t\tEMPTY: /^\\s*[>\\s]+$/g,\n\t\tCOUNT: />/g,\n\t\tNON_QUOTE: /[^>\\s\\t]/\n\t},\n\tCOMMENT: /^\\s*<!-{2}\\s(?<value>.+)\\s-{2}>/g,\n\tIMAGE: /^\\s*!\\[(?<alt>.+)]\\((?<url>.+)\\)/g,\n\tHEADING: {\n\t\tITEM: /^\\s*(?<level>#{1,6})\\s+((?<fenceVal>.+)(?=\\s+#+\\s*$)|(?<val>.+))/g,\n\t\tUNDERLINE_1: /^\\s*=+$/g,\n\t\tUNDERLINE_2: /^\\s*-+$/g\n\t},\n\tCODE_BLOCK: /^\\s*`{3}\\s*(?<lang>[a-z]*)$/g,\n\tLIST: {\n\t\tCHECKBOX: /^\\s*(?:[-~*]|\\d+\\.)\\s\\[(?<check>\\s|x)]\\s(?<value>.+)/g,\n\t\tUNORDERED: /^\\s*(?<mark>[-*+])\\s(?<value>.+)/g,\n\t\tORDERED: /^\\s*(?<count>\\d)\\.\\s(?<value>.+)/g,\n\t\tITEM: /^\\s*(?:(?<mark>[-*+])|(?<count>\\d+)\\.)\\s+(\\[(?<check>\\s|x)]\\s+)?(?<value>.+)/g,\n\t\tEMPTY: /^\\s*(?<mark>[-*+]|(?<count>\\d+)\\.)(\\s\\[(?<check>(\\s|x))]\\s*|\\s*)$/g\n\t},\n\tPARAGRAPH: {\n\t\tLINK: /^\\[(?<text>.+?)]\\((?<href>\\S+)(?:\\s['\"](?<title>.+)['\"])?\\)/,\n\t\tREF_LINK: /^((?<!!)\\[.+?](?!\\(.+\\))){1,2}/,\n\t\tHTML: /^\\s*<\\/(?<endTag>\\w+)>|^\\s*<(?<tag>\\w+)(?<attrs>\\s\\w+(=\\\\?['\"].+?['\"])?)?>/,\n\t\t// eslint-disable-next-line no-useless-escape\n\t\tCOMPUTED_HTML: \"<(?<tag>%s)(?<attrs>\\s\\w+=\\\\?['\\\"].+?['\\\"])?>(?<content>.+)<\\/%s>\",\n\t\tIMAGE: /^!\\[(?<alt>.+)]\\((?<href>\\S+)(?:\\s'(?<title>[^']+)'(\\s(?<width>\\d+)(\\s(?<height>\\d+))?)?)?\\)/\n\t},\n\tHTML: /^\\s*<(?<tag>\\w+)(?<attrs>\\s\\w+=\\\\?['\"].+?['\"])?>(?<content>.?)/g,\n\tLINK_REF: {\n\t\tDECLARATION: /\\s*\\[(?<text>.+)]:\\s+(?<href>\\S+(?:\\s'(?<title>.+?)')?)/g,\n\t\tWITH_TEXT: /^(?<!!)\\[(?<text>.+?)](?!\\(.+\\))(?<!!)\\[(?<ref>.+?)](?!\\(.+\\))/,\n\t\tWITHOUT_TEXT: /^(?<!!)\\[(?<ref>.+?)](?!\\(.+\\))/\n\t},\n\tTABLE: {\n\t\tROW: /^\\s*(?<!\\\\)\\|(?=(?:.+(?<!\\\\)\\|)+$)|(?!^)(?<cell>.+?)(?<!\\\\)\\|/gy,\n\t\t/**\n\t\t * @example |----|-----|------|\n\t\t */\n\t\tDASH_LINE: /^\\s*\\|(?=(?:-{2,}\\|)+$)|(?!^)(?<cell>-{2,})\\|/gy,\n\t\t/**\n\t\t * @example | --- | --- | --- |\n\t\t */\n\t\tS_DASH_LINE: /^\\s*\\|(?=(?:\\s-{2,}\\s\\|)+$)|(?!^)(?<cell>\\s-{2,})\\s\\|/gy,\n\t\t/**\n\t\t * @example |:----:|:----:|:----:|\n\t\t */\n\t\tCOLON_LINE: /^\\s*\\|(?=(?::-{2,}:\\|)+$)|(?!^):(?<cell>-{2,}):\\|/gy,\n\t\t/**\n\t\t * @example | :---: | :---: | :---: |\n\t\t */\n\t\tS_COLON_LINE: /^\\s*\\|(?=(?:\\s:-{2,}:\\s\\|)+$)|\\s(?!^):(?<cell>-{2,}):\\s\\|/gy,\n\t\tCELL: /(?<!\\\\)(\\|)/g\n\t},\n\tESC: {\n\t\tGT: /(?<!<\\/?\\w[^<>]*)>/g,\n\t\tLT: /<(?!([a-z/1-6]+>))/g\n\t},\n\tESCAPED: /\\\\([*_[\\]()!~+\\\\|`#><])/g,\n\tFRONT_MATTER: {\n\t\tBOUNDARY: /^-{3}\\s*$/,\n\t\tENTRY: /^\\s*(?<key>\\w+):\\s*(?<value>.*)$/\n\t},\n\tNUMBER: /^\\d+$/,\n\tNUMBER_WITH_DECIMAL: /^\\d+\\.\\d+$/,\n\tBIG_BRACKETED: /^\\[.*]$/,\n\tCURLY_BRACKETED: /^\\{.*}$/\n}\n\nexport default REGEX\n","/**\n * Utilities Store for the Parser\n */\nclass Utils {\n\t/**\n\t * Checks if the given text matches the given regex\n\t *\n\t * @param {string} text\n\t * @param {RegExp} regex\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic testRegex(text, regex) {\n\t\tregex.lastIndex = 0\n\t\treturn !!regex.test(text)\n\t}\n\n\t/**\n\t * Returns the regex matches for the given text\n\t *\n\t * @param {string} text\n\t * @param {RegExp} regex\n\t * @returns {RegExpExecArray}\n\t */\n\tstatic execRegex(text, regex) {\n\t\tregex.lastIndex = 0\n\t\treturn regex.exec(text)\n\t}\n\n\t/**\n\t * Match the given text against the given regex\n\t *\n\t * @param {string} text\n\t * @param {RegExp} regex\n\t *\n\t * @returns {*[]}\n\t */\n\tstatic matchRegex(text, regex) {\n\t\tlet m\n\t\tconst matches = []\n\n\t\twhile ((m = regex.exec(text)) !== null) {\n\t\t\tif (m.index === regex.lastIndex) {\n\t\t\t\tregex.lastIndex++\n\t\t\t}\n\n\t\t\tconst rGroups = Object.keys(m.groups)\n\n\t\t\tm.forEach((match, groupIndex) => {\n\t\t\t\tif (match && groupIndex !== 0) {\n\t\t\t\t\tmatches.push({\n\t\t\t\t\t\ttype: rGroups[groupIndex - 1],\n\t\t\t\t\t\tvalue: match\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\treturn matches\n\t}\n\n\t/**\n\t * Groups the given array of objects by the given key\n\t *\n\t * @param {Object[]} array - Array of objects to group\n\t * @param {string} key - Key to group by\n\t *\n\t * @returns {Object[]} - Grouped array of objects\n\t */\n\tstatic groupBy(array, key) {\n\t\tconst grouped = []\n\t\tarray.forEach((item, index) => {\n\t\t\tif (index === 0) {\n\t\t\t\tgrouped.push(item)\n\t\t\t} else {\n\t\t\t\tconst last = grouped[grouped.length - 1]\n\t\t\t\tif (last[key] === item[key]) {\n\t\t\t\t\tlast.value += item.value\n\t\t\t\t} else {\n\t\t\t\t\tgrouped.push(item)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn grouped\n\t}\n\n\t/**\n\t *\n\t * @param {string} text\n\t * @param {RegExp} regex\n\t * @returns {{type: string, value: string}[]}\n\t */\n\tstatic matchRG(text, regex) {\n\t\tconst matches = Utils.matchRegex(text, regex)\n\n\t\treturn Utils.groupBy(matches, \"type\")\n\t}\n\n\t/**\n\t * Returns the index of the nth occurrence of the given character in the given text\n\t * If the nth occurrence is not found, -1 is returned\n\t *\n\t * @param {string} text - Text to search in\n\t * @param {number} position - Position of the nth occurrence\n\t * @param {string} delimiter - Character to search for\n\t *\n\t * @returns {number}\n\t */\n\tstatic getNthIndex(text, position, delimiter = \">\") {\n\t\tlet count = 0\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tif (text[i] === delimiter) {\n\t\t\t\tcount++\n\t\t\t\tif (count === position) {\n\t\t\t\t\treturn i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1\n\t}\n\t/**\n\t * Finds number of consecutive characters in a string from a given index\n\t *\n\t * @param {String} str - String to search\n\t * @param {Number} cursor - Index to start from\n\t * @param {string} char - Character to search for\n\t *\n\t * @returns {String}\n\t */\n\tstatic findConsecutive(str, cursor, char) {\n\t\tlet consecutive = 0\n\t\tfor (let i=cursor; i<str.length; i++) {\n\t\t\tif (str[i] === char) {\n\t\t\t\tconsecutive++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn char.repeat(consecutive)\n\t}\n\t/**\n\t * Checks if the provided string contains an exact match for the provided identifier\n\t *\n\t * Generates regex like: /(?<![\\\\*])\\*{2}(?!\\*)/ for \"**\" as identifier\n\t *\n\t * Returns the index of the found identifier, or -1 if not found\n\t *\n\t * @param {String} str\n\t * @param {String} identifier\n\t *\n\t * @returns {Number}\n\t */\n\tstatic isExactMatch(str, identifier) {\n\t\tconst count = identifier.length\n\t\tconst iChar = identifier[0]\n\n\t\tconst exactRegex = new RegExp(\"(?<![\\\\\\\\\" +\n\t\t\t`${iChar}` +\n\t\t\t\"])\\\\\" +\n\t\t\t`${iChar}` +\n\t\t\t`{${count}}` +\n\t\t\t\"(?!\\\\\" +\n\t\t\t`${iChar}` +\n\t\t\t\")\")\n\n\t\treturn str.search(exactRegex)\n\t}\n\n\t/**\n\t * Checks if the provided string contains an loose match for the provided identifier\n\t *\n\t * Generates regex like: /(?<!\\\\)\\*{2}/ where * is the identifier\n\t *\n\t * Returns the index of the found identifier, or -1 if not found\n\t *\n\t * @param {String} str\n\t * @param {String} identifier\n\t *\n\t * @returns {Number}\n\t */\n\tstatic isLooseMatch(str, identifier) {\n\t\tconst iChar = identifier[0]\n\t\tconst count = identifier.length\n\n\t\tconst regex = new RegExp(\n\t\t\t`(?<![\\\\\\\\${iChar}])` +\n\t\t\t`\\\\${iChar}` +\n\t\t\t`{${count}}`\n\t\t)\n\t\treturn str.search(regex)\n\t}\n}\n\n\nexport default Utils\n","import REGEX from \"../regex/index.js\"\nimport Utils from \"./utils.js\"\n\n\nclass Esc {\n\tstatic nonTags(str) {\n\t\tif (!str) return str\n\t\treturn str\n\t\t\t.replaceAll(\"&\", \"&amp;\")\n\t\t\t.replaceAll(REGEX.ESC.LT, \"&lt;\")\n\t\t\t.replaceAll(REGEX.ESC.GT, \"&gt;\")\n\t\t\t.replaceAll(\"\\\"\", \"&quot;\")\n\t\t\t.replaceAll(\"'\", \"&#39;\")\n\t}\n\n\tstatic everything(str) {\n\t\tif (!str) return str\n\t\treturn str\n\t\t\t.replaceAll(\"&\", \"&amp;\")\n\t\t\t.replaceAll(\">\", \"&gt;\")\n\t\t\t.replaceAll(\"<\", \"&lt;\")\n\t\t\t.replaceAll(\"\\\"\", \"&quot;\")\n\t\t\t.replaceAll(\"'\", \"&#39;\")\n\t}\n\n\tstatic decode(str) {\n\t\tif (!str) return str\n\t\treturn str\n\t\t\t.replaceAll(\"&amp;\", \"&\")\n\t\t\t.replaceAll(\"&gt;\", \">\")\n\t\t\t.replaceAll(\"&lt;\", \"<\")\n\t\t\t.replaceAll(\"&quot;\", \"\\\"\")\n\t\t\t.replaceAll(\"&#39;\", \"'\")\n\t}\n\n\tstatic unEscape(str) {\n\t\tif (!str) return str\n\t\tif (Utils.testRegex(str, REGEX.ESCAPED)) {\n\t\t\tstr = str.replaceAll(REGEX.ESCAPED, \"$1\")\n\t\t}\n\t\treturn str\n\t}\n}\n\n\nexport default Esc\n","const TOKENS = {\n\tNEW_LINE: \"new-line\",\n\tPARAGRAPH: \"paragraph\",\n\tCODE_BLOCK: \"code-block\",\n\tCOMMENT: \"comment\",\n\tIMAGE: \"image\",\n\tQUOTE: \"quote\",\n\tBOLD: \"bold\",\n\tITALIC: \"italic\",\n\tUNDERLINE: \"underline\",\n\tSTRIKE_THROUGH: \"strike-through\",\n\tCODE: \"code\",\n\tLINK: \"link\",\n\tLIST: \"list\",\n\tLIST_ITEM: \"list-item\",\n\tCOUNT_ITEM: \"count-item\",\n\tCHECK_ITEM: \"check-item\",\n\tHEADING: \"heading\",\n\tTEXT: \"text\",\n\tHR_LINE: \"hr-line\",\n\tTABLE: \"table\", UNORDERED_ITEM: \"unordered\",\n\tORDERED_ITEM: \"ordered\",\n\tQUOTE_SEPARATOR: \"q-sep\",\n\tLINES: \"lines\",\n\tHTML: \"html\",\n\tFRONT_MATTER: \"front-matter\"\n}\n\nexport default TOKENS\n","/**\n * checks if number is in the given range\n * @param {number} a\n * @param {number} b\n * @returns {boolean}\n */\nNumber.prototype.inRange = function (a, b) {\n\treturn this >= a && this <= b\n}\n\nconst INDENT_SIZE = 2\n\n\n/**\n * Markdown Indentation\n */\nclass Indent {\n\t/**\n\t * returns the indentation count of the given text\n\t *\n\t * @param {string} text\n\t *\n\t * @returns {number}\n\t */\n\tstatic raw(text) {\n\t\tif ([\"\", \"\\n\", undefined].includes(text)) return 0\n\t\tlet count = 0\n\t\twhile (text[count] === \" \" || text[count] === \"\\t\") {\n\t\t\tcount++\n\t\t}\n\t\treturn count\n\t}\n\n\t/**\n\t * calculates the indentation of the given value\n\t *\n\t * @param {number} rawIndent\n\t *\n\t * @returns {number}\n\t */\n\tstatic calc(rawIndent) {\n\t\treturn Math.floor(rawIndent / INDENT_SIZE) * INDENT_SIZE\n\t}\n\n\t/**\n\t * returns the calculated indentation of the given text\n\t *\n\t * @param {string} text\n\t *\n\t * @returns {number}\n\t */\n\tstatic get(text) {\n\t\treturn this.calc(this.raw(text))\n\t}\n\n\t/**\n\t * returns if in the range of the given indentation\n\t *\n\t * @param {number} test the indentation to test\n\t * @param {number} indent the indentation to test against\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic inRange(test, indent) {\n\t\treturn test.inRange(\n\t\t\t(indent-INDENT_SIZE < 0) ? 0 : indent-INDENT_SIZE,\n\t\t\tindent+INDENT_SIZE\n\t\t)\n\t}\n}\n\nexport default Indent\n","import REGEX from \"../regex/index.js\"\nimport { TOKENS, Indent, Utils } from \"../util/index.js\"\nimport { Paragraph } from \"./index.js\"\n\n/**\n * Table Tokenizer\n */\nclass Table {\n\t#lines\n\t#start\n\t#cursor\n\t#indent\n\t#cellCount\n\t#rows = []\n\t#lex\n\t#linkRefs\n\t#withHeading\n\n\tstatic tokenName = TOKENS.TABLE\n\n\t/**\n\t * Checks if the given text matches the Table Row regex\n\t *\n\t * @param {String} text - Text to check\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic #testRow(text) {\n\t\treturn Utils.testRegex(text, REGEX.TABLE.ROW)\n\t\t\t&& !(\n\t\t\t\tUtils.testRegex(text, REGEX.TABLE.DASH_LINE) ||\n\t\t\t\tUtils.testRegex(text, REGEX.TABLE.COLON_LINE) ||\n\t\t\t\tUtils.testRegex(text, REGEX.TABLE.S_DASH_LINE) ||\n\t\t\t\tUtils.testRegex(text, REGEX.TABLE.S_COLON_LINE)\n\t\t\t)\n\t}\n\n\t/**\n\t * Returns the number of cells in a row\n\t *\n\t * @param {string} text - Line to check\n\t *\n\t * @returns {number}\n\t */\n\tstatic #getCellCount(text) {\n\t\treturn (text.match(REGEX.TABLE.CELL) || []).length\n\t}\n\n\t/**\n\t * check if line is a table 'heading - body' separator\n\t *\n\t * @param {string} text\n\t * @param {number} count\n\t * @param {number} indent\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic #isHBSep(text, count, indent) {\n\t\treturn Indent.get(text) === indent &&\n\t\t\t(\n\t\t\t\tUtils.testRegex(text, REGEX.TABLE.DASH_LINE) ||\n\t\t\t\tUtils.testRegex(text, REGEX.TABLE.COLON_LINE) ||\n\t\t\t\tUtils.testRegex(text, REGEX.TABLE.S_DASH_LINE) ||\n\t\t\t\tUtils.testRegex(text, REGEX.TABLE.S_COLON_LINE)\n\t\t\t) &&\n\t\t\tTable.#getCellCount(text) === count\n\t}\n\n\t/**\n\t * Checks if the given line is a row of the table\n\t *\n\t * @param {string} text - Line to check\n\t * @param {Number} count - Number of cells in the row\n\t * @param {Number} indent - Indentation of the line\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic #isRow(text, count, indent) {\n\t\treturn Indent.get(text) === indent &&\n\t\t\tTable.#testRow(text) &&\n\t\t\tTable.#getCellCount(text) === count &&\n\t\t\t!Table.#isHBSep(text, count, indent)\n\t}\n\n\t/**\n\t * Tokenizes a cell of the table\n\t *\n\t * @param {String} row - Row to tokenize\n\t * @param {Array} linkRefs\n\t *\n\t * @returns {{raw: String, value: String}[]}\n\t */\n\tstatic #tokenizeCell(row, linkRefs) {\n\t\tconst strippedRow = row.trim().slice(1, -1)\n\t\tconst rawCells = strippedRow.split(REGEX.TABLE.CELL)\n\n\t\tconst cells = []\n\n\t\trawCells.forEach(cell => {\n\t\t\tif (cell === \"|\") return\n\t\t\tcells.push({\n\t\t\t\traw: cell,\n\t\t\t\ttokens: Paragraph.tokenize(cell.trim(), linkRefs)\n\t\t\t})\n\t\t})\n\n\t\treturn cells\n\t}\n\n\t/**\n\t * Checks if the lines from the given cursor contains a table\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic test({ lines, cursor, indent }) {\n\t\tconst lineToParse = lines[cursor]\n\n\t\tif (!Table.#testRow(lineToParse)) return false\n\n\t\tconst cellCount = this.#getCellCount(lineToParse)\n\t\tlet nextLine = lines[cursor + 1]\n\t\tlet nextNextLine = lines[cursor + 2]\n\n\t\tif (nextLine !== undefined) {\n\t\t\tnextLine = nextLine.trimEnd()\n\t\t\tnextNextLine = nextNextLine?.trimEnd()\n\n\t\t\tif (\n\t\t\t\t(\n\t\t\t\t\tnextNextLine\n\t\t\t\t\t&& Table.#isHBSep(nextLine, cellCount, indent)\n\t\t\t\t\t&& Table.#isRow(nextNextLine, cellCount, indent)\n\t\t\t\t)\n\t\t\t\t|| Table.#isRow(nextLine, cellCount, indent)\n\t\t\t) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\t/**\n\t * Runs checks to find the actual end of the table\n\t */\n\t#findEnd() {\n\t\t// now the line at the cursor is the first line of the table\n\t\t// first we determine if the second line is a table heading/body separator or not\n\t\t// if it is, then we know that the table has a heading\n\t\t// if it is not, then we know that the table does not have a heading\n\n\t\tthis.#cursor += 1\n\t\tif (Table.#isHBSep(this.#lines[this.#cursor], this.#cellCount, this.#indent)) {\n\t\t\tthis.#cursor += 2\n\t\t\tthis.#withHeading = true\n\t\t}\n\n\t\twhile (\n\t\t\tthis.#lines[this.#cursor] !== undefined &&\n\t\t\tTable.#isRow(this.#lines[this.#cursor], this.#cellCount, this.#indent)\n\t\t) {\n\t\t\tthis.#cursor++\n\t\t}\n\t\tthis.#lex[\"withHeading\"] = this.#withHeading\n\t}\n\n\t/**\n\t * Table Tokenizer Constructor\n\t *\n\t * @param {String[]} lines\n\t * @param {Number} cursor\n\t * @param {Number} indent\n\t * @param {Array} linkRefs\n\t *\n\t * @returns {Table}\n\t */\n\tconstructor(lines, cursor, indent, linkRefs) {\n\t\tthis.#lines = lines\n\t\tthis.#cursor = cursor\n\t\tthis.#start = cursor\n\t\tthis.#indent = indent\n\t\tthis.#linkRefs = linkRefs\n\t\tthis.#cellCount = Table.#getCellCount(this.#lines[this.#cursor])\n\t\tthis.#lex = { type: TOKENS.TABLE, indent: this.#indent, rows: [] }\n\t\tthis.#withHeading = false\n\t}\n\n\t/**\n\t * Set the rows of the table to the #rows array\n\t */\n\t#setRows() {\n\t\tconst headingLine = this.#lines[this.#start]\n\n\t\tif (this.#withHeading) {\n\t\t\tthis.#rows = (this.#cursor === this.#start + 3)\n\t\t\t\t? [headingLine, this.#lines[this.#start + 2]]\n\t\t\t\t: [...[headingLine], ...this.#lines.slice(this.#start + 2, this.#cursor)]\n\t\t} else {\n\t\t\tthis.#rows = this.#lines.slice(this.#start, this.#cursor)\n\t\t}\n\t}\n\n\t/**\n\t * Tokenizes cells for each table rows\n\t */\n\t#performDeepLex() {\n\t\tthis.#rows.forEach(row => {\n\t\t\tthis.#lex.rows.push(Table.#tokenizeCell(row, this.#linkRefs))\n\t\t})\n\t}\n\n\t/**\n\t * Tokenizes the lines for the Table token\n\t *\n\t * @returns {{cursor: number, lexer: {indent, type: string, rows: *[]}}}\n\t */\n\ttokenize() {\n\t\tthis.#findEnd()\n\n\t\tthis.#setRows()\n\n\t\tthis.#performDeepLex()\n\n\t\treturn { lexer: this.#lex, cursor: this.#cursor - 1 }\n\t}\n\n\t/**\n\t * Runs the HTML parsing for the Table token\n\t *\n\t * @param {Object} lexer - the Table lexer\n\t *\n\t * @returns {string} - the Table HTML\n\t */\n\tstatic parse(lexer) {\n\t\tlet tHeadingHtml, tBody\n\t\tif (lexer.withHeading) {\n\t\t\tconst tHeading = lexer.rows[0]\n\t\t\ttHeadingHtml = `<th>${tHeading.map(t => Paragraph.parse(t)).join(\"</th><th>\")}</th>`\n\t\t\ttBody = lexer.rows.slice(1)\n\t\t} else {\n\t\t\ttBody = lexer.rows\n\t\t}\n\t\tconst tBodyHtml = tBody.map(row => `<tr><td>${row.map(cell => Paragraph.parse(cell)).join(\"</td><td>\")}</td></tr>`).join(\"\")\n\t\treturn `<table>${tHeadingHtml ? `<thead><tr>\n    ${tHeadingHtml}\n  </tr></thead>` : \"\"}\n  <tbody>\n    ${tBodyHtml}\n  </tbody>\n</table>`\n\t}\n}\n\nexport default Table\n","import REGEX from \"../regex/index.js\"\nimport { TOKENS, Esc, Utils } from \"../util/index.js\"\n\n\nclass Image {\n\tstatic tokenName = TOKENS.IMAGE\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tstatic test({ line }) {\n\t\treturn Utils.testRegex(line, REGEX.IMAGE)\n\t}\n\n\t/**\n\t * @param {string} text\n\t *\n\t * @returns {RegExpExecArray}\n\t */\n\tstatic match(text) {\n\t\treturn Utils.execRegex(text.trim(), REGEX.IMAGE)\n\t}\n\n\t/**\n\t * @param {string} text\n\t *\n\t * @returns {{[p: string]: string}}\n\t */\n\tstatic tokenize(text) {\n\t\treturn Image.match(text).groups\n\t}\n\n\t/**\n\t * returns HTML for image\n\t * @param {{url: string, alt: string}} lexer\n\t * @returns {string}\n\t */\n\tstatic parse(lexer) {\n\t\treturn `<img src='${lexer.url}' alt='${Esc.nonTags(lexer.alt)}'>`\n\t}\n}\n\nexport default Image\n","import REGEX from \"../regex/index.js\"\nimport { Utils, TOKENS } from \"../util/index.js\"\n\n\nclass Comment {\n\tstatic tokenName = TOKENS.COMMENT\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tstatic test({ line }) {\n\t\treturn Utils.testRegex(line, REGEX.COMMENT)\n\t}\n\t/**\n\t * @param {string} text\n\t *\n\t * @returns {RegExpExecArray}\n\t */\n\tstatic match(text) {\n\t\treturn Utils.execRegex(text.trim(), REGEX.COMMENT)\n\t}\n\n\t/**\n\t * @param {string} text\n\t *\n\t * @returns {{[p: string]: string}}\n\t */\n\tstatic tokenize(text) {\n\t\treturn Comment.match(text).groups\n\t}\n\n\t/**\n\t * returns HTML for comment\n\t *\n\t * @param {{value: string}} lexer\n\t *\n\t * @returns {string}\n\t */\n\tstatic parse(lexer) {\n\t\treturn `<!-- ${lexer.value}-->`\n\t}\n}\n\nexport default Comment\n","import REGEX from \"../regex/index.js\"\nimport { Utils, TOKENS } from \"../util/index.js\"\n\n/**\n * Horizontal Line\n */\nclass HrLine {\n\tstatic tokenName = TOKENS.HR_LINE\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tstatic test({ line }) {\n\t\treturn Utils.testRegex(line, REGEX.HR_LINE)\n\t}\n\n\t/**\n\t * returns HTML for horizontal line\n\t *\n\t * @returns {string}\n\t */\n\tstatic parse() {\n\t\treturn \"<hr>\"\n\t}\n}\n\nexport default HrLine\n","import REGEX from \"../regex/index.js\"\nimport { Indent, TOKENS, Utils, Esc } from \"../util/index.js\"\n\n\nclass CodeBlock {\n\t#lines\n\t#start\n\t#cursor\n\t#indent\n\t#rawIndent\n\t#withBraces\n\t#lang\n\t#body\n\t#raw\n\t#isBroken = false\n\n\tstatic tokenName = TOKENS.CODE_BLOCK\n\n\t/**\n\t * Checks if the given text is of the CodeBlock type\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic test({ line, indent, fromToken, lastLexer }) {\n\t\tif (\n\t\t\t!fromToken &&\n\t\t\tindent >= 4 &&\n\t\t\t(!lastLexer || lastLexer.type === TOKENS.NEW_LINE)\n\t\t) {\n\t\t\treturn true\n\t\t}\n\n\t\t// under deep condition inside list item\n\t\t// cb needs to be indented at least twice\n\t\tif (\n\t\t\tfromToken === TOKENS.LIST_ITEM && indent >= 8 &&\n\t\t\t(!lastLexer || lastLexer?.type === TOKENS.NEW_LINE)\n\t\t) {\n\t\t\treturn true\n\t\t}\n\n\n\t\t// under deep condition inside quote\n\t\t// cb needs regular indentation\n\n\t\tif (\n\t\t\tfromToken === TOKENS.QUOTE && indent >= 4 &&\n\t\t\t(!lastLexer || lastLexer?.type === TOKENS.NEW_LINE)\n\t\t) {\n\t\t\treturn true\n\t\t}\n\n\t\treturn CodeBlock.testRegex(line)\n\t}\n\n\t/**\n\t * Checks if the given string matches the CodeBlock regex\n\t *\n\t * @param {String} text - Text to be checked\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic testRegex(text) {\n\t\treturn Utils.testRegex(text.trimEnd(), REGEX.CODE_BLOCK)\n\t}\n\n\t/**\n\t * Returns the CodeBlock regex match for the given text\n\t *\n\t * @param {String} text - Text to be checked\n\t *\n\t * @returns {RegExpExecArray}\n\t */\n\tstatic matchRegex(text) {\n\t\treturn Utils.execRegex(text.trimEnd(), REGEX.CODE_BLOCK)\n\t}\n\n\t/**\n\t * The CodeBlock Tokenizer Constructor\n\t *\n\t * @param {String[]} lines - Lines of the text\n\t * @param {Number} cursor - Cursor position to start from\n\t * @param {Number} indent - Calculated Indent of the text\n\t * @param {Number} rawIndent - Raw indent of the text\n\t *\n\t * @returns {CodeBlock}\n\t */\n\tconstructor(lines, cursor, indent, rawIndent) {\n\t\tthis.#lines = lines\n\t\tthis.#cursor = cursor\n\t\tthis.#start = cursor\n\t\tthis.#indent = indent\n\t\tthis.#rawIndent = rawIndent\n\t\tthis.#withBraces = CodeBlock.testRegex(lines[cursor])\n\t\tthis.#lang = CodeBlock.matchRegex(lines[cursor])?.groups?.lang || null\n\t}\n\n\t/**\n\t * Finds the end of the CodeBlock\n\t *\n\t * Checks if the CodeBlock is broken or not\n\t */\n\t#findEnd() {\n\t\tlet nextLine, nextLineIndent, nextLineMatch, isNextLineClosingOne\n\n\t\tdo {\n\t\t\tnextLine = this.#lines[++this.#cursor]\n\t\t\tif (nextLine === \"\") {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tnextLineIndent = (nextLine) ? Indent.get(nextLine) : null\n\n\t\t\tif (nextLine !== undefined) {\n\t\t\t\tif (this.#withBraces) {\n\t\t\t\t\tnextLineMatch = nextLine.trim() === \"```\"\n\t\t\t\t\tif (\n\t\t\t\t\t\tnextLineMatch &&\n\t\t\t\t\t\tnextLineIndent === this.#indent\n\t\t\t\t\t) {\n\t\t\t\t\t\tisNextLineClosingOne = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isNextLineClosingOne) {\n\t\t\t\tif (nextLineIndent < this.#indent) {\n\t\t\t\t\tisNextLineClosingOne = true\n\t\t\t\t\tif (this.#withBraces) this.#isBroken = true\n\t\t\t\t}\n\t\t\t}\n\n\t\t} while (\n\t\t\tnextLine !== undefined &&\n\t\t\t!isNextLineClosingOne\n\t\t)\n\t}\n\n\t/**\n\t * Sets the CodeBlock body\n\t */\n\t#setBody() {\n\t\tconst start = (this.#withBraces) ? this.#start + 1 : this.#start\n\n\t\tthis.#body = this.#lines.slice(start, this.#cursor)\n\t\t\t.map(line => line.slice(Math.min(this.#rawIndent, Indent.raw(line))))\n\t\t\t.join(\"\\n\")\n\t}\n\n\t/**\n\t * Sets the CodeBlock raw body\n\t */\n\t#setRaw() {\n\t\tlet endRaw\n\t\tif (this.#withBraces) {\n\t\t\tendRaw = this.#cursor + 1\n\t\t\tif (this.#isBroken) endRaw = this.#cursor\n\t\t} else endRaw = this.#cursor\n\t\tthis.#raw = this.#lines.slice(this.#start, endRaw).join(\"\\n\")\n\t\tthis.#cursor = endRaw\n\t}\n\n\t/**\n\t * Tokenizes the lines for the CodeBlock token\n\t *\n\t * @returns {{\n\t * cursor: number,\n\t * lexer: {\n\t * \t\ttype: string,\n\t * \t\tindent: number,\n\t * \t\tlanguage: string|null,\n\t * \t\tvalue: string,\n\t * \t\traw: string\n\t * }}}\n\t */\n\ttokenize() {\n\t\tthis.#findEnd()\n\n\t\tthis.#setBody()\n\n\t\tthis.#setRaw()\n\n\t\treturn {\n\t\t\tcursor: this.#cursor - 1,\n\t\t\tlexer: {\n\t\t\t\ttype: TOKENS.CODE_BLOCK,\n\t\t\t\tindent: this.#indent,\n\t\t\t\tlanguage: this.#lang || null,\n\t\t\t\tvalue: this.#body,\n\t\t\t\traw: this.#raw\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * returns HTML for code block\n\t *\n\t * Format: <pre><code>{body}</code></pre>\n\t *\n\t * @param {Object} lexer - the CodeBlock lexer\n\t * @param {Function|null} highlightFn - A function to highlight code blocks\n\t *\n\t * @returns {string} - the CodeBlock HTML\n\t */\n\tstatic parse(lexer, highlightFn = null) {\n\t\tlet skeleton = \"<pre><code%class>%s</code></pre>\"\n\t\tif (lexer.language) {\n\t\t\tskeleton = skeleton.replace(\"%class\", ` class='language-${lexer.language}'`)\n\t\t} else {\n\t\t\tskeleton = skeleton.replace(\"%class\", \"\")\n\t\t}\n\t\tif (highlightFn) {\n\t\t\tconst highlightedCode = highlightFn(lexer.value, lexer.language)\n\t\t\tif (typeof highlightedCode === \"string\") {\n\t\t\t\tlexer.value = highlightedCode\n\t\t\t} else {\n\t\t\t\tconsole.error(\"highlightFn must return a string\")\n\t\t\t\tconsole.info(\"highlightFn was not used\")\n\t\t\t}\n\t\t\tskeleton = skeleton.replace(\"%s\", lexer.value)\n\t\t} else {\n\t\t\tskeleton = skeleton.replace(\"%s\", Esc.everything(lexer.value))\n\t\t}\n\t\treturn skeleton\n\t}\n}\n\nexport default CodeBlock\n","import { Parsers } from \"../tokenizer/index.js\"\nimport { TOKENS } from \"../util/index.js\"\n\n\nclass Parser {\n\t#lexers\n\t#cursor\n\t#config\n\t#fromToken\n\t#currentLexer\n\t#parsedContent\n\t#modifiedParsers = {}\n\n\tconstructor(lexers, { from = null, config = {} } = {}) {\n\t\tthis.#lexers = lexers\n\t\tthis.#parsedContent = []\n\t\tthis.#fromToken = from\n\t\tthis.#config = config\n\t\tthis.#modifiedParsers = {}\n\n\t\tthis.#modifiedParsers[TOKENS.PARAGRAPH] = this.#parseParagraph.bind(this)\n\t}\n\n\t#parseParagraph() {\n\t\tlet parsed = Parsers.Paragraph.parse(this.#currentLexer)\n\t\tif (this.#fromToken === TOKENS.LIST) {\n\t\t\tthis.#parsedContent.push(`${parsed}`)\n\t\t} else this.#parsedContent.push(`<p>${parsed}</p>`)\n\t}\n\n\n\t#parseCurrentLexer() {\n\t\tfor (const module in Parsers) {\n\t\t\tif (Parsers[module].tokenName === this.#currentLexer.type) {\n\t\t\t\tif (this.#modifiedParsers[this.#currentLexer.type]) {\n\t\t\t\t\tthis.#modifiedParsers[this.#currentLexer.type]()\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tthis.#currentLexer.type === TOKENS.CODE_BLOCK &&\n\t\t\t\t\tthis.#config.highlightFn &&\n\t\t\t\t\ttypeof this.#config.highlightFn === \"function\"\n\t\t\t\t) {\n\t\t\t\t\tthis.#parsedContent.push(Parsers[module].parse(this.#currentLexer, this.#config.highlightFn))\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tthis.#parsedContent.push(Parsers[module].parse(this.#currentLexer))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\trun() {\n\t\tfor (this.#cursor=0; this.#cursor<this.#lexers.length; this.#cursor++) {\n\t\t\tthis.#currentLexer = this.#lexers[this.#cursor]\n\t\t\tthis.#parseCurrentLexer()\n\t\t}\n\n\t\t// remove any %s leftovers and return\n\t\treturn this.#parsedContent\n\t\t\t.map(item => item.replaceAll(\"%s\", \"\"))\n\t\t\t.join(\"\")\n\t}\n}\n\nexport default Parser\n","import Lexer from \"../lexer/index.js\"\nimport REGEX from \"../regex/index.js\"\nimport Parser from \"../parser/index.js\"\nimport { Newline } from \"./index.js\"\nimport { TOKENS, Utils } from \"../util/index.js\"\n\n\nclass Quote {\n\t#lines\n\t#start\n\t#cursor\n\t#body = []\n\t#tBody = []\n\t#cDepth\n\t// these items should break the quote\n\t#breakTokens = [\n\t\t// TODO: for heading, we may have to\n\t\t//  check for underlined headings too\n\t\tREGEX.HEADING.ITEM,\n\t\tREGEX.LIST.ITEM,\n\t\tREGEX.CODE_BLOCK\n\t]\n\n\tstatic tokenName = TOKENS.QUOTE\n\n\t/**\n\t * Checks if the given text matches the Quote regex\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic test({ line }) {\n\t\treturn Utils.testRegex(line, REGEX.QUOTE.ITEM)\n\t}\n\n\t/**\n\t * Checks if the given text matches the Empty Quote regex\n\t *\n\t * @param {string} text\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic testEmpty(text) {\n\t\treturn Utils.testRegex(text, REGEX.QUOTE.EMPTY)\n\t}\n\n\t/**\n\t * Returns the depth of the quote\n\t *\n\t * If the text does not start with > i.e. the lazy items, then 0 is returned\n\t * Otherwise, the count of > before the first non > character is returned\n\t *\n\t * @param {string} text\n\t *\n\t * @returns {number}\n\t */\n\tstatic getDepth(text) {\n\t\ttext = text.trimStart()\n\t\tif (text[0] !== \">\") return 0\n\t\tif (Quote.testEmpty(text.trim())) return text.match(REGEX.QUOTE.COUNT).length\n\t\tconst quotePart = text.substring(0, text.search(REGEX.QUOTE.NON_QUOTE))\n\t\treturn quotePart.match(REGEX.QUOTE.COUNT).length\n\t}\n\n\t/**\n\t * Returns the value of the quote from the provided depth\n\t *\n\t * @param {string} text - the text to be parsed\n\t * @param depth - the depth of the quote\n\t *\n\t * @returns {string}\n\t */\n\tstatic getValue(text, depth) {\n\t\ttext = text.trimStart()\n\t\tconst cursor = Utils.getNthIndex(text, depth)\n\t\t// +1 for the \">\" character\n\t\treturn text.substring(cursor + 1)\n\t}\n\n\tconstructor(lines, cursor) {\n\t\tthis.#lines = lines\n\t\tthis.#cursor = cursor\n\t\tthis.#start = cursor\n\t}\n\n\t#findLazyEnd() {\n\t\tthis.#cursor--\n\n\t\tlet nextLine\n\t\t// check for laziness\n\t\tlet endLazy = false\n\t\tdo {\n\t\t\tnextLine = this.#lines[++this.#cursor]\n\t\t\tif (nextLine !== undefined) {\n\t\t\t\tif (Newline.test({ line: nextLine })) {\n\t\t\t\t\tendLazy = true\n\t\t\t\t}\n\t\t\t\tfor (let r=0; r<this.#breakTokens.length; r++) {\n\t\t\t\t\tif (Utils.testRegex(nextLine, this.#breakTokens[r])) {\n\t\t\t\t\t\tendLazy = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} while (nextLine !== undefined && !endLazy)\n\n\n\t\tthis.#cursor--\n\t}\n\n\t/**\n\t * Finds the end of the quote\n\t *\n\t * Runs check for laziness and breaks\n\t */\n\t#findEnd() {\n\t\tlet nextLine = this.#lines[this.#cursor]\n\t\tlet nextLineMatch\n\n\t\tdo {\n\t\t\tnextLine = this.#lines[++this.#cursor]\n\t\t\tif (nextLine !== undefined) {\n\t\t\t\tnextLineMatch = nextLine.trim().startsWith(\">\")\n\t\t\t} else nextLineMatch = false\n\t\t} while (\n\t\t\tnextLineMatch\n\t\t\t// nextLineIndent === indent\n\t\t)\n\n\t\t// here we have formal end of the quote\n\t\t// keeping beside the laziness\n\t\t// if the last item of the quote is a quote separator\n\t\t// then no laziness is allowed\n\t\tconst lastLineOfQuote = this.#lines[this.#cursor - 1]\n\t\tif (Quote.testEmpty(lastLineOfQuote)) {\n\t\t\tthis.#cursor--\n\t\t\treturn\n\t\t}\n\n\t\tthis.#findLazyEnd()\n\t}\n\n\t/**\n\t * Calculates the common depth for the Quote\n\t */\n\t#calcCommonDepth() {\n\t\tthis.#body.forEach((item) => {\n\t\t\tconst currDepth = Quote.getDepth(item)\n\t\t\tif (this.#cDepth === undefined) {\n\t\t\t\tthis.#cDepth = currDepth\n\t\t\t} else if (currDepth !== 0) { // bypass lazy items\n\t\t\t\tthis.#cDepth = Math.min(this.#cDepth, currDepth)\n\t\t\t}\n\t\t})\n\t}\n\n\n\t/**\n\t * Sets the body of the quote\n\t */\n\t#setBody() {\n\t\tthis.#body = this.#lines.slice(this.#start, this.#cursor + 1)\n\t}\n\n\t/**\n\t * Trims the quote from the body\n\t * Every common depth quote part is stripped\n\t */\n\t#trimBody() {\n\t\tthis.#body.forEach((item) => {\n\t\t\tif (Quote.test({ line: item }) || Quote.testEmpty(item)) {\n\t\t\t\tthis.#tBody.push(Quote.getValue(item, this.#cDepth).trimEnd())\n\t\t\t} else {\n\t\t\t\t// the lazy items can be non-quote so no need to get quote value\n\t\t\t\tthis.#tBody.push(item.trimEnd())\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Tokenizes the lines for the Quote token\n\t *\n\t * @returns {{ cursor: number, lexer: { tokens: Lexer[], depth: number, raw: string } }}\n\t */\n\ttokenize() {\n\t\tthis.#findEnd()\n\n\t\tthis.#setBody()\n\n\t\tthis.#calcCommonDepth()\n\n\t\tthis.#trimBody()\n\n\t\tconst lex = new Lexer(this.#tBody, { from: TOKENS.QUOTE })\n\n\t\treturn {\n\t\t\tcursor: this.#cursor,\n\t\t\tlexer: {\n\t\t\t\ttype: TOKENS.QUOTE,\n\t\t\t\ttokens: lex.run(),\n\t\t\t\tdepth: this.#cDepth,\n\t\t\t\traw: this.#body.join(\"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Wraps the body of the quote inside the Quote HTML tag\n\t *\n\t * @param {number} depth - the depth of the quote\n\t * @param {string} content - the body of the quote\n\t *\n\t * @returns {string} - the HTML quote\n\t */\n\tstatic #wrapInside(depth, content) {\n\t\tlet qHtml = \"%s\"\n\t\tfor (let j=0; j<depth; j++) {\n\t\t\tqHtml = qHtml.replace(\"%s\", `<blockquote>\n%s</blockquote>`)\n\t\t}\n\t\treturn qHtml.replace(\"%s\", `${content}`)\n\t}\n\n\t/**\n\t * Runs the HTML parsing for the Quote token\n\t *\n\t * @param {Object} lexer - the Quote lex\n\t *\n\t * @returns {string} - the HTML quote\n\t */\n\tstatic parse(lexer) {\n\t\tconst qParts = []\n\t\tlexer.tokens.forEach(qTokens => {\n\t\t\tlet babyParser\n\t\t\tbabyParser = new Parser([qTokens])\n\t\t\tqParts.push(babyParser.run())\n\t\t})\n\t\treturn Quote.#wrapInside(\n\t\t\tlexer.depth,\n\t\t\tqParts.join(\"\")\n\t\t)\n\t}\n}\n\nexport default Quote\n","import REGEX from \"../regex/index.js\"\nimport { HrLine, Paragraph } from \"./index.js\"\nimport { TOKENS, Utils } from \"../util/index.js\"\n\n/**\n * Heading Tokenizer\n */\nclass Heading {\n\t#line\n\t#nextLine\n\t#level\n\t#match\n\t#setext = false\n\n\tstatic tokenName = TOKENS.HEADING\n\n\t/**\n\t * Checks if the given text matches the Heading regex\n\t *\n\t * @param {string} text\n\t * @returns {boolean}\n\t */\n\tstatic testRegex(text) {\n\t\treturn Utils.testRegex(text, REGEX.HEADING.ITEM)\n\t}\n\n\t/**\n\t * Checks if the given text is of Heading 1 underline type\n\t *\n\t * @param {string} text\n\t * @returns {boolean}\n\t */\n\tstatic testH1UnderlineRegex(text) {\n\t\treturn Utils.testRegex(text, REGEX.HEADING.UNDERLINE_1)\n\t}\n\n\t/**\n\t * Checks if the given text is of Heading 2 underline type\n\t *\n\t * @param {string} text\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic testH2UnderlineRegex(text) {\n\t\treturn Utils.testRegex(text, REGEX.HEADING.UNDERLINE_2)\n\t}\n\n\t/**\n\t * Returns the regex groups match for the Heading token\n\t *\n\t * Following groups are returned:\n\t * 1. level - number of #s in the Heading\n\t * 2. fenceVal - If fenced Heading, the value of the fenced Heading\n\t * 3. val - the value of the normal Heading (without fence)\n\t *\n\t * @param {string} text\n\t *\n\t * @returns {RegExpExecArray}\n\t */\n\tstatic match(text) {\n\t\treturn Utils.execRegex(text, REGEX.HEADING.ITEM)\n\t}\n\n\t/**\n\t * Checks if the given text is of Heading type\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic test({ line, nextLine }) {\n\t\tif (Heading.testRegex(line)) return true\n\t\tif (nextLine !== undefined && !HrLine.test({ line })) {\n\t\t\tif (\n\t\t\t\tHeading.testH1UnderlineRegex(nextLine) ||\n\t\t\t\tHeading.testH2UnderlineRegex(nextLine)\n\t\t\t) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Heading Tokenizer Constructor\n\t *\n\t * @param {string} line current line to tokenize\n\t * @param {string| undefined} nextLine next line for tokenization\n\t *\n\t * @returns {Heading}\n\t */\n\tconstructor(line, nextLine) {\n\t\tthis.#line = line\n\t\tthis.#nextLine = nextLine\n\t\tthis.#findType()\n\t}\n\n\t/**\n\t * Checks if the Heading is of Setext or ATX type\n\t *\n\t * Sets the #setext property to true if it is of Underline type\n\t * Sets the #level property to the level of the Heading\n\t *\n\t * @returns void\n\t */\n\t#findType() {\n\t\tif (this.#nextLine !== undefined) {\n\t\t\tif (!Heading.testRegex(this.#line)) {\n\t\t\t\tif (Heading.testH1UnderlineRegex(this.#nextLine)) {\n\t\t\t\t\tthis.#setext = true\n\t\t\t\t\tthis.#level = 1\n\t\t\t\t}\n\t\t\t\telse if (Heading.testH2UnderlineRegex(this.#nextLine)) {\n\t\t\t\t\tthis.#setext = true\n\t\t\t\t\tthis.#level = 2\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!this.#setext) {\n\t\t\tthis.#match = Heading.match(this.#line)?.groups\n\t\t\tthis.#match.value = this.#match.fenceVal || this.#match.val\n\t\t\tdelete this.#match.fenceVal\n\t\t\tdelete this.#match.val\n\t\t}\n\t}\n\n\t/**\n\t * tokenizes the line for Heading token\n\t *\n\t * @returns {{level: number, value: string, raw: string, setext: boolean}}\n\t */\n\ttokenize() {\n\t\tif (!this.#setext) {\n\t\t\treturn {\n\t\t\t\tlevel: this.#match.level.length,\n\t\t\t\tvalue: this.#match.value.trimEnd(),\n\t\t\t\traw: this.#line,\n\t\t\t\tsetext: false\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tlevel: this.#level,\n\t\t\t\tvalue: this.#line.trimEnd(),\n\t\t\t\traw: `${this.#line}\\n${this.#nextLine}`,\n\t\t\t\tsetext: true\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Runs the HTML parsing for the Heading token\n\t *\n\t * @param {Object} lexer the Heading lex\n\t *\n\t * @returns {string} the Heading HTML\n\t */\n\tstatic parse(lexer) {\n\t\treturn `<h${lexer.level}>${Paragraph.parse(lexer)}</h${lexer.level}>`\n\t}\n}\n\nexport default Heading\n","import REGEX from \"../regex/index.js\"\nimport Lexer from \"../lexer/index.js\"\nimport Parser from \"../parser/index.js\"\nimport { Newline, Heading, Quote } from \"./index.js\"\nimport { TOKENS, Utils, Indent } from \"../util/index.js\"\n\n/**\n * List Tokenizer\n */\nclass List {\n\t#lines\n\t#cursor\n\t#indent\n\t#body = []\n\t#end\n\t#shrunkBody = []\n\t#lex\n\t#match\n\t#isEmpty\n\t#meta = {\n\t\tchecklist: false,\n\t\tordered: false,\n\t\tidentifier: null\n\t}\n\n\tstatic tokenName = TOKENS.LIST\n\n\tstatic testEmpty(text) {\n\t\treturn Utils.testRegex(text, REGEX.LIST.EMPTY)\n\t}\n\n\tstatic testItem(text) {\n\t\treturn Utils.testRegex(text, REGEX.LIST.ITEM)\n\t}\n\n\tstatic test({ line }) {\n\t\tif (List.testEmpty(line)) { return true }\n\t\treturn List.testItem(line)\n\t}\n\n\n\tstatic matchEmpty(text) {\n\t\treturn Utils.execRegex(text, REGEX.LIST.EMPTY)\n\t}\n\n\tstatic matchItem(text) {\n\t\treturn Utils.execRegex(text, REGEX.LIST.ITEM)\n\t}\n\n\tstatic match(text, isEmpty = false) {\n\t\tif (isEmpty) {\n\t\t\treturn List.matchEmpty(text)\n\t\t}\n\t\treturn List.matchItem(text)\n\t}\n\n\tconstructor(lines, cursor, indent) {\n\t\tthis.#lines = lines\n\t\tthis.#cursor = cursor\n\t\tthis.#indent = indent\n\t\tthis.#isEmpty = List.testEmpty(lines[cursor])\n\t\tthis.#processMeta()\n\n\t}\n\n\t/**\n\t * Finds the end of the list item\n\t * Updates the cursor value\n\t */\n\t#findEnd() {\n\t\tif (this.#isEmpty) {\n\t\t\tthis.#end = this.#cursor + 1\n\t\t\treturn\n\t\t}\n\n\t\tlet cursor = this.#cursor\n\t\tlet nextLine, nextLineIndent, nextNextLine\n\t\tlet breakMatch = false\n\n\n\t\tdo {\n\t\t\tnextLine = this.#lines[++cursor]\n\n\t\t\tnextLineIndent = Indent.get(nextLine)\n\t\t\t// check for two or more consecutive new lines\n\t\t\t// if we find that, then we know we are at the end of the list item\n\t\t\tnextNextLine = this.#lines[cursor + 1]\n\t\t\tif (\n\t\t\t\tNewline.test({ line: nextLine })\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\tnextNextLine &&\n\t\t\t\t\tNewline.test({ line: nextNextLine })\n\t\t\t\t) {\n\t\t\t\t\tbreakMatch = true\n\t\t\t\t} else if (\n\t\t\t\t\tIndent.get(nextNextLine) <= this.#indent\n\t\t\t\t) {\n\t\t\t\t\tbreakMatch = true\n\t\t\t\t}\n\t\t\t}\n\t\t} while (\n\t\t\tnextLine !== undefined &&\n\t\t\t!breakMatch &&\n\t\t\t!(\n\t\t\t\t(\n\t\t\t\t\tList.test({ line: nextLine }) ||\n\t\t\t\t\tHeading.test({ line: nextLine, nextLine: nextNextLine }) ||\n\t\t\t\t\tQuote.test({ line: nextLine })\n\t\t\t\t) &&\n\t\t\t\tnextLineIndent <= this.#indent\n\t\t\t)\n\t\t)\n\t\tthis.#end = cursor\n\t}\n\n\t/**\n\t * Processes the list item meta\n\t *\n\t * The following meta are calculated:\n\t * 1. ordered: boolean - if the list item is ordered\n\t * 2. identifier: string - the identifier for the list item\n\t * 3. check: boolean - if the list item is a checklist item\n\t */\n\t#processMeta() {\n\t\tthis.#match = List.match(this.#lines[this.#cursor], this.#isEmpty).groups\n\n\t\tthis.#meta.checklist = this.#match.check !== undefined\n\n\t\tthis.#meta.ordered = !!this.#match.count\n\n\t\tif (this.#match.mark) this.#meta.identifier = this.#match.mark\n\t}\n\n\t/**\n\t * Sets the raw body of the list item\n\t */\n\t#setBody() {\n\t\tthis.#body = this.#lines.slice(this.#cursor, this.#end)\n\t}\n\n\t/**\n\t * Shrinks raw body for the list item\n\t */\n\t#shrinkBody() {\n\t\tfor (let index = 0; index < this.#body.length; index++) {\n\t\t\tconst line = this.#body[index]\n\t\t\tif (index === 0) {\n\t\t\t\tif (this.#isEmpty) {\n\t\t\t\t\tthis.#shrunkBody.push(\"\")\n\t\t\t\t} else {\n\t\t\t\t\tthis.#shrunkBody.push(this.#match.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.#shrunkBody.push(line)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tokenizes the provided lines for the List Item token\n\t *\n\t * @returns {{cursor: number,  meta: {ordered: boolean, identifier: null, checklist: boolean}, lexer: {count: null, checked: (boolean|null), raw: string, tokens: *, type: string}}}\n\t */\n\ttokenize() {\n\t\tthis.#findEnd()\n\n\t\tthis.#setBody()\n\n\t\tthis.#shrinkBody()\n\n\t\tthis.#lex = new Lexer(this.#shrunkBody, { from: TOKENS.LIST_ITEM })\n\n\t\treturn {\n\t\t\tcursor: this.#end - 1,\n\t\t\tmeta: this.#meta,\n\t\t\tlexer: {\n\t\t\t\ttype: TOKENS.LIST_ITEM,\n\t\t\t\ttokens: this.#lex.run(),\n\t\t\t\tcount: this.#match.count || null,\n\t\t\t\tchecked: (this.#meta.checklist) ? this.#match.check === \"x\" : null,\n\t\t\t\traw: this.#body.join(\"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Runs HTML parsing for the List token\n\t *\n\t * @param {Object} lexer - the List lexer\n\t *\n\t * @returns {string} - the List HTML\n\t */\n\tstatic parse(lexer) {\n\t\tconst listTag = (lexer.meta.ordered) ? \"ol\" : \"ul\"\n\t\tlet listBodyHtml = []\n\t\tlexer.items.forEach(listItem => {\n\t\t\tlet listItemHtml = \"<li>%s</li>\"\n\t\t\tconst lParser = new Parser(listItem.tokens, { from: TOKENS.LIST })\n\t\t\tif (lexer.meta.checklist) {\n\t\t\t\tconst isChecked = (listItem.checked) ? \" checked\" : \"\"\n\t\t\t\tlistItemHtml = listItemHtml. replace(\n\t\t\t\t\t\"%s\",\n\t\t\t\t\t\"<input type='checkbox'\" +\n\t\t\t\t\t\tisChecked +\n\t\t\t\t\t\t\">\" +\n\t\t\t\t\t\tlParser.run()\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tlistItemHtml = listItemHtml.replace(\n\t\t\t\t\t\"%s\",\n\t\t\t\t\tnew Parser(listItem.tokens, { from: TOKENS.LIST }).run()\n\t\t\t\t)\n\t\t\t}\n\t\t\tlistBodyHtml.push(listItemHtml)\n\t\t})\n\t\treturn `<${listTag}>${listBodyHtml.join(\"\")}</${listTag}>`\n\t}\n\n\t/**\n\t * Runs check if the last and current lexer is of same list type\n\t *\n\t * Things under check are:\n\t * 1. type of the lexers\n\t * 2. indentation\n\t * 3. is of type checklist\n\t * 4. ordered or unordered\n\t * 5. identifier of the list item\n\t *\n\t * @param {Object} baseLexer\n\t * @param {Object} lexerToCompare\n\t * @param {number} indent\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic compareIfTwoListLexerAreOfSameType(baseLexer, lexerToCompare, indent) {\n\t\treturn (\n\t\t\tbaseLexer &&\n\t\t\tbaseLexer.type === TOKENS.LIST &&\n\t\t\tbaseLexer.indent === indent &&\n\t\t\tbaseLexer.meta.checklist === lexerToCompare.meta.checklist &&\n\t\t\tbaseLexer.meta.ordered === lexerToCompare.meta.ordered &&\n\t\t\tbaseLexer.meta.identifier === lexerToCompare.meta.identifier\n\t\t)\n\t}\n}\n\nexport default List\n","import REGEX from \"../regex/index.js\"\nimport { Utils, TOKENS } from \"../util/index.js\"\n\n/**\n * HTML code\n */\nclass HTML {\n\t#linkRefs\n\t#lines\n\t#cursor\n\t#indent\n\t#lex\n\n\tstatic tokenName = TOKENS.HTML\n\n\tconstructor(lines, cursor, indent, linkRefs) {\n\t\tthis.#lines = lines\n\t\tthis.#cursor = cursor\n\t\tthis.#indent = indent\n\t\tthis.#linkRefs = linkRefs\n\t\tthis.#lex = []\n\t}\n\n\t/**\n\t * @param {string} text\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic test(text) {\n\t\treturn Utils.testRegex(text, REGEX.PARAGRAPH.HTML)\n\t}\n\n\tstatic testBlock({ lines, cursor }) {\n\t\tconst lineToParse = lines[cursor]\n\t\treturn Utils.testRegex(lineToParse, REGEX.HTML)\n\t}\n\n\ttokenize() {\n\t\tconst regexMatch = Utils.execRegex(this.#lines[this.#cursor], REGEX.HTML)\n\t\tthis.#lex = {\n\t\t\ttype: TOKENS.HTML,\n\t\t\tindent: this.#indent,\n\t\t\t...regexMatch.groups,\n\t\t\traw: this.#lines[this.#cursor]\n\t\t}\n\t\treturn { lexer: this.#lex, cursor: this.#cursor }\n\t}\n\n\t/**\n\t * returns HTML\n\t *\n\t * @returns {string}\n\t */\n\tstatic parse(lexer) {\n\t\t// if (lexer.tag.toLowerCase() === \"a\") {\n\t\t// \treturn `<p>${lexer.raw}</p>`\n\t\t// }\n\t\treturn lexer.raw\n\t}\n}\n\nexport default HTML\n","import REGEX from \"../regex/index.js\"\nimport { TOKENS, Utils, Esc } from \"../util/index.js\"\n\n\n\nclass Paragraph {\n\tstatic tokenName = TOKENS.PARAGRAPH\n\n\t/**\n\t * Returns a fence object\n\t *\n\t * @param {Boolean} fence - true if fence, false otherwise\n\t * @param {String} ident - identifier, defaults to \"\"\n\t * @param {Number} start - start index, defaults to -1\n\t * @param {Number} end - end index, defaults to -1\n\t *\n\t * @returns {{ident: string, start: number, end: number, fence: boolean}}\n\t */\n\tstatic fenceObj(fence = false, ident = \"\", start = -1, end = -1) {\n\t\treturn {\n\t\t\tfence, ident, start, end\n\t\t}\n\t}\n\n\t/**\n\t * Determines if the identifier can have a complete fence\n\t *\n\t * Checks:\n\t * 1. If start is greater than the length of the string\n\t * 2. If string after start contains the identifier character\n\t *\n\t * @param str\n\t * @param start\n\t * @param identifierChar\n\t * @returns {boolean}\n\t */\n\tstatic #fenceSanity(str, start, identifierChar) {\n\t\t// if start is greater than the length of the line, immediately return false\n\t\tif (start > str.length) return false\n\n\t\t// if no identifier beside the start, immediately return false\n\t\tconst afterIdentifier = str.substring(start)\n\t\treturn afterIdentifier.includes(identifierChar)\n\t}\n\n\t/**\n\t * Determines if the provided string is fenced from the cursor position\n\t *\n\t * @param {String} lineToParse - line to parse\n\t * @param {Number} cursor - starting position\n\t * @param {String} identifier - fence identifier\n\t * @param {Boolean} onlyExact - only exact match\n\t * @param {Boolean} evenFence - even fence\n\t *\n\t * @returns {{start: Number, ident: string, end: Number, fence: boolean}}\n\t */\n\tstatic #isFenced(lineToParse, cursor, identifier, onlyExact=false, evenFence = false) {\n\t\t// start from cursor + length of identifier\n\t\tconst start = cursor + identifier.length\n\n\t\tconst sanity = Paragraph.#fenceSanity(lineToParse, start, identifier[0])\n\t\tif (!sanity) return Paragraph.fenceObj()\n\n\t\tconst afterStartStr = lineToParse.slice(start)\n\n\t\tif ((evenFence && identifier.length % 2 === 0)||!evenFence) {\n\t\t\t// if exact identifier behind then do not go for further checks\n\t\t\tconst exactEnd = Utils.isExactMatch(afterStartStr, identifier)\n\n\t\t\tif (exactEnd !== -1) {\n\t\t\t\treturn this.fenceObj(true, identifier, start, start + exactEnd)\n\t\t\t}\n\t\t}\n\n\t\tif (!onlyExact) {\n\t\t\tfor (let i=start; i >= cursor; i--) {\n\n\n\t\t\t\tconst tempIdentifier = lineToParse.substring(cursor, i)\n\n\t\t\t\tif (evenFence) {\n\t\t\t\t\tif (tempIdentifier.length % 2 !== 0) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst end = Utils.isLooseMatch(afterStartStr, tempIdentifier)\n\n\t\t\t\tif (end !== -1) {\n\t\t\t\t\treturn Paragraph.fenceObj(true, tempIdentifier, start, start + end)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Paragraph.fenceObj()\n\t}\n\n\n\t/**\n\t * Link: title, href, tooltip\n\t *\n\t * If match not found then falsy value is returned\n\t * Otherwise, groups and end are returned\n\t *\n\t * @param {String} lineToParse\n\t * @param {Number} cursor\n\t * @returns {{found: boolean, groups: null, end: number}|{found: boolean, groups: {[p: string]: string}, end: *}}\n\t */\n\tstatic #findLink(lineToParse, cursor) {\n\t\tconst check = lineToParse.substring(cursor)\n\t\tif (Utils.testRegex(check, REGEX.PARAGRAPH.LINK)) {\n\t\t\tconst match = Utils.execRegex(check, REGEX.PARAGRAPH.LINK)\n\t\t\treturn {\n\t\t\t\tfound: true,\n\t\t\t\tgroups: match.groups,\n\t\t\t\tend: cursor + match[0].length - 1\n\t\t\t}\n\t\t} return { found: false, groups: null, end: -1 }\n\t}\n\n\tstatic #findHtml(lineToParse, cursor) {\n\t\tconst check = lineToParse.substring(cursor)\n\t\tif (Utils.testRegex(check, REGEX.PARAGRAPH.HTML)) {\n\t\t\tconst match = Utils.execRegex(check, REGEX.PARAGRAPH.HTML)\n\t\t\treturn {\n\t\t\t\tfound: true,\n\t\t\t\tgroups: match.groups,\n\t\t\t\tend: cursor + match[0].length - 1\n\t\t\t}\n\t\t} return { found: false, groups: null, end: -1 }\n\t}\n\n\t/**\n\t * Finds link reference in the provided line\n\t *\n\t * If match not found then falsy value is returned\n\t * Otherwise, groups, withText (bool) and end are returned\n\t *\n\t * @param {String} lineToParse\n\t * @param {Number} cursor\n\t * @returns {{found: boolean, groups: null, end: number}|{found: boolean, groups: {[p: string]: string}, end: number, withText: boolean}}\n\t */\n\tstatic #findLinkRef(lineToParse, cursor) {\n\t\tconst check = lineToParse.substring(cursor)\n\t\tlet withText = false\n\t\tlet match\n\n\t\tif (Utils.testRegex(check, REGEX.PARAGRAPH.REF_LINK)) {\n\t\t\t// check if link ref with text\n\t\t\tif (Utils.testRegex(check, REGEX.LINK_REF.WITH_TEXT)) {\n\t\t\t\twithText = true\n\t\t\t\tmatch = Utils.execRegex(check, REGEX.LINK_REF.WITH_TEXT)\n\t\t\t} else {\n\t\t\t\tmatch = Utils.execRegex(check, REGEX.LINK_REF.WITHOUT_TEXT)\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfound: true,\n\t\t\t\twithText,\n\t\t\t\tgroups: match.groups,\n\t\t\t\tend: cursor + match[0].length - 1\n\t\t\t}\n\t\t} return { found: false, groups: null, end: -1 }\n\t}\n\n\n\t/**\n\t * Finds image in the provided line\n\t *\n\t * If match not found then falsy value is returned\n\t * Otherwise, groups and end are returned\n\t *\n\t * @param {String} lineToParse\n\t * @param {Number} cursor\n\t *\n\t * @returns {{found: boolean, groups: {[p: string]: string}, end: number}|{found: boolean, groups: null, end: number}}\n\t */\n\tstatic #findImage(lineToParse, cursor) {\n\t\tconst check = lineToParse.substring(cursor)\n\t\tif (Utils.testRegex(check, REGEX.PARAGRAPH.IMAGE)) {\n\t\t\tconst match = Utils.execRegex(check, REGEX.PARAGRAPH.IMAGE)\n\t\t\treturn {\n\t\t\t\tfound: true,\n\t\t\t\tgroups: match.groups,\n\t\t\t\tend: cursor + match[0].length - 1\n\t\t\t}\n\t\t} return { found: false, groups: null, end: -1 }\n\t}\n\n\t/**\n\t * Tokenize emphasis using the identifiers\n\t *\n\t * 1. Bold: **|__ fence (even)\n\t * 2. Italics: *|_ fence (odd)\n\t * 3. Code: ` fence (exact)\n\t * 4. Underline: ++ fence (even)\n\t * 5. Strike: -- fence (even)\n\t * 6. Links: [text](url \"title\")\n\t * \t\t\t\t\t\"title\" is optional\n\t * 7. Image: ![text](url \"title\" 50 50)\n   * \t\t\t\t\t\"title\" 50 50 are optional\n\t *\n\t *\n\t * @param {String} lineToParse\n\t * @param {Array} linkRefs\n\t *\n\t * @returns {*[]}\n\t */\n\tstatic #findEmphasis(lineToParse, linkRefs) {\n\t\tlet identifier\n\t\tconst tokens = []\n\n\t\tfunction runCheckForTextBeforeStart(start, cursor, ident) {\n\t\t\tconst lastToken = tokens[tokens.length - 1]\n\t\t\tif (start > cursor + ident.length) {\n\t\t\t\tconst text = lineToParse.substring(cursor, start - ident.length)\n\t\t\t\tif (lastToken && lastToken.type === TOKENS.TEXT) {\n\t\t\t\t\tlastToken.raw += text\n\t\t\t\t\tlastToken.value += text\n\t\t\t\t} else {\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\ttype: TOKENS.TEXT,\n\t\t\t\t\t\traw: text,\n\t\t\t\t\t\tvalue: text\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let cursor=0; cursor<lineToParse.length; cursor++) {\n\t\t\tconst currChar = lineToParse[cursor]\n\t\t\tconst prevChar = lineToParse[cursor-1] || null\n\t\t\tconst nextChar = lineToParse[cursor+1] || null\n\t\t\tconst lastToken = tokens[tokens.length - 1]\n\n\t\t\tlet escape = false\n\n\t\t\tif (prevChar && prevChar === \"\\\\\") escape = true\n\n\t\t\tif (!escape && (currChar === \"*\" || currChar === \"_\")) {\n\t\t\t\tidentifier = Utils.findConsecutive(lineToParse, cursor, currChar)\n\n\t\t\t\tconst { fence, ident, start, end } = Paragraph.#isFenced(lineToParse, cursor, identifier)\n\n\t\t\t\tif (fence) {\n\t\t\t\t\t// grab the text before the fence\n\t\t\t\t\trunCheckForTextBeforeStart(start, cursor, ident)\n\n\t\t\t\t\tconst v = lineToParse.slice(start, end)\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\ttype: (ident.length % 2 === 0)\n\t\t\t\t\t\t\t? TOKENS.BOLD\n\t\t\t\t\t\t\t: TOKENS.ITALIC,\n\t\t\t\t\t\traw: `${ident}${v}${ident}`,\n\t\t\t\t\t\ttokens: Paragraph.#findEmphasis(v, linkRefs)\n\t\t\t\t\t})\n\t\t\t\t\tcursor = end + ident.length - 1\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!escape && currChar === \"`\") {\n\t\t\t\tidentifier = Utils.findConsecutive(lineToParse, cursor, \"`\")\n\n\t\t\t\tconst { fence, ident, start, end } = Paragraph.#isFenced(lineToParse, cursor, identifier, true)\n\n\t\t\t\tif (fence) {\n\t\t\t\t\tconst value = lineToParse.slice(start, end)\n\t\t\t\t\tif (value.length > 0) {\n\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\ttype: TOKENS.CODE,\n\t\t\t\t\t\t\traw: `${ident}${value}${ident}`,\n\t\t\t\t\t\t\t// TIP: no need to waste time escaping it again\n\t\t\t\t\t\t\t// because, the code token value is already escaped here\n\t\t\t\t\t\t\tvalue: value.trim()\n\t\t\t\t\t\t})\n\t\t\t\t\t\tcursor = end + ident.length - 1\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!escape && [\"~\", \"+\"].includes(currChar)) {\n\t\t\t\t// underline and strike\n\t\t\t\tif (nextChar && nextChar === currChar) {\n\t\t\t\t\tidentifier = Utils.findConsecutive(lineToParse, cursor, currChar)\n\n\t\t\t\t\tconst { fence, ident, start, end } = Paragraph.#isFenced(lineToParse, cursor, identifier, false, true)\n\n\t\t\t\t\tif (fence) {\n\t\t\t\t\t\trunCheckForTextBeforeStart(start, cursor, ident)\n\n\t\t\t\t\t\tconst v = lineToParse.slice(start, end)\n\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\ttype: (currChar === \"+\") ? TOKENS.UNDERLINE: TOKENS.STRIKE_THROUGH,\n\t\t\t\t\t\t\traw: `${ident}${v}${ident}`,\n\t\t\t\t\t\t\ttokens: Paragraph.#findEmphasis(v, linkRefs)\n\t\t\t\t\t\t})\n\t\t\t\t\t\tcursor = end + ident.length - 1\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!escape && currChar === \"[\") {\n\t\t\t\t// link\n\t\t\t\tconst linkMatch = Paragraph.#findLink(lineToParse, cursor)\n\n\t\t\t\tif (linkMatch.found) {\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\ttype: TOKENS.LINK,\n\t\t\t\t\t\traw: lineToParse.slice(cursor, linkMatch.end + 1),\n\t\t\t\t\t\ttokens: {\n\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\traw: linkMatch.groups.text,\n\t\t\t\t\t\t\t\ttokens: Paragraph.#findEmphasis(linkMatch.groups.text, linkRefs)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\thref: linkMatch.groups.href,\n\t\t\t\t\t\t\ttooltip: linkMatch.groups.title\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tcursor = linkMatch.end\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\t// link reference\n\t\t\t\tif (linkRefs.length > 0) {\n\t\t\t\t\tconst linkRefMatch = Paragraph.#findLinkRef(lineToParse, cursor)\n\t\t\t\t\tif (linkRefMatch.found) {\n\n\t\t\t\t\t\t// if the found reference is in the list of references, add it to the tokens\n\t\t\t\t\t\tconst ref = linkRefs.find(r => r.text === linkRefMatch.groups.ref)\n\n\t\t\t\t\t\tif (ref) {\n\t\t\t\t\t\t\tconst rawTitle = (linkRefMatch.withText) ? linkRefMatch.groups.text : ref.text\n\n\t\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\t\ttype: TOKENS.LINK,\n\t\t\t\t\t\t\t\traw: lineToParse.slice(cursor, linkRefMatch.end + 1),\n\t\t\t\t\t\t\t\ttokens: {\n\t\t\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\t\t\traw: rawTitle,\n\t\t\t\t\t\t\t\t\t\ttokens: Paragraph.#findEmphasis(rawTitle, linkRefs)\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\thref: ref.href,\n\t\t\t\t\t\t\t\t\ttooltip: ref.title\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tcursor = linkRefMatch.end\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!escape && currChar === \"!\") {\n\t\t\t\t// image parsing\n\t\t\t\tconst imageMatch = Paragraph.#findImage(lineToParse, cursor)\n\t\t\t\tif (imageMatch.found) {\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\ttype: TOKENS.IMAGE,\n\t\t\t\t\t\traw: lineToParse.slice(cursor, imageMatch.end + 1),\n\t\t\t\t\t\ttokens: imageMatch.groups\n\t\t\t\t\t})\n\t\t\t\t\tcursor = imageMatch.end\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t// TODO: image reference\n\t\t\t}\n\t\t\telse if (!escape && currChar === \"<\") {\n\t\t\t\tconst htmlMatch = Paragraph.#findHtml(lineToParse, cursor)\n\t\t\t\tif (htmlMatch.found) {\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\ttype: TOKENS.HTML,\n\t\t\t\t\t\traw: lineToParse.slice(cursor, htmlMatch.end + 1),\n\t\t\t\t\t\ttokens: {\n\t\t\t\t\t\t\ttag: htmlMatch.groups?.tag || htmlMatch.groups?.endTag,\n\t\t\t\t\t\t\tattributes: htmlMatch.groups.attrs?.trim(),\n\t\t\t\t\t\t\tisEndTag: !! htmlMatch.groups?.endTag\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tcursor = htmlMatch.end\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// otherwise a normal text\n\t\t\tif (lastToken && lastToken.type === TOKENS.TEXT) {\n\t\t\t\tlastToken.raw += currChar\n\t\t\t\tlastToken.value += currChar\n\t\t\t} else {\n\t\t\t\t// a normal text\n\t\t\t\ttokens.push({\n\t\t\t\t\ttype: TOKENS.TEXT,\n\t\t\t\t\traw: currChar,\n\t\t\t\t\tvalue: currChar\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\treturn tokens\n\t}\n\n\t/**\n\t * Paragraph Tokenization\n\t * Tokenizes a line of text into emphasis tokens\n\t *\n\t * @param {String} lineToParse\n\t * @param {Array} linkRefs\n\t *\n\t * @returns {*[]}\n\t */\n\tstatic tokenize(lineToParse, linkRefs) {\n\t\treturn Paragraph.#findEmphasis(lineToParse, linkRefs)\n\t}\n\n\tstatic parse(lexer) {\n\t\tlet parsed = \"\"\n\t\tlexer.tokens.forEach(token => {\n\t\t\tif (token.type === TOKENS.BOLD) {\n\t\t\t\tparsed += `<strong>${Paragraph.parse(token)}</strong>`\n\t\t\t} else if (token.type === TOKENS.ITALIC) {\n\t\t\t\tparsed += `<em>${Paragraph.parse(token)}</em>`\n\t\t\t} else if (token.type === TOKENS.CODE) {\n\t\t\t\ttoken.value = Esc.unEscape(token.value)\n\t\t\t\tparsed += `<code>${Esc.everything(token.value)}</code>`\n\t\t\t}else if (token.type === TOKENS.STRIKE_THROUGH) {\n\t\t\t\tparsed += `<s>${Paragraph.parse(token)}</s>`\n\t\t\t} else if (token.type === TOKENS.LINK) {\n\t\t\t\tconst linkTokens = token.tokens\n\t\t\t\tlet linkTag = `<a href=\"${linkTokens.href}\"` +\n\t\t\t\t\t\t(linkTokens.tooltip ? ` title=\"${linkTokens.tooltip}\"` : \"\") +\n\t\t\t\t\t\t\">\" +\n\t\t\t\t\t\tParagraph.parse(linkTokens.title) +\n\t\t\t\t\t\t\"</a>\"\n\n\t\t\t\tparsed += linkTag\n\t\t\t} else if (token.type === TOKENS.UNDERLINE) {\n\t\t\t\tparsed += `<u>${Paragraph.parse(token)}</u>`\n\t\t\t} else if (token.type === TOKENS.IMAGE) {\n\t\t\t\tconst imgTokens = token.tokens\n\t\t\t\tlet imgTag = `<img src=\"${imgTokens.href}\"` +\n\t\t\t\t\t\t(imgTokens.alt !== undefined ? ` alt=\"${imgTokens.alt}\"` : \"\") +\n\t\t\t\t\t\t(imgTokens.title !== undefined ? ` title=\"${imgTokens.title}\"` : \"\") +\n\t\t\t\t\t\t(imgTokens.width !== undefined ? ` width=\"${imgTokens.width}\"` : \"\") +\n\t\t\t\t\t\t(imgTokens.height !== undefined ? ` height=\"${imgTokens.height}\"` : \"\") +\n\t\t\t\t\t\t\">\"\n\t\t\t\tparsed += imgTag\n\t\t\t} else if (token.type === TOKENS.HTML) {\n\t\t\t\tparsed += token.raw\n\t\t\t} else {\n\t\t\t\tconst escaped = Esc.nonTags(token.value)\n\t\t\t\tconst unescaped = Esc.unEscape(escaped)\n\t\t\t\tparsed += unescaped\n\t\t\t}\n\t\t})\n\t\treturn parsed\n\t}\n}\n\nexport default Paragraph\n","import { TOKENS, Utils } from \"../util/index.js\"\nimport REGEX from \"../regex/index.js\"\n\n\nclass FrontMatter {\n\t#lines\n\t#endLine\n\t#body\n\t#value = {}\n\n\tstatic tokenName = TOKENS.FRONT_MATTER\n\n\tconstructor(lines) {\n\t\tthis.#lines = lines\n\t\tthis.findEnd()\n\t}\n\n\tstatic test(lines) {\n\t\tif (Utils.testRegex(lines[0], REGEX.FRONT_MATTER.BOUNDARY)) {\n\t\t\tfor (let i = 1; i < lines.length; i++) {\n\t\t\t\tconst line = lines[i]\n\t\t\t\tif (Utils.testRegex(line, REGEX.FRONT_MATTER.BOUNDARY)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\tif (!Utils.testRegex(line, REGEX.FRONT_MATTER.ENTRY)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tfindEnd() {\n\t\tfor (let i = 1; i < this.#lines.length; i++) {\n\t\t\tif (Utils.testRegex(this.#lines[i], REGEX.FRONT_MATTER.BOUNDARY)) {\n\t\t\t\tthis.#endLine = i + 1\n\t\t\t}\n\t\t}\n\t\tthis.#body = this.#lines.slice(1, this.#endLine - 1)\n\t}\n\n\tremoveFrontMatterFromGivenLines() {\n\t\treturn this.#lines.slice(this.#endLine + 1)\n\t}\n\n\tgetValue() {\n\t\tfor (let i = 0; i < this.#body.length; i++) {\n\t\t\tconst line = this.#body[i]\n\t\t\tif (Utils.testRegex(line, REGEX.FRONT_MATTER.ENTRY)) {\n\t\t\t\tconst match = Utils.execRegex(line, REGEX.FRONT_MATTER.ENTRY)\n\t\t\t\tif (match) {\n\t\t\t\t\tlet keyValue = match.groups.value\n\t\t\t\t\tif ([\"true\", \"false\"].includes(keyValue.toLowerCase())) {\n\t\t\t\t\t\tkeyValue = keyValue.toLowerCase() === \"true\"\n\t\t\t\t\t} else if (REGEX.NUMBER.test(keyValue)) {\n\t\t\t\t\t\tkeyValue = parseInt(keyValue)\n\t\t\t\t\t} else if (REGEX.NUMBER_WITH_DECIMAL.test(keyValue)) {\n\t\t\t\t\t\tkeyValue = parseFloat(keyValue)\n\t\t\t\t\t} else if (REGEX.BIG_BRACKETED.test(keyValue) || REGEX.CURLY_BRACKETED.test(keyValue)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tkeyValue = JSON.parse(keyValue)\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// do nothing\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.#value[match.groups.key] = keyValue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.#value\n\t}\n}\n\nexport default FrontMatter\n","import { TOKENS } from \"../util/index.js\"\n\n\nclass Newline {\n\tstatic tokenName = TOKENS.NEW_LINE\n\n\tstatic test({ line }) {\n\t\tif (typeof line !== \"string\") return false\n\t\treturn [\"\", \"\\n\"].includes(line.trim())\n\t}\n\n\t/**\n\t * returns HTML for a newline\n\t *\n\t * @returns {string}\n\t */\n\tstatic parse() {\n\t\treturn \"<br>\"\n\t}\n}\n\nexport default Newline\n","import Table from \"./table.js\"\nimport Image from \"./image.js\"\nimport Comment from \"./comment.js\"\nimport HrLine from \"./hrLine.js\"\nimport CodeBlock from \"./codeblock.js\"\nimport Quote from \"./quote.js\"\nimport Heading from \"./heading.js\"\nimport List from \"./list.js\"\nimport HTML from \"./html.js\"\nimport Paragraph from \"./paragraph.js\"\nimport FrontMatter from \"./frontMatter.js\"\nimport Newline from \"./newline.js\"\n\n\nconst Parsers = {\n\tTable, Image, Comment, HrLine, CodeBlock,\n\tQuote, Heading, List, HTML, Paragraph\n}\n\nconst Tokenizers = {\n\tTable, Image, Comment, HrLine, CodeBlock,\n\tQuote, Heading, List, HTML, Newline\n}\n\nexport {\n\tParsers, Tokenizers,\n\tTable, Image, Comment, HrLine, CodeBlock, Quote,\n\tHeading, List, HTML, Paragraph, FrontMatter, Newline\n}\n","import REGEX from \"../regex/index.js\"\nimport {\n\tNewline, Heading, FrontMatter, List, HTML,\n\tHrLine, Paragraph, Comment, Quote, Image, Table, CodeBlock\n} from \"../tokenizer/index.js\"\nimport { Indent, Utils, TOKENS } from \"../util/index.js\"\n\n\nclass Lexer {\n\t#cursor\n\t#lines\n\t#lexerData\n\t#currLine\n\t#nextLine\n\t#currLineIndent\n\t#currLineRawIndent\n\t#lastLexerItem\n\t#lexerLengthBefore\n\t#fromToken\n\t#linkRefs = []\n\t#frontMatter\n\t#config\n\n\tconstructor(lines, { from = null, config= {} } = {}) {\n\t\tthis.#lines = lines\n\t\tthis.#lexerData = []\n\t\tthis.#fromToken = from\n\t\tthis.#cursor = 0\n\t\tthis.#config = config\n\t}\n\n\t#runCurrLineLexer() {\n\t\tconst context = {\n\t\t\tline: this.#currLine,\n\t\t\tnextLine: this.#nextLine,\n\t\t\tlines: this.#lines,\n\t\t\tcursor: this.#cursor,\n\t\t\tindent: this.#currLineIndent,\n\t\t\tlastLexer: this.#lastLexerItem,\n\t\t\tfromToken: this.#fromToken\n\t\t}\n\n\t\tif (Newline.test(context)) return this.#runNewLineLexer()\n\n\t\tif (Heading.test(context)) return this.#runHeadingLexer()\n\n\t\tif (HrLine.test(context)) return this.#runHrLineLexer()\n\n\t\tif (Comment.test(context)) return this.#runCommentLexer()\n\n\t\tif (Image.test(context)) return this.#runImageLexer()\n\n\t\tif (Quote.test(context)) return this.#runQuoteLexer()\n\n\t\tif (List.test(context)) return this.#runListLexer()\n\n\t\tif (Table.test(context)) return this.#runTableLexer()\n\n\t\tif (HTML.testBlock(context)) return this.#runHTMLLexer()\n\n\t\tif (CodeBlock.test(context)) return this.#runCodeBlockLexer()\n\n\t\t// otherwise, it is a paragraph\n\t\treturn this.#runParagraphLexer()\n\t}\n\n\t#runNewLineLexer() {\n\t\t// cannot be added at the top of the content\n\t\tif (this.#lexerLengthBefore === 0) return true\n\t\t// if there are multiple new lines in a row,\n\t\t// only single new line is added to the lexerContent\n\t\tif (this.#lastLexerItem.type !== TOKENS.NEW_LINE) {\n\t\t\tthis.#lexerData.push({\n\t\t\t\ttype: TOKENS.NEW_LINE\n\t\t\t})\n\t\t}\n\t}\n\n\t#runHrLineLexer() {\n\t\t// if (this.#lastLexerItem && this.#lastLexerItem.type === TOKENS.HR_LINE) return true\n\t\tthis.#lexerData.push({\n\t\t\ttype: TOKENS.HR_LINE\n\t\t})\n\t}\n\n\t#runCodeBlockLexer() {\n\t\tconst cbTokenizer = new CodeBlock(\n\t\t\tthis.#lines,\n\t\t\tthis.#cursor,\n\t\t\tthis.#currLineIndent,\n\t\t\tthis.#currLineRawIndent\n\t\t)\n\n\t\tconst cbTokens = cbTokenizer.tokenize()\n\n\t\tthis.#lexerData.push(cbTokens.lexer)\n\n\t\t// skip the lines that were parsed\n\t\tthis.#cursor = cbTokens.cursor\n\t}\n\n\t#runTableLexer() {\n\t\tconst tableTokenizer = new Table(\n\t\t\tthis.#lines,\n\t\t\tthis.#cursor,\n\t\t\tthis.#currLineIndent,\n\t\t\tthis.#linkRefs\n\t\t)\n\t\tconst tableTokens = tableTokenizer.tokenize()\n\n\t\tthis.#lexerData.push(tableTokens.lexer)\n\n\t\tthis.#cursor = tableTokens.cursor\n\t}\n\n\t#runHTMLLexer() {\n\t\tconst htmlTokenizer = new HTML(\n\t\t\tthis.#lines,\n\t\t\tthis.#cursor,\n\t\t\tthis.#currLineIndent,\n\t\t\tthis.#linkRefs\n\t\t)\n\t\tconst htmlTokens = htmlTokenizer.tokenize()\n\n\t\tthis.#lexerData.push(htmlTokens.lexer)\n\n\t\tthis.#cursor = htmlTokens.cursor\n\t}\n\n\t#runListLexer() {\n\t\tconst list = new List(\n\t\t\tthis.#lines,\n\t\t\tthis.#cursor,\n\t\t\tthis.#currLineIndent,\n\t\t\tthis.#fromToken\n\t\t)\n\t\tconst listTokens = list.tokenize()\n\n\n\t\tthis.#cursor = listTokens.cursor\n\n\t\t// case 1: if the last lexer is a list with same context,\n\t\t// then merge the list items into the last lexer items\n\t\tif (\n\t\t\tList.compareIfTwoListLexerAreOfSameType(this.#lastLexerItem, listTokens, this.#currLineIndent)\n\t\t) {\n\t\t\tthis.#lastLexerItem.items.push(listTokens.lexer)\n\t\t\tthis.#lastLexerItem.raw += `\\n${listTokens.lexer.raw}`\n\t\t\treturn\n\t\t}\n\n\t\t// case 2: if the last lexer is a newline and the lexer before that is a list with same context,\n\t\t// then merge the list items into the last lexer items\n\t\tconst lastLastLexerItem = this.#lexerData[this.#lexerData.length - 2] || false\n\n\t\tif (\n\t\t\tthis.#lastLexerItem &&\n\t\t\tthis.#lastLexerItem.type === TOKENS.NEW_LINE &&\n\t\t\tList.compareIfTwoListLexerAreOfSameType(lastLastLexerItem, listTokens, this.#currLineIndent)\n\t\t) {\n\t\t\t// remove last newline from the lexer content\n\t\t\tthis.#lexerData.pop()\n\t\t\t// add the list to the last lexer item\n\t\t\tconst lastLexerItem = this.#lexerData.at(-1)\n\t\t\t// lastLexerItem.items.push(newline)\n\t\t\tlastLexerItem.items.push(listTokens.lexer)\n\t\t\tlastLexerItem.raw += `\\n${listTokens.lexer.raw}`\n\t\t\treturn\n\t\t}\n\n\t\tthis.#lexerData.push({\n\t\t\ttype: TOKENS.LIST,\n\t\t\tindent: this.#currLineIndent,\n\t\t\tmeta: listTokens.meta,\n\t\t\titems: [listTokens.lexer],\n\t\t\traw: listTokens.lexer.raw\n\t\t})\n\t}\n\n\t#runQuoteLexer() {\n\t\tconst quoteTokenizer = new Quote(this.#lines, this.#cursor)\n\t\tconst quoteTokens = quoteTokenizer.tokenize()\n\t\tthis.#cursor = quoteTokens.cursor\n\n\t\tthis.#lexerData.push({\n\t\t\tindent: this.#currLineIndent,\n\t\t\t...quoteTokens.lexer\n\t\t})\n\t}\n\n\t#runHeadingLexer() {\n\t\tconst hTokenizer = new Heading(this.#currLine, this.#nextLine)\n\t\tconst hTokens = hTokenizer.tokenize()\n\n\t\tif (hTokens.setext) {\n\t\t\tthis.#cursor++\n\t\t}\n\n\t\tthis.#lexerData.push({\n\t\t\ttype: TOKENS.HEADING,\n\t\t\tindent: this.#currLineIndent,\n\t\t\t...hTokens,\n\t\t\ttokens: Paragraph.tokenize(hTokens.value, this.#linkRefs)\n\t\t})\n\t}\n\n\t#runCommentLexer() {\n\t\tthis.#lexerData.push({\n\t\t\ttype: TOKENS.COMMENT,\n\t\t\tindent: this.#currLineIndent,\n\t\t\t...Comment.tokenize(this.#currLine),\n\t\t\traw: this.#currLine\n\t\t})\n\t}\n\n\t#runImageLexer() {\n\t\tthis.#lexerData.push({\n\t\t\ttype: TOKENS.IMAGE,\n\t\t\tindent: this.#currLineIndent,\n\t\t\t...Image.tokenize(this.#currLine),\n\t\t\traw: this.#currLine\n\t\t})\n\t}\n\n\t#runParagraphLexer() {\n\t\tif (\n\t\t\tthis.#lastLexerItem &&\n\t\t\tthis.#lastLexerItem.type === TOKENS.PARAGRAPH &&\n\t\t\tthis.#currLineIndent >= this.#lastLexerItem.indent\n\t\t) {\n\t\t\t// if the last line has 2 or more spaces at the end,\n\t\t\t// then a line break is added to the last line\n\t\t\t// otherwise, the line is added to the last line\n\t\t\tif (this.#lastLexerItem.raw.endsWith(\"  \")) {\n\t\t\t\tthis.#lastLexerItem.value = this.#lastLexerItem.value.trimEnd() + \"<br>\"\n\t\t\t}\n\t\t\tthis.#lastLexerItem.raw += `\\n${this.#currLine}`\n\t\t\tthis.#lastLexerItem.value += ` ${this.#currLine}`\n\t\t\tthis.#lastLexerItem.tokens = Paragraph.tokenize(this.#lastLexerItem.value, this.#linkRefs)\n\t\t} else {\n\t\t\tthis.#lexerData.push({\n\t\t\t\ttype: TOKENS.PARAGRAPH,\n\t\t\t\tindent: this.#currLineIndent,\n\t\t\t\ttokens: Paragraph.tokenize(this.#currLine, this.#linkRefs),\n\t\t\t\traw: this.#currLine,\n\t\t\t\tvalue: this.#currLine\n\t\t\t})\n\t\t}\n\t}\n\n\t#checkForLinkRefs() {\n\t\tfor (this.#cursor = 0; this.#cursor < this.#lines.length; this.#cursor++) {\n\t\t\tconst line = this.#lines[this.#cursor]\n\t\t\tif (Utils.testRegex(line, REGEX.LINK_REF.DECLARATION)) {\n\t\t\t\tthis.#linkRefs.push(Utils.execRegex(line, REGEX.LINK_REF.DECLARATION).groups)\n\t\t\t\t// now remove the current line from the lines array\n\t\t\t\tthis.#lines.splice(this.#cursor, 1)\n\t\t\t\t// and decrement the cursor\n\t\t\t\tthis.#cursor--\n\t\t\t}\n\t\t}\n\t}\n\n\t#runPrep() {\n\t\tthis.#currLine = this.#lines[this.#cursor]\n\t\tthis.#nextLine = this.#lines[this.#cursor + 1]\n\t\tthis.#lexerLengthBefore = this.#lexerData.length\n\t\tthis.#lastLexerItem = this.#lexerData[this.#lexerLengthBefore - 1] || null\n\t\tthis.#currLineRawIndent = Indent.raw(this.#currLine)\n\t\tthis.#currLineIndent = Indent.calc(this.#currLineRawIndent)\n\t}\n\n\t#skipFrontMatter() {\n\t\tif (FrontMatter.test(this.#lines)) {\n\t\t\tthis.#frontMatter = new FrontMatter(this.#lines)\n\t\t\tthis.#lines = this.#frontMatter.removeFrontMatterFromGivenLines()\n\t\t\tthis.#cursor = 0\n\t\t}\n\t}\n\n\tgetFrontMatter() {\n\t\tif (FrontMatter.test(this.#lines)) {\n\t\t\tthis.#frontMatter = new FrontMatter(this.#lines)\n\t\t\treturn this.#frontMatter.getValue()\n\t\t} else {\n\t\t\treturn {}\n\t\t}\n\t}\n\n\trun() {\n\t\tthis.#skipFrontMatter()\n\t\tthis.#checkForLinkRefs()\n\n\t\tfor (this.#cursor = 0; this.#cursor < this.#lines.length; this.#cursor++) {\n\t\t\tthis.#runPrep()\n\t\t\tthis.#runCurrLineLexer()\n\t\t}\n\n\t\treturn this.#lexerData\n\t}\n}\n\nexport default Lexer\n","import Lexer from \"./lexer/index.js\"\nimport Parser from \"./parser/index.js\"\n\n\nclass HtmlMark {\n\tconfig = {}\n\n\tconstructor(config = {}) {\n\t\tthis.config.indent = config.indent || 4\n\t\tthis.config.highlightFn = config.highlightFn || null\n\t\tthis.config.useLinkRefs = config.useLinkRefs || false\n\t}\n\n\ttokenize(str) {\n\t\tif (typeof str !== \"string\") throw new Error(\"Input must be a string\")\n\t\tconst lexer = new Lexer(str.split(\"\\n\"), { config: this.config })\n\t\treturn lexer.run()\n\t}\n\n\tparse(str) {\n\t\tif (typeof str !== \"string\") throw new Error(\"Input must be a string\")\n\t\tconst lex = this.tokenize(str)\n\t\tconst parser = new Parser(lex, { config: this.config })\n\t\treturn parser.run()\n\t}\n\n\tgetFrontMatter(str) {\n\t\tif (typeof str !== \"string\") throw new Error(\"Input must be a string\")\n\t\tconst lexer = new Lexer(str.split(\"\\n\"))\n\t\treturn lexer.getFrontMatter()\n\t}\n}\n\nexport default HtmlMark\n"],"names":["Paragraph","Newline","Lexer"],"mappings":";;;;;;;;;;;;;;;;;CAAA,MAAM,KAAK,GAAG;CACd,CAAC,OAAO,EAAE,0CAA0C;CACpD,CAAC,KAAK,EAAE;CACR,EAAE,IAAI,EAAE,4BAA4B;CACpC,EAAE,KAAK,EAAE,cAAc;CACvB,EAAE,KAAK,EAAE,IAAI;CACb,EAAE,SAAS,EAAE,UAAU;CACvB,EAAE;CACF,CAAC,OAAO,EAAE,kCAAkC;CAC5C,CAAC,KAAK,EAAE,mCAAmC;CAC3C,CAAC,OAAO,EAAE;CACV,EAAE,IAAI,EAAE,mEAAmE;CAC3E,EAAE,WAAW,EAAE,UAAU;CACzB,EAAE,WAAW,EAAE,UAAU;CACzB,EAAE;CACF,CAAC,UAAU,EAAE,8BAA8B;CAC3C,CAAC,IAAI,EAAE;CACP,EAAE,QAAQ,EAAE,uDAAuD;CACnE,EAAE,SAAS,EAAE,mCAAmC;CAChD,EAAE,OAAO,EAAE,mCAAmC;CAC9C,EAAE,IAAI,EAAE,+EAA+E;CACvF,EAAE,KAAK,EAAE,oEAAoE;CAC7E,EAAE;CACF,CAAC,SAAS,EAAE;CACZ,EAAE,IAAI,EAAE,6DAA6D;CACrE,EAAE,QAAQ,EAAE,gCAAgC;CAC5C,EAAE,IAAI,EAAE,4EAA4E;CACpF;CACA,EAAE,aAAa,EAAE,mEAAmE;CACpF,EAAE,KAAK,EAAE,8FAA8F;CACvG,EAAE;CACF,CAAC,IAAI,EAAE,iEAAiE;CACxE,CAAC,QAAQ,EAAE;CACX,EAAE,WAAW,EAAE,0DAA0D;CACzE,EAAE,SAAS,EAAE,gEAAgE;CAC7E,EAAE,YAAY,EAAE,iCAAiC;CACjD,EAAE;CACF,CAAC,KAAK,EAAE;CACR,EAAE,GAAG,EAAE,iEAAiE;CACxE;CACA;CACA;CACA,EAAE,SAAS,EAAE,iDAAiD;CAC9D;CACA;CACA;CACA,EAAE,WAAW,EAAE,yDAAyD;CACxE;CACA;CACA;CACA,EAAE,UAAU,EAAE,qDAAqD;CACnE;CACA;CACA;CACA,EAAE,YAAY,EAAE,6DAA6D;CAC7E,EAAE,IAAI,EAAE,cAAc;CACtB,EAAE;CACF,CAAC,GAAG,EAAE;CACN,EAAE,EAAE,EAAE,qBAAqB;CAC3B,EAAE,EAAE,EAAE,qBAAqB;CAC3B,EAAE;CACF,CAAC,OAAO,EAAE,0BAA0B;CACpC,CAAC,YAAY,EAAE;CACf,EAAE,QAAQ,EAAE,WAAW;CACvB,EAAE,KAAK,EAAE,kCAAkC;CAC3C,EAAE;CACF,CAAC,MAAM,EAAE,OAAO;CAChB,CAAC,mBAAmB,EAAE,YAAY;CAClC,CAAC,aAAa,EAAE,SAAS;CACzB,CAAC,eAAe,EAAE,SAAS;CAC3B;;CCtEA;CACA;CACA;CACA,MAAM,KAAK,CAAC;CACZ;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE;CAC/B,EAAE,KAAK,CAAC,SAAS,GAAG,EAAC;CACrB,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;CAC3B,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE;CAC/B,EAAE,KAAK,CAAC,SAAS,GAAG,EAAC;CACrB,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;CACzB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE;CAChC,EAAE,IAAI,EAAC;CACP,EAAE,MAAM,OAAO,GAAG,GAAE;AACpB;CACA,EAAE,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE;CAC1C,GAAG,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,SAAS,EAAE;CACpC,IAAI,KAAK,CAAC,SAAS,GAAE;CACrB,IAAI;AACJ;CACA,GAAG,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAC;AACxC;CACA,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,UAAU,KAAK;CACpC,IAAI,IAAI,KAAK,IAAI,UAAU,KAAK,CAAC,EAAE;CACnC,KAAK,OAAO,CAAC,IAAI,CAAC;CAClB,MAAM,IAAI,EAAE,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC;CACnC,MAAM,KAAK,EAAE,KAAK;CAClB,MAAM,EAAC;CACP,KAAK;CACL,IAAI,EAAC;CACL,GAAG;CACH,EAAE,OAAO,OAAO;CAChB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE;CAC5B,EAAE,MAAM,OAAO,GAAG,GAAE;CACpB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,KAAK;CACjC,GAAG,IAAI,KAAK,KAAK,CAAC,EAAE;CACpB,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,EAAC;CACtB,IAAI,MAAM;CACV,IAAI,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAC;CAC5C,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE;CACjC,KAAK,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAK;CAC7B,KAAK,MAAM;CACX,KAAK,OAAO,CAAC,IAAI,CAAC,IAAI,EAAC;CACvB,KAAK;CACL,IAAI;CACJ,GAAG,EAAC;CACJ,EAAE,OAAO,OAAO;CAChB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE;CAC7B,EAAE,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAC;AAC/C;CACA,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;CACvC,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE;CACrD,EAAE,IAAI,KAAK,GAAG,EAAC;CACf,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;CACxC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;CAC9B,IAAI,KAAK,GAAE;CACX,IAAI,IAAI,KAAK,KAAK,QAAQ,EAAE;CAC5B,KAAK,OAAO,CAAC;CACb,KAAK;CACL,IAAI;CACJ,GAAG;CACH,EAAE,OAAO,CAAC,CAAC;CACX,EAAE;CACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,eAAe,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE;CAC3C,EAAE,IAAI,WAAW,GAAG,EAAC;CACrB,EAAE,KAAK,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;CACxC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;CACxB,IAAI,WAAW,GAAE;CACjB,IAAI,MAAM;CACV,IAAI,KAAK;CACT,IAAI;CACJ,GAAG;CACH,EAAE,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;CACjC,EAAE;CACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE;CACtC,EAAE,MAAM,KAAK,GAAG,UAAU,CAAC,OAAM;CACjC,EAAE,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,EAAC;AAC7B;CACA,EAAE,MAAM,UAAU,GAAG,IAAI,MAAM,CAAC,WAAW;CAC3C,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;CACb,GAAG,MAAM;CACT,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;CACb,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;CACf,GAAG,OAAO;CACV,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;CACb,GAAG,GAAG,EAAC;AACP;CACA,EAAE,OAAO,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;CAC/B,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE;CACtC,EAAE,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,EAAC;CAC7B,EAAE,MAAM,KAAK,GAAG,UAAU,CAAC,OAAM;AACjC;CACA,EAAE,MAAM,KAAK,GAAG,IAAI,MAAM;CAC1B,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC;CACxB,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;CACf,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;CACf,IAAG;CACH,EAAE,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;CAC1B,EAAE;CACF;;CC1LA,MAAM,GAAG,CAAC;CACV,CAAC,OAAO,OAAO,CAAC,GAAG,EAAE;CACrB,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,GAAG;CACtB,EAAE,OAAO,GAAG;CACZ,IAAI,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC;CAC5B,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC;CACpC,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC;CACpC,IAAI,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC;CAC9B,IAAI,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC;CAC5B,EAAE;AACF;CACA,CAAC,OAAO,UAAU,CAAC,GAAG,EAAE;CACxB,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,GAAG;CACtB,EAAE,OAAO,GAAG;CACZ,IAAI,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC;CAC5B,IAAI,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC;CAC3B,IAAI,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC;CAC3B,IAAI,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC;CAC9B,IAAI,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC;CAC5B,EAAE;AACF;CACA,CAAC,OAAO,MAAM,CAAC,GAAG,EAAE;CACpB,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,GAAG;CACtB,EAAE,OAAO,GAAG;CACZ,IAAI,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC;CAC5B,IAAI,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC;CAC3B,IAAI,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC;CAC3B,IAAI,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;CAC9B,IAAI,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC;CAC5B,EAAE;AACF;CACA,CAAC,OAAO,QAAQ,CAAC,GAAG,EAAE;CACtB,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,GAAG;CACtB,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE;CAC3C,GAAG,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAC;CAC5C,GAAG;CACH,EAAE,OAAO,GAAG;CACZ,EAAE;CACF;;CC1CA,MAAM,MAAM,GAAG;CACf,CAAC,QAAQ,EAAE,UAAU;CACrB,CAAC,SAAS,EAAE,WAAW;CACvB,CAAC,UAAU,EAAE,YAAY;CACzB,CAAC,OAAO,EAAE,SAAS;CACnB,CAAC,KAAK,EAAE,OAAO;CACf,CAAC,KAAK,EAAE,OAAO;CACf,CAAC,IAAI,EAAE,MAAM;CACb,CAAC,MAAM,EAAE,QAAQ;CACjB,CAAC,SAAS,EAAE,WAAW;CACvB,CAAC,cAAc,EAAE,gBAAgB;CACjC,CAAC,IAAI,EAAE,MAAM;CACb,CAAC,IAAI,EAAE,MAAM;CACb,CAAC,IAAI,EAAE,MAAM;CACb,CAAC,SAAS,EAAE,WAAW;CACvB,CAAC,UAAU,EAAE,YAAY;CACzB,CAAC,UAAU,EAAE,YAAY;CACzB,CAAC,OAAO,EAAE,SAAS;CACnB,CAAC,IAAI,EAAE,MAAM;CACb,CAAC,OAAO,EAAE,SAAS;CACnB,CAAC,KAAK,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW;CAC5C,CAAC,YAAY,EAAE,SAAS;CACxB,CAAC,eAAe,EAAE,OAAO;CACzB,CAAC,KAAK,EAAE,OAAO;CACf,CAAC,IAAI,EAAE,MAAM;CACb,CAAC,YAAY,EAAE,cAAc;CAC7B;;CC1BA;CACA;CACA;CACA;CACA;CACA;CACA,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE;CAC3C,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;CAC9B,EAAC;AACD;CACA,MAAM,WAAW,GAAG,EAAC;AACrB;AACA;CACA;CACA;CACA;CACA,MAAM,MAAM,CAAC;CACb;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,GAAG,CAAC,IAAI,EAAE;CAClB,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC;CACpD,EAAE,IAAI,KAAK,GAAG,EAAC;CACf,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE;CACtD,GAAG,KAAK,GAAE;CACV,GAAG;CACH,EAAE,OAAO,KAAK;CACd,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,SAAS,EAAE;CACxB,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,WAAW,CAAC,GAAG,WAAW;CAC1D,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,GAAG,CAAC,IAAI,EAAE;CAClB,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;CAClC,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE;CAC9B,EAAE,OAAO,IAAI,CAAC,OAAO;CACrB,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW;CACpD,GAAG,MAAM,CAAC,WAAW;CACrB,GAAG;CACH,EAAE;CACF;;CCjEA;CACA;CACA;CACA,MAAM,KAAK,CAAC;CACZ,CAAC,MAAM;CACP,CAAC,MAAM;CACP,CAAC,OAAO;CACR,CAAC,OAAO;CACR,CAAC,UAAU;CACX,CAAC,KAAK,GAAG,EAAE;CACX,CAAC,IAAI;CACL,CAAC,SAAS;CACV,CAAC,YAAY;AACb;CACA,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,KAAK;AAChC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE;CACvB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;CAC/C,MAAM;CACN,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;CAChD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC;CACjD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC;CAClD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC;CACnD,IAAI;CACJ,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,aAAa,CAAC,IAAI,EAAE;CAC5B,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM;CACpD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE;CACtC,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,MAAM;CACpC;CACA,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;CAChD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC;CACjD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC;CAClD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC;CACnD,IAAI;CACJ,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,KAAK;CACtC,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE;CACpC,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,MAAM;CACpC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;CACvB,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,KAAK;CACtC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC;CACvC,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,aAAa,CAAC,GAAG,EAAE,QAAQ,EAAE;CACrC,EAAE,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC;CAC7C,EAAE,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAC;AACtD;CACA,EAAE,MAAM,KAAK,GAAG,GAAE;AAClB;CACA,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI;CAC3B,GAAG,IAAI,IAAI,KAAK,GAAG,EAAE,MAAM;CAC3B,GAAG,KAAK,CAAC,IAAI,CAAC;CACd,IAAI,GAAG,EAAE,IAAI;CACb,IAAI,MAAM,EAAEA,WAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC;CACrD,IAAI,EAAC;CACL,GAAG,EAAC;AACJ;CACA,EAAE,OAAO,KAAK;CACd,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;CACxC,EAAE,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,EAAC;AACnC;CACA,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,OAAO,KAAK;AAChD;CACA,EAAE,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAC;CACnD,EAAE,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAC;CAClC,EAAE,IAAI,YAAY,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAC;AACtC;CACA,EAAE,IAAI,QAAQ,KAAK,SAAS,EAAE;CAC9B,GAAG,QAAQ,GAAG,QAAQ,CAAC,OAAO,GAAE;CAChC,GAAG,YAAY,GAAG,YAAY,EAAE,OAAO,GAAE;AACzC;CACA,GAAG;CACH,IAAI;CACJ,KAAK,YAAY;CACjB,QAAQ,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC;CACnD,QAAQ,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,EAAE,MAAM,CAAC;CACrD;CACA,OAAO,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC;CAChD,KAAK;CACL,IAAI,OAAO,IAAI;CACf,IAAI;CACJ,GAAG;CACH,EAAE,OAAO,KAAK;CACd,EAAE;AACF;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ;CACA;CACA;CACA;AACA;CACA,EAAE,IAAI,CAAC,OAAO,IAAI,EAAC;CACnB,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE;CAChF,GAAG,IAAI,CAAC,OAAO,IAAI,EAAC;CACpB,GAAG,IAAI,CAAC,YAAY,GAAG,KAAI;CAC3B,GAAG;AACH;CACA,EAAE;CACF,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,SAAS;CAC1C,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC;CACzE,IAAI;CACJ,GAAG,IAAI,CAAC,OAAO,GAAE;CACjB,GAAG;CACH,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,aAAY;CAC9C,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE;CAC9C,EAAE,IAAI,CAAC,MAAM,GAAG,MAAK;CACrB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,MAAM,GAAG,OAAM;CACtB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,SAAS,GAAG,SAAQ;CAC3B,EAAE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC;CAClE,EAAE,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,GAAE;CACpE,EAAE,IAAI,CAAC,YAAY,GAAG,MAAK;CAC3B,EAAE;AACF;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAC;AAC9C;CACA,EAAE,IAAI,IAAI,CAAC,YAAY,EAAE;CACzB,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC;CACjD,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;CACjD,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,EAAC;CAC7E,GAAG,MAAM;CACT,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAC;CAC5D,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA,CAAC,eAAe,GAAG;CACnB,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,IAAI;CAC5B,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC;CAChE,GAAG,EAAC;CACJ,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,CAAC,QAAQ,GAAE;AACjB;CACA,EAAE,IAAI,CAAC,QAAQ,GAAE;AACjB;CACA,EAAE,IAAI,CAAC,eAAe,GAAE;AACxB;CACA,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;CACvD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE;CACrB,EAAE,IAAI,YAAY,EAAE,MAAK;CACzB,EAAE,IAAI,KAAK,CAAC,WAAW,EAAE;CACzB,GAAG,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,EAAC;CACjC,GAAG,YAAY,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAIA,WAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,EAAC;CACvF,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAC;CAC9B,GAAG,MAAM;CACT,GAAG,KAAK,GAAG,KAAK,CAAC,KAAI;CACrB,GAAG;CACH,EAAE,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,IAAIA,WAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC;CAC9H,EAAE,OAAO,CAAC,OAAO,EAAE,YAAY,GAAG,CAAC;AACnC,IAAI,EAAE,YAAY,CAAC;AACnB,eAAe,CAAC,GAAG,EAAE,CAAC;AACtB;AACA,IAAI,EAAE,SAAS,CAAC;AAChB;AACA,QAAQ,CAAC;CACT,EAAE;CACF;;CCtPA,MAAM,KAAK,CAAC;CACZ,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,KAAK;AAChC;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE;CACvB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC;CAC3C,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,IAAI,EAAE;CACpB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC;CAClD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE;CACvB,EAAE,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM;CACjC,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE;CACrB,EAAE,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;CACnE,EAAE;CACF;;CCpCA,MAAM,OAAO,CAAC;CACd,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,OAAO;AAClC;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE;CACvB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC;CAC7C,EAAE;CACF;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,IAAI,EAAE;CACpB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC;CACpD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE;CACvB,EAAE,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM;CACnC,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE;CACrB,EAAE,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;CACjC,EAAE;CACF;;CCtCA;CACA;CACA;CACA,MAAM,MAAM,CAAC;CACb,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,OAAO;AAClC;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE;CACvB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC;CAC7C,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,GAAG;CAChB,EAAE,OAAO,MAAM;CACf,EAAE;CACF;;CCpBA,MAAM,SAAS,CAAC;CAChB,CAAC,MAAM;CACP,CAAC,MAAM;CACP,CAAC,OAAO;CACR,CAAC,OAAO;CACR,CAAC,UAAU;CACX,CAAC,WAAW;CACZ,CAAC,KAAK;CACN,CAAC,KAAK;CACN,CAAC,IAAI;CACL,CAAC,SAAS,GAAG,KAAK;AAClB;CACA,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,UAAU;AACrC;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE;CACrD,EAAE;CACF,GAAG,CAAC,SAAS;CACb,GAAG,MAAM,IAAI,CAAC;CACd,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,CAAC,QAAQ,CAAC;CACrD,IAAI;CACJ,GAAG,OAAO,IAAI;CACd,GAAG;AACH;CACA;CACA;CACA,EAAE;CACF,GAAG,SAAS,KAAK,MAAM,CAAC,SAAS,IAAI,MAAM,IAAI,CAAC;CAChD,IAAI,CAAC,SAAS,IAAI,SAAS,EAAE,IAAI,KAAK,MAAM,CAAC,QAAQ,CAAC;CACtD,IAAI;CACJ,GAAG,OAAO,IAAI;CACd,GAAG;AACH;AACA;CACA;CACA;AACA;CACA,EAAE;CACF,GAAG,SAAS,KAAK,MAAM,CAAC,KAAK,IAAI,MAAM,IAAI,CAAC;CAC5C,IAAI,CAAC,SAAS,IAAI,SAAS,EAAE,IAAI,KAAK,MAAM,CAAC,QAAQ,CAAC;CACtD,IAAI;CACJ,GAAG,OAAO,IAAI;CACd,GAAG;AACH;CACA,EAAE,OAAO,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;CAClC,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,SAAS,CAAC,IAAI,EAAE;CACxB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,UAAU,CAAC;CAC1D,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,UAAU,CAAC,IAAI,EAAE;CACzB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,UAAU,CAAC;CAC1D,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE;CAC/C,EAAE,IAAI,CAAC,MAAM,GAAG,MAAK;CACrB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,MAAM,GAAG,OAAM;CACtB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,UAAU,GAAG,UAAS;CAC7B,EAAE,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAC;CACvD,EAAE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,IAAI,KAAI;CACxE,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,QAAQ,EAAE,cAAc,EAAE,aAAa,EAAE,qBAAoB;AACnE;CACA,EAAE,GAAG;CACL,GAAG,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,OAAO,EAAC;CACzC,GAAG,IAAI,QAAQ,KAAK,EAAE,EAAE;CACxB,IAAI,QAAQ;CACZ,IAAI;CACJ,GAAG,cAAc,GAAG,CAAC,QAAQ,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,KAAI;AAC5D;CACA,GAAG,IAAI,QAAQ,KAAK,SAAS,EAAE;CAC/B,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;CAC1B,KAAK,aAAa,GAAG,QAAQ,CAAC,IAAI,EAAE,KAAK,MAAK;CAC9C,KAAK;CACL,MAAM,aAAa;CACnB,MAAM,cAAc,KAAK,IAAI,CAAC,OAAO;CACrC,OAAO;CACP,MAAM,oBAAoB,GAAG,KAAI;CACjC,MAAM;CACN,KAAK;CACL,IAAI;AACJ;CACA,GAAG,IAAI,CAAC,oBAAoB,EAAE;CAC9B,IAAI,IAAI,cAAc,GAAG,IAAI,CAAC,OAAO,EAAE;CACvC,KAAK,oBAAoB,GAAG,KAAI;CAChC,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,GAAG,KAAI;CAChD,KAAK;CACL,IAAI;AACJ;CACA,GAAG;CACH,GAAG,QAAQ,KAAK,SAAS;CACzB,GAAG,CAAC,oBAAoB;CACxB,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,OAAM;AAClE;CACA,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;CACrD,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACxE,IAAI,IAAI,CAAC,IAAI,EAAC;CACd,EAAE;AACF;CACA;CACA;CACA;CACA,CAAC,OAAO,GAAG;CACX,EAAE,IAAI,OAAM;CACZ,EAAE,IAAI,IAAI,CAAC,WAAW,EAAE;CACxB,GAAG,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,EAAC;CAC5B,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,MAAM,GAAG,IAAI,CAAC,QAAO;CAC5C,GAAG,MAAM,MAAM,GAAG,IAAI,CAAC,QAAO;CAC9B,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAC;CAC/D,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,CAAC,QAAQ,GAAE;AACjB;CACA,EAAE,IAAI,CAAC,QAAQ,GAAE;AACjB;CACA,EAAE,IAAI,CAAC,OAAO,GAAE;AAChB;CACA,EAAE,OAAO;CACT,GAAG,MAAM,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC;CAC3B,GAAG,KAAK,EAAE;CACV,IAAI,IAAI,EAAE,MAAM,CAAC,UAAU;CAC3B,IAAI,MAAM,EAAE,IAAI,CAAC,OAAO;CACxB,IAAI,QAAQ,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI;CAChC,IAAI,KAAK,EAAE,IAAI,CAAC,KAAK;CACrB,IAAI,GAAG,EAAE,IAAI,CAAC,IAAI;CAClB,IAAI;CACJ,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE,WAAW,GAAG,IAAI,EAAE;CACzC,EAAE,IAAI,QAAQ,GAAG,mCAAkC;CACnD,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE;CACtB,GAAG,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAC;CAC/E,GAAG,MAAM;CACT,GAAG,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,EAAC;CAC5C,GAAG;CACH,EAAE,IAAI,WAAW,EAAE;CACnB,GAAG,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAC;CACnE,GAAG,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;CAC5C,IAAI,KAAK,CAAC,KAAK,GAAG,gBAAe;CACjC,IAAI,MAAM;CACV,IAAI,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAC;CACrD,IAAI,OAAO,CAAC,IAAI,CAAC,0BAA0B,EAAC;CAC5C,IAAI;CACJ,GAAG,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAC;CACjD,GAAG,MAAM;CACT,GAAG,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,EAAC;CACjE,GAAG;CACH,EAAE,OAAO,QAAQ;CACjB,EAAE;CACF;;CC5NA,MAAM,MAAM,CAAC;CACb,CAAC,OAAO;CACR,CAAC,OAAO;CACR,CAAC,OAAO;CACR,CAAC,UAAU;CACX,CAAC,aAAa;CACd,CAAC,cAAc;CACf,CAAC,gBAAgB,GAAG,EAAE;AACtB;CACA,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,IAAI,GAAG,IAAI,EAAE,MAAM,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE;CACxD,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,cAAc,GAAG,GAAE;CAC1B,EAAE,IAAI,CAAC,UAAU,GAAG,KAAI;CACxB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,gBAAgB,GAAG,GAAE;AAC5B;CACA,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAC;CAC3E,EAAE;AACF;CACA,CAAC,eAAe,GAAG;CACnB,EAAE,IAAI,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAC;CAC1D,EAAE,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,CAAC,IAAI,EAAE;CACvC,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAC;CACxC,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,EAAC;CACrD,EAAE;AACF;AACA;CACA,CAAC,kBAAkB,GAAG;CACtB,EAAE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;CAChC,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE;CAC9D,IAAI,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;CACxD,KAAK,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAE;CACrD,KAAK,MAAM;CACX,KAAK;AACL;CACA,IAAI;CACJ,KAAK,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,MAAM,CAAC,UAAU;CAClD,KAAK,IAAI,CAAC,OAAO,CAAC,WAAW;CAC7B,KAAK,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,KAAK,UAAU;CACnD,MAAM;CACN,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC;CAClG,KAAK,MAAM;CACX,KAAK;AACL;CACA,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,EAAC;CACvE,IAAI,MAAM;CACV,IAAI;CACJ,GAAG;CACH,EAAE;AACF;CACA,CAAC,GAAG,GAAG;CACP,EAAE,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE;CACzE,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAC;CAClD,GAAG,IAAI,CAAC,kBAAkB,GAAE;CAC5B,GAAG;AACH;CACA;CACA,EAAE,OAAO,IAAI,CAAC,cAAc;CAC5B,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;CAC1C,IAAI,IAAI,CAAC,EAAE,CAAC;CACZ,EAAE;CACF;;CC1DA,MAAM,KAAK,CAAC;CACZ,CAAC,MAAM;CACP,CAAC,MAAM;CACP,CAAC,OAAO;CACR,CAAC,KAAK,GAAG,EAAE;CACX,CAAC,MAAM,GAAG,EAAE;CACZ,CAAC,OAAO;CACR;CACA,CAAC,YAAY,GAAG;CAChB;CACA;CACA,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI;CACpB,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;CACjB,EAAE,KAAK,CAAC,UAAU;CAClB,EAAE;AACF;CACA,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,KAAK;AAChC;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE;CACvB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;CAChD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,SAAS,CAAC,IAAI,EAAE;CACxB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;CACjD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE;CACvB,EAAE,IAAI,GAAG,IAAI,CAAC,SAAS,GAAE;CACzB,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,OAAO,CAAC;CAC/B,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM;CAC/E,EAAE,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,EAAC;CACzE,EAAE,OAAO,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM;CAClD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE;CAC9B,EAAE,IAAI,GAAG,IAAI,CAAC,SAAS,GAAE;CACzB,EAAE,MAAM,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAC;CAC/C;CACA,EAAE,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;CACnC,EAAE;AACF;CACA,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE;CAC5B,EAAE,IAAI,CAAC,MAAM,GAAG,MAAK;CACrB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,MAAM,GAAG,OAAM;CACtB,EAAE;AACF;CACA,CAAC,YAAY,GAAG;CAChB,EAAE,IAAI,CAAC,OAAO,GAAE;AAChB;CACA,EAAE,IAAI,SAAQ;CACd;CACA,EAAE,IAAI,OAAO,GAAG,MAAK;CACrB,EAAE,GAAG;CACL,GAAG,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,OAAO,EAAC;CACzC,GAAG,IAAI,QAAQ,KAAK,SAAS,EAAE;CAC/B,IAAI,IAAIC,SAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE;CAC1C,KAAK,OAAO,GAAG,KAAI;CACnB,KAAK;CACL,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;CACnD,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;CAC1D,MAAM,OAAO,GAAG,KAAI;CACpB,MAAM,KAAK;CACX,MAAM;CACN,KAAK;CACL,IAAI;CACJ,GAAG,QAAQ,QAAQ,KAAK,SAAS,IAAI,CAAC,OAAO,CAAC;AAC9C;AACA;CACA,EAAE,IAAI,CAAC,OAAO,GAAE;CAChB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAC;CAC1C,EAAE,IAAI,cAAa;AACnB;CACA,EAAE,GAAG;CACL,GAAG,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,OAAO,EAAC;CACzC,GAAG,IAAI,QAAQ,KAAK,SAAS,EAAE;CAC/B,IAAI,aAAa,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,EAAC;CACnD,IAAI,MAAM,aAAa,GAAG,MAAK;CAC/B,GAAG;CACH,GAAG,aAAa;CAChB;CACA,GAAG;AACH;CACA;CACA;CACA;CACA;CACA,EAAE,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,EAAC;CACvD,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE;CACxC,GAAG,IAAI,CAAC,OAAO,GAAE;CACjB,GAAG,MAAM;CACT,GAAG;AACH;CACA,EAAE,IAAI,CAAC,YAAY,GAAE;CACrB,EAAE;AACF;CACA;CACA;CACA;CACA,CAAC,gBAAgB,GAAG;CACpB,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK;CAC/B,GAAG,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAC;CACzC,GAAG,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;CACnC,IAAI,IAAI,CAAC,OAAO,GAAG,UAAS;CAC5B,IAAI,MAAM,IAAI,SAAS,KAAK,CAAC,EAAE;CAC/B,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAC;CACpD,IAAI;CACJ,GAAG,EAAC;CACJ,EAAE;AACF;AACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC,EAAC;CAC/D,EAAE;AACF;CACA;CACA;CACA;CACA;CACA,CAAC,SAAS,GAAG;CACb,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK;CAC/B,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;CAC5D,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAC;CAClE,IAAI,MAAM;CACV;CACA,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC;CACpC,IAAI;CACJ,GAAG,EAAC;CACJ,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,CAAC,QAAQ,GAAE;AACjB;CACA,EAAE,IAAI,CAAC,QAAQ,GAAE;AACjB;CACA,EAAE,IAAI,CAAC,gBAAgB,GAAE;AACzB;CACA,EAAE,IAAI,CAAC,SAAS,GAAE;AAClB;CACA,EAAE,MAAM,GAAG,GAAG,IAAIC,OAAK,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,EAAC;AAC5D;CACA,EAAE,OAAO;CACT,GAAG,MAAM,EAAE,IAAI,CAAC,OAAO;CACvB,GAAG,KAAK,EAAE;CACV,IAAI,IAAI,EAAE,MAAM,CAAC,KAAK;CACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE;CACrB,IAAI,KAAK,EAAE,IAAI,CAAC,OAAO;CACvB,IAAI,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;CAC9B,IAAI;CACJ,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE;CACpC,EAAE,IAAI,KAAK,GAAG,KAAI;CAClB,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;CAC9B,GAAG,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;AAChC,eAAe,CAAC,EAAC;CACjB,GAAG;CACH,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;CAC1C,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE;CACrB,EAAE,MAAM,MAAM,GAAG,GAAE;CACnB,EAAE,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,IAAI;CAClC,GAAG,IAAI,WAAU;CACjB,GAAG,UAAU,GAAG,IAAI,MAAM,CAAC,CAAC,OAAO,CAAC,EAAC;CACrC,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,EAAC;CAChC,GAAG,EAAC;CACJ,EAAE,OAAO,KAAK,CAAC,WAAW;CAC1B,GAAG,KAAK,CAAC,KAAK;CACd,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;CAClB,GAAG;CACH,EAAE;CACF;;CC7OA;CACA;CACA;CACA,MAAM,OAAO,CAAC;CACd,CAAC,KAAK;CACN,CAAC,SAAS;CACV,CAAC,MAAM;CACP,CAAC,MAAM;CACP,CAAC,OAAO,GAAG,KAAK;AAChB;CACA,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,OAAO;AAClC;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,SAAS,CAAC,IAAI,EAAE;CACxB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;CAClD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,oBAAoB,CAAC,IAAI,EAAE;CACnC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;CACzD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,oBAAoB,CAAC,IAAI,EAAE;CACnC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;CACzD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,IAAI,EAAE;CACpB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;CAClD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;CACjC,EAAE,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI;CAC1C,EAAE,IAAI,QAAQ,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE;CACxD,GAAG;CACH,IAAI,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC;CAC1C,IAAI,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC;CAC1C,KAAK;CACL,IAAI,OAAO,IAAI;CACf,IAAI;CACJ,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;CAC7B,EAAE,IAAI,CAAC,KAAK,GAAG,KAAI;CACnB,EAAE,IAAI,CAAC,SAAS,GAAG,SAAQ;CAC3B,EAAE,IAAI,CAAC,SAAS,GAAE;CAClB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,SAAS,GAAG;CACb,EAAE,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;CACpC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;CACvC,IAAI,IAAI,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;CACtD,KAAK,IAAI,CAAC,OAAO,GAAG,KAAI;CACxB,KAAK,IAAI,CAAC,MAAM,GAAG,EAAC;CACpB,KAAK;CACL,SAAS,IAAI,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;CAC3D,KAAK,IAAI,CAAC,OAAO,GAAG,KAAI;CACxB,KAAK,IAAI,CAAC,MAAM,GAAG,EAAC;CACpB,KAAK;CACL,IAAI;CACJ,GAAG;CACH,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;CACrB,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,OAAM;CAClD,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAG;CAC9D,GAAG,OAAO,IAAI,CAAC,MAAM,CAAC,SAAQ;CAC9B,GAAG,OAAO,IAAI,CAAC,MAAM,CAAC,IAAG;CACzB,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;CACrB,GAAG,OAAO;CACV,IAAI,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM;CACnC,IAAI,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;CACtC,IAAI,GAAG,EAAE,IAAI,CAAC,KAAK;CACnB,IAAI,MAAM,EAAE,KAAK;CACjB,IAAI;CACJ,GAAG,MAAM;CACT,GAAG,OAAO;CACV,IAAI,KAAK,EAAE,IAAI,CAAC,MAAM;CACtB,IAAI,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;CAC/B,IAAI,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;CAC3C,IAAI,MAAM,EAAE,IAAI;CAChB,IAAI;CACJ,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE;CACrB,EAAE,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAEF,WAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;CACvE,EAAE;CACF;;CCtJA;CACA;CACA;CACA,MAAM,IAAI,CAAC;CACX,CAAC,MAAM;CACP,CAAC,OAAO;CACR,CAAC,OAAO;CACR,CAAC,KAAK,GAAG,EAAE;CACX,CAAC,IAAI;CACL,CAAC,WAAW,GAAG,EAAE;CACjB,CAAC,IAAI;CACL,CAAC,MAAM;CACP,CAAC,QAAQ;CACT,CAAC,KAAK,GAAG;CACT,EAAE,SAAS,EAAE,KAAK;CAClB,EAAE,OAAO,EAAE,KAAK;CAChB,EAAE,UAAU,EAAE,IAAI;CAClB,EAAE;AACF;CACA,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,IAAI;AAC/B;CACA,CAAC,OAAO,SAAS,CAAC,IAAI,EAAE;CACxB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;CAChD,EAAE;AACF;CACA,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE;CACvB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;CAC/C,EAAE;AACF;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE;CACvB,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,IAAI,EAAE;CAC3C,EAAE,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;CAC5B,EAAE;AACF;AACA;CACA,CAAC,OAAO,UAAU,CAAC,IAAI,EAAE;CACzB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;CAChD,EAAE;AACF;CACA,CAAC,OAAO,SAAS,CAAC,IAAI,EAAE;CACxB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;CAC/C,EAAE;AACF;CACA,CAAC,OAAO,KAAK,CAAC,IAAI,EAAE,OAAO,GAAG,KAAK,EAAE;CACrC,EAAE,IAAI,OAAO,EAAE;CACf,GAAG,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CAC/B,GAAG;CACH,EAAE,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;CAC7B,EAAE;AACF;CACA,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE;CACpC,EAAE,IAAI,CAAC,MAAM,GAAG,MAAK;CACrB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAC;CAC/C,EAAE,IAAI,CAAC,YAAY,GAAE;AACrB;CACA,EAAE;AACF;CACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE;CACrB,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,GAAG,EAAC;CAC/B,GAAG,MAAM;CACT,GAAG;AACH;CACA,EAAE,IAAI,MAAM,GAAG,IAAI,CAAC,QAAO;CAC3B,EAAE,IAAI,QAAQ,EAAE,cAAc,EAAE,aAAY;CAC5C,EAAE,IAAI,UAAU,GAAG,MAAK;AACxB;AACA;CACA,EAAE,GAAG;CACL,GAAG,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,EAAC;AACnC;CACA,GAAG,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAC;CACxC;CACA;CACA,GAAG,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAC;CACzC,GAAG;CACH,IAAIC,SAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;CACpC,KAAK;CACL,IAAI;CACJ,KAAK,YAAY;CACjB,KAAKA,SAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;CACzC,MAAM;CACN,KAAK,UAAU,GAAG,KAAI;CACtB,KAAK,MAAM;CACX,KAAK,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,OAAO;CAC7C,MAAM;CACN,KAAK,UAAU,GAAG,KAAI;CACtB,KAAK;CACL,IAAI;CACJ,GAAG;CACH,GAAG,QAAQ,KAAK,SAAS;CACzB,GAAG,CAAC,UAAU;CACd,GAAG;CACH,IAAI;CACJ,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;CAClC,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;CAC7D,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;CACnC;CACA,IAAI,cAAc,IAAI,IAAI,CAAC,OAAO;CAClC,IAAI;CACJ,GAAG;CACH,EAAE,IAAI,CAAC,IAAI,GAAG,OAAM;CACpB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,YAAY,GAAG;CAChB,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAM;AAC3E;CACA,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,UAAS;AACxD;CACA,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAK;AAC1C;CACA,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,KAAI;CAChE,EAAE;AACF;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAC;CACzD,EAAE;AACF;CACA;CACA;CACA;CACA,CAAC,WAAW,GAAG;CACf,EAAE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;CAC1D,GAAG,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;CACjC,GAAG,IAAI,KAAK,KAAK,CAAC,EAAE;CACpB,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;CACvB,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAC;CAC9B,KAAK,MAAM;CACX,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAC;CAC7C,KAAK;CACL,IAAI,MAAM;CACV,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAC;CAC/B,IAAI;CACJ,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,CAAC,QAAQ,GAAE;AACjB;CACA,EAAE,IAAI,CAAC,QAAQ,GAAE;AACjB;CACA,EAAE,IAAI,CAAC,WAAW,GAAE;AACpB;CACA,EAAE,IAAI,CAAC,IAAI,GAAG,IAAIC,OAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,SAAS,EAAE,EAAC;AACrE;CACA,EAAE,OAAO;CACT,GAAG,MAAM,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC;CACxB,GAAG,IAAI,EAAE,IAAI,CAAC,KAAK;CACnB,GAAG,KAAK,EAAE;CACV,IAAI,IAAI,EAAE,MAAM,CAAC,SAAS;CAC1B,IAAI,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;CAC3B,IAAI,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI;CACpC,IAAI,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,GAAG,GAAG,IAAI;CACtE,IAAI,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;CAC9B,IAAI;CACJ,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE;CACrB,EAAE,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,GAAG,KAAI;CACpD,EAAE,IAAI,YAAY,GAAG,GAAE;CACvB,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,IAAI;CAClC,GAAG,IAAI,YAAY,GAAG,cAAa;CACnC,GAAG,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,EAAC;CACrE,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE;CAC7B,IAAI,MAAM,SAAS,GAAG,CAAC,QAAQ,CAAC,OAAO,IAAI,UAAU,GAAG,GAAE;CAC1D,IAAI,YAAY,GAAG,YAAY,EAAE,OAAO;CACxC,KAAK,IAAI;CACT,KAAK,wBAAwB;CAC7B,MAAM,SAAS;CACf,MAAM,GAAG;CACT,MAAM,OAAO,CAAC,GAAG,EAAE;CACnB,MAAK;CACL,IAAI,MAAM;CACV,IAAI,YAAY,GAAG,YAAY,CAAC,OAAO;CACvC,KAAK,IAAI;CACT,KAAK,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE;CAC7D,MAAK;CACL,IAAI;CACJ,GAAG,YAAY,CAAC,IAAI,CAAC,YAAY,EAAC;CAClC,GAAG,EAAC;CACJ,EAAE,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;CAC5D,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,kCAAkC,CAAC,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE;CAC9E,EAAE;CACF,GAAG,SAAS;CACZ,GAAG,SAAS,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI;CACjC,GAAG,SAAS,CAAC,MAAM,KAAK,MAAM;CAC9B,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,KAAK,cAAc,CAAC,IAAI,CAAC,SAAS;CAC7D,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,KAAK,cAAc,CAAC,IAAI,CAAC,OAAO;CACzD,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,KAAK,cAAc,CAAC,IAAI,CAAC,UAAU;CAC/D,GAAG;CACH,EAAE;CACF;;CClPA;CACA;CACA;CACA,MAAM,IAAI,CAAC;CACX,CAAC,SAAS;CACV,CAAC,MAAM;CACP,CAAC,OAAO;CACR,CAAC,OAAO;CACR,CAAC,IAAI;AACL;CACA,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,IAAI;AAC/B;CACA,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE;CAC9C,EAAE,IAAI,CAAC,MAAM,GAAG,MAAK;CACrB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE,IAAI,CAAC,SAAS,GAAG,SAAQ;CAC3B,EAAE,IAAI,CAAC,IAAI,GAAG,GAAE;CAChB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,IAAI,CAAC,IAAI,EAAE;CACnB,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;CACpD,EAAE;AACF;CACA,CAAC,OAAO,SAAS,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;CACrC,EAAE,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,EAAC;CACnC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC;CACjD,EAAE;AACF;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,IAAI,EAAC;CAC3E,EAAE,IAAI,CAAC,IAAI,GAAG;CACd,GAAG,IAAI,EAAE,MAAM,CAAC,IAAI;CACpB,GAAG,MAAM,EAAE,IAAI,CAAC,OAAO;CACvB,GAAG,GAAG,UAAU,CAAC,MAAM;CACvB,GAAG,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;CACjC,IAAG;CACH,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE;CACnD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE;CACrB;CACA;CACA;CACA,EAAE,OAAO,KAAK,CAAC,GAAG;CAClB,EAAE;CACF;;CCtDA,MAAM,SAAS,CAAC;CAChB,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,SAAS;AACpC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,QAAQ,CAAC,KAAK,GAAG,KAAK,EAAE,KAAK,GAAG,EAAE,EAAE,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE;CAClE,EAAE,OAAO;CACT,GAAG,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG;CAC3B,GAAG;CACH,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,YAAY,CAAC,GAAG,EAAE,KAAK,EAAE,cAAc,EAAE;CACjD;CACA,EAAE,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,OAAO,KAAK;AACtC;CACA;CACA,EAAE,MAAM,eAAe,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,EAAC;CAC9C,EAAE,OAAO,eAAe,CAAC,QAAQ,CAAC,cAAc,CAAC;CACjD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,GAAG,KAAK,EAAE;CACvF;CACA,EAAE,MAAM,KAAK,GAAG,MAAM,GAAG,UAAU,CAAC,OAAM;AAC1C;CACA,EAAE,MAAM,MAAM,GAAG,SAAS,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,EAAC;CAC1E,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,SAAS,CAAC,QAAQ,EAAE;AAC1C;CACA,EAAE,MAAM,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,EAAC;AAChD;CACA,EAAE,IAAI,CAAC,SAAS,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE;CAC9D;CACA,GAAG,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC,aAAa,EAAE,UAAU,EAAC;AACjE;CACA,GAAG,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;CACxB,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,GAAG,QAAQ,CAAC;CACnE,IAAI;CACJ,GAAG;AACH;CACA,EAAE,IAAI,CAAC,SAAS,EAAE;CAClB,GAAG,KAAK,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC;AACA;CACA,IAAI,MAAM,cAAc,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAC;AAC3D;CACA,IAAI,IAAI,SAAS,EAAE;CACnB,KAAK,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;CAC1C,MAAM,QAAQ;CACd,MAAM;CACN,KAAK;AACL;CACA,IAAI,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,aAAa,EAAE,cAAc,EAAC;AACjE;CACA,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;CACpB,KAAK,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,GAAG,GAAG,CAAC;CACxE,KAAK;CACL,IAAI;CACJ,GAAG;AACH;CACA,EAAE,OAAO,SAAS,CAAC,QAAQ,EAAE;CAC7B,EAAE;AACF;AACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE;CACvC,EAAE,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAC;CAC7C,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;CACpD,GAAG,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,EAAC;CAC7D,GAAG,OAAO;CACV,IAAI,KAAK,EAAE,IAAI;CACf,IAAI,MAAM,EAAE,KAAK,CAAC,MAAM;CACxB,IAAI,GAAG,EAAE,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC;CACrC,IAAI;CACJ,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE;CAClD,EAAE;AACF;CACA,CAAC,OAAO,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE;CACvC,EAAE,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAC;CAC7C,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;CACpD,GAAG,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,EAAC;CAC7D,GAAG,OAAO;CACV,IAAI,KAAK,EAAE,IAAI;CACf,IAAI,MAAM,EAAE,KAAK,CAAC,MAAM;CACxB,IAAI,GAAG,EAAE,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC;CACrC,IAAI;CACJ,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE;CAClD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE;CAC1C,EAAE,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAC;CAC7C,EAAE,IAAI,QAAQ,GAAG,MAAK;CACtB,EAAE,IAAI,MAAK;AACX;CACA,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;CACxD;CACA,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;CACzD,IAAI,QAAQ,GAAG,KAAI;CACnB,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAC;CAC5D,IAAI,MAAM;CACV,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,YAAY,EAAC;CAC/D,IAAI;AACJ;CACA,GAAG,OAAO;CACV,IAAI,KAAK,EAAE,IAAI;CACf,IAAI,QAAQ;CACZ,IAAI,MAAM,EAAE,KAAK,CAAC,MAAM;CACxB,IAAI,GAAG,EAAE,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC;CACrC,IAAI;CACJ,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE;CAClD,EAAE;AACF;AACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,UAAU,CAAC,WAAW,EAAE,MAAM,EAAE;CACxC,EAAE,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAC;CAC7C,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;CACrD,GAAG,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,EAAC;CAC9D,GAAG,OAAO;CACV,IAAI,KAAK,EAAE,IAAI;CACf,IAAI,MAAM,EAAE,KAAK,CAAC,MAAM;CACxB,IAAI,GAAG,EAAE,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC;CACrC,IAAI;CACJ,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE;CAClD,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,aAAa,CAAC,WAAW,EAAE,QAAQ,EAAE;CAC7C,EAAE,IAAI,WAAU;CAChB,EAAE,MAAM,MAAM,GAAG,GAAE;AACnB;CACA,EAAE,SAAS,0BAA0B,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;CAC5D,GAAG,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAC;CAC9C,GAAG,IAAI,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE;CACtC,IAAI,MAAM,IAAI,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAC;CACpE,IAAI,IAAI,SAAS,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;CACrD,KAAK,SAAS,CAAC,GAAG,IAAI,KAAI;CAC1B,KAAK,SAAS,CAAC,KAAK,IAAI,KAAI;CAC5B,KAAK,MAAM;CACX,KAAK,MAAM,CAAC,IAAI,CAAC;CACjB,MAAM,IAAI,EAAE,MAAM,CAAC,IAAI;CACvB,MAAM,GAAG,EAAE,IAAI;CACf,MAAM,KAAK,EAAE,IAAI;CACjB,MAAM,EAAC;CACP,KAAK;CACL,IAAI;CACJ,GAAG;AACH;CACA,EAAE,KAAK,IAAI,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;CAC1D,GAAG,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,EAAC;CACvC,GAAG,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAI;CACjD,GAAG,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAI;CACjD,GAAG,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAC;AAC9C;CACA,GAAG,IAAI,MAAM,GAAG,MAAK;AACrB;CACA,GAAG,IAAI,QAAQ,IAAI,QAAQ,KAAK,IAAI,EAAE,MAAM,GAAG,KAAI;AACnD;CACA,GAAG,IAAI,CAAC,MAAM,KAAK,QAAQ,KAAK,GAAG,IAAI,QAAQ,KAAK,GAAG,CAAC,EAAE;CAC1D,IAAI,UAAU,GAAG,KAAK,CAAC,eAAe,CAAC,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAC;AACrE;CACA,IAAI,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,EAAC;AAC7F;CACA,IAAI,IAAI,KAAK,EAAE;CACf;CACA,KAAK,0BAA0B,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAC;AACrD;CACA,KAAK,MAAM,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAC;CAC5C,KAAK,MAAM,CAAC,IAAI,CAAC;CACjB,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC;CACnC,SAAS,MAAM,CAAC,IAAI;CACpB,SAAS,MAAM,CAAC,MAAM;CACtB,MAAM,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;CACjC,MAAM,MAAM,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,CAAC;CAClD,MAAM,EAAC;CACP,KAAK,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,EAAC;CACpC,KAAK,QAAQ;CACb,KAAK;CACL,IAAI;CACJ,QAAQ,IAAI,CAAC,MAAM,IAAI,QAAQ,KAAK,GAAG,EAAE;CACzC,IAAI,UAAU,GAAG,KAAK,CAAC,eAAe,CAAC,WAAW,EAAE,MAAM,EAAE,GAAG,EAAC;AAChE;CACA,IAAI,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAC;AACnG;CACA,IAAI,IAAI,KAAK,EAAE;CACf,KAAK,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAC;CAChD,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;CAC3B,MAAM,MAAM,CAAC,IAAI,CAAC;CAClB,OAAO,IAAI,EAAE,MAAM,CAAC,IAAI;CACxB,OAAO,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;CACtC;CACA;CACA,OAAO,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE;CAC1B,OAAO,EAAC;CACR,MAAM,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,EAAC;CACrC,MAAM,QAAQ;CACd,MAAM;CACN,KAAK;CACL,IAAI;CACJ,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;CACtD;CACA,IAAI,IAAI,QAAQ,IAAI,QAAQ,KAAK,QAAQ,EAAE;CAC3C,KAAK,UAAU,GAAG,KAAK,CAAC,eAAe,CAAC,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAC;AACtE;CACA,KAAK,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAC;AAC3G;CACA,KAAK,IAAI,KAAK,EAAE;CAChB,MAAM,0BAA0B,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAC;AACtD;CACA,MAAM,MAAM,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAC;CAC7C,MAAM,MAAM,CAAC,IAAI,CAAC;CAClB,OAAO,IAAI,EAAE,CAAC,QAAQ,KAAK,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,cAAc;CACzE,OAAO,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;CAClC,OAAO,MAAM,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,CAAC;CACnD,OAAO,EAAC;CACR,MAAM,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,EAAC;CACrC,MAAM,QAAQ;CACd,MAAM;CACN,KAAK;CACL,IAAI;CACJ,QAAQ,IAAI,CAAC,MAAM,IAAI,QAAQ,KAAK,GAAG,EAAE;CACzC;CACA,IAAI,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,EAAC;AAC9D;CACA,IAAI,IAAI,SAAS,CAAC,KAAK,EAAE;CACzB,KAAK,MAAM,CAAC,IAAI,CAAC;CACjB,MAAM,IAAI,EAAE,MAAM,CAAC,IAAI;CACvB,MAAM,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;CACvD,MAAM,MAAM,EAAE;CACd,OAAO,KAAK,EAAE;CACd,QAAQ,GAAG,EAAE,SAAS,CAAC,MAAM,CAAC,IAAI;CAClC,QAAQ,MAAM,EAAE,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC;CACxE,QAAQ;CACR,OAAO,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,IAAI;CAClC,OAAO,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK;CACtC,OAAO;CACP,MAAM,EAAC;CACP,KAAK,MAAM,GAAG,SAAS,CAAC,IAAG;CAC3B,KAAK,QAAQ;CACb,KAAK;AACL;CACA;CACA,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;CAC7B,KAAK,MAAM,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,EAAC;CACrE,KAAK,IAAI,YAAY,CAAC,KAAK,EAAE;AAC7B;CACA;CACA,MAAM,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM,CAAC,GAAG,EAAC;AACxE;CACA,MAAM,IAAI,GAAG,EAAE;CACf,OAAO,MAAM,QAAQ,GAAG,CAAC,YAAY,CAAC,QAAQ,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,KAAI;AACrF;CACA,OAAO,MAAM,CAAC,IAAI,CAAC;CACnB,QAAQ,IAAI,EAAE,MAAM,CAAC,IAAI;CACzB,QAAQ,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC;CAC5D,QAAQ,MAAM,EAAE;CAChB,SAAS,KAAK,EAAE;CAChB,UAAU,GAAG,EAAE,QAAQ;CACvB,UAAU,MAAM,EAAE,SAAS,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC;CAC7D,UAAU;CACV,SAAS,IAAI,EAAE,GAAG,CAAC,IAAI;CACvB,SAAS,OAAO,EAAE,GAAG,CAAC,KAAK;CAC3B,SAAS;CACT,QAAQ,EAAC;CACT,OAAO,MAAM,GAAG,YAAY,CAAC,IAAG;CAChC,OAAO,QAAQ;CACf,OAAO;CACP,MAAM;CACN,KAAK;CACL,IAAI;CACJ,QAAQ,IAAI,CAAC,MAAM,IAAI,QAAQ,KAAK,GAAG,EAAE;CACzC;CACA,IAAI,MAAM,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,EAAC;CAChE,IAAI,IAAI,UAAU,CAAC,KAAK,EAAE;CAC1B,KAAK,MAAM,CAAC,IAAI,CAAC;CACjB,MAAM,IAAI,EAAE,MAAM,CAAC,KAAK;CACxB,MAAM,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;CACxD,MAAM,MAAM,EAAE,UAAU,CAAC,MAAM;CAC/B,MAAM,EAAC;CACP,KAAK,MAAM,GAAG,UAAU,CAAC,IAAG;CAC5B,KAAK,QAAQ;CACb,KAAK;CACL;CACA,IAAI;CACJ,QAAQ,IAAI,CAAC,MAAM,IAAI,QAAQ,KAAK,GAAG,EAAE;CACzC,IAAI,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,EAAC;CAC9D,IAAI,IAAI,SAAS,CAAC,KAAK,EAAE;CACzB,KAAK,MAAM,CAAC,IAAI,CAAC;CACjB,MAAM,IAAI,EAAE,MAAM,CAAC,IAAI;CACvB,MAAM,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;CACvD,MAAM,MAAM,EAAE;CACd,OAAO,GAAG,EAAE,SAAS,CAAC,MAAM,EAAE,GAAG,IAAI,SAAS,CAAC,MAAM,EAAE,MAAM;CAC7D,OAAO,UAAU,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE;CACjD,OAAO,QAAQ,EAAE,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,MAAM;CAC5C,OAAO;CACP,MAAM,EAAC;CACP,KAAK,MAAM,GAAG,SAAS,CAAC,IAAG;CAC3B,KAAK,QAAQ;CACb,KAAK;CACL,IAAI;AACJ;CACA;CACA,GAAG,IAAI,SAAS,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;CACpD,IAAI,SAAS,CAAC,GAAG,IAAI,SAAQ;CAC7B,IAAI,SAAS,CAAC,KAAK,IAAI,SAAQ;CAC/B,IAAI,MAAM;CACV;CACA,IAAI,MAAM,CAAC,IAAI,CAAC;CAChB,KAAK,IAAI,EAAE,MAAM,CAAC,IAAI;CACtB,KAAK,GAAG,EAAE,QAAQ;CAClB,KAAK,KAAK,EAAE,QAAQ;CACpB,KAAK,EAAC;CACN,IAAI;CACJ,GAAG;CACH,EAAE,OAAO,MAAM;CACf,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,QAAQ,CAAC,WAAW,EAAE,QAAQ,EAAE;CACxC,EAAE,OAAO,SAAS,CAAC,aAAa,CAAC,WAAW,EAAE,QAAQ,CAAC;CACvD,EAAE;AACF;CACA,CAAC,OAAO,KAAK,CAAC,KAAK,EAAE;CACrB,EAAE,IAAI,MAAM,GAAG,GAAE;CACjB,EAAE,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI;CAChC,GAAG,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;CACnC,IAAI,MAAM,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,EAAC;CAC1D,IAAI,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,EAAE;CAC5C,IAAI,MAAM,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,EAAC;CAClD,IAAI,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;CAC1C,IAAI,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAC;CAC3C,IAAI,MAAM,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,EAAC;CAC3D,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,cAAc,EAAE;CACnD,IAAI,MAAM,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAC;CAChD,IAAI,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;CAC1C,IAAI,MAAM,UAAU,GAAG,KAAK,CAAC,OAAM;CACnC,IAAI,IAAI,OAAO,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;CAChD,OAAO,UAAU,CAAC,OAAO,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;CAClE,MAAM,GAAG;CACT,MAAM,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC;CACvC,MAAM,OAAM;AACZ;CACA,IAAI,MAAM,IAAI,QAAO;CACrB,IAAI,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,SAAS,EAAE;CAC/C,IAAI,MAAM,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAC;CAChD,IAAI,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,EAAE;CAC3C,IAAI,MAAM,SAAS,GAAG,KAAK,CAAC,OAAM;CAClC,IAAI,IAAI,MAAM,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;CAC/C,OAAO,SAAS,CAAC,GAAG,KAAK,SAAS,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;CACpE,OAAO,SAAS,CAAC,KAAK,KAAK,SAAS,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;CAC1E,OAAO,SAAS,CAAC,KAAK,KAAK,SAAS,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;CAC1E,OAAO,SAAS,CAAC,MAAM,KAAK,SAAS,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;CAC7E,MAAM,IAAG;CACT,IAAI,MAAM,IAAI,OAAM;CACpB,IAAI,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;CAC1C,IAAI,MAAM,IAAI,KAAK,CAAC,IAAG;CACvB,IAAI,MAAM;CACV,IAAI,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAC;CAC5C,IAAI,MAAM,SAAS,GAAG,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAC;CAC3C,IAAI,MAAM,IAAI,UAAS;CACvB,IAAI;CACJ,GAAG,EAAC;CACJ,EAAE,OAAO,MAAM;CACf,EAAE;CACF,CAAC;AACD;AACA,mBAAe;;CCncf,MAAM,WAAW,CAAC;CAClB,CAAC,MAAM;CACP,CAAC,QAAQ;CACT,CAAC,KAAK;CACN,CAAC,MAAM,GAAG,EAAE;AACZ;CACA,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,YAAY;AACvC;CACA,CAAC,WAAW,CAAC,KAAK,EAAE;CACpB,EAAE,IAAI,CAAC,MAAM,GAAG,MAAK;CACrB,EAAE,IAAI,CAAC,OAAO,GAAE;CAChB,EAAE;AACF;CACA,CAAC,OAAO,IAAI,CAAC,KAAK,EAAE;CACpB,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;CAC9D,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;CAC1C,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,EAAC;CACzB,IAAI,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;CAC5D,KAAK,OAAO,IAAI;CAChB,KAAK;CACL,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;CAC1D,KAAK,OAAO,KAAK;CACjB,KAAK;CACL,IAAI;CACJ,GAAG;CACH,EAAE,OAAO,KAAK;CACd,EAAE;AACF;CACA,CAAC,OAAO,GAAG;CACX,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;CAC/C,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;CACrE,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,EAAC;CACzB,IAAI;CACJ,GAAG;CACH,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAC;CACtD,EAAE;AACF;CACA,CAAC,+BAA+B,GAAG;CACnC,EAAE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;CAC7C,EAAE;AACF;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;CAC9C,GAAG,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAC;CAC7B,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;CACxD,IAAI,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,KAAK,EAAC;CACjE,IAAI,IAAI,KAAK,EAAE;CACf,KAAK,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,MAAK;CACtC,KAAK,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,EAAE;CAC7D,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,KAAK,OAAM;CAClD,MAAM,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;CAC7C,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,EAAC;CACnC,MAAM,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;CAC1D,MAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,EAAC;CACrC,MAAM,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;CAC5F,MAAM,IAAI;CACV,OAAO,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAC;CACtC,OAAO,CAAC,OAAO,CAAC,EAAE;CAClB;CACA,OAAO;CACP,MAAM;CACN,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,SAAQ;CAC7C,KAAK;CACL,IAAI;CACJ,GAAG;CACH,EAAE,OAAO,IAAI,CAAC,MAAM;CACpB,EAAE;CACF;;CCpEA,MAAM,OAAO,CAAC;CACd,CAAC,OAAO,SAAS,GAAG,MAAM,CAAC,QAAQ;AACnC;CACA,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE;CACvB,EAAE,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,OAAO,KAAK;CAC5C,EAAE,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;CACzC,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,OAAO,KAAK,GAAG;CAChB,EAAE,OAAO,MAAM;CACf,EAAE;CACF,CAAC;AACD;AACA,iBAAe;;CCPf,MAAM,OAAO,GAAG;CAChB,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS;CACzC,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,aAAEF,WAAS;CACtC;;CCTA,MAAM,KAAK,CAAC;CACZ,CAAC,OAAO;CACR,CAAC,MAAM;CACP,CAAC,UAAU;CACX,CAAC,SAAS;CACV,CAAC,SAAS;CACV,CAAC,eAAe;CAChB,CAAC,kBAAkB;CACnB,CAAC,cAAc;CACf,CAAC,kBAAkB;CACnB,CAAC,UAAU;CACX,CAAC,SAAS,GAAG,EAAE;CACf,CAAC,YAAY;CACb,CAAC,OAAO;AACR;CACA,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE;CACtD,EAAE,IAAI,CAAC,MAAM,GAAG,MAAK;CACrB,EAAE,IAAI,CAAC,UAAU,GAAG,GAAE;CACtB,EAAE,IAAI,CAAC,UAAU,GAAG,KAAI;CACxB,EAAE,IAAI,CAAC,OAAO,GAAG,EAAC;CAClB,EAAE,IAAI,CAAC,OAAO,GAAG,OAAM;CACvB,EAAE;AACF;CACA,CAAC,iBAAiB,GAAG;CACrB,EAAE,MAAM,OAAO,GAAG;CAClB,GAAG,IAAI,EAAE,IAAI,CAAC,SAAS;CACvB,GAAG,QAAQ,EAAE,IAAI,CAAC,SAAS;CAC3B,GAAG,KAAK,EAAE,IAAI,CAAC,MAAM;CACrB,GAAG,MAAM,EAAE,IAAI,CAAC,OAAO;CACvB,GAAG,MAAM,EAAE,IAAI,CAAC,eAAe;CAC/B,GAAG,SAAS,EAAE,IAAI,CAAC,cAAc;CACjC,GAAG,SAAS,EAAE,IAAI,CAAC,UAAU;CAC7B,IAAG;AACH;CACA,EAAE,IAAIC,SAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,gBAAgB,EAAE;AAC3D;CACA,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,gBAAgB,EAAE;AAC3D;CACA,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,eAAe,EAAE;AACzD;CACA,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,gBAAgB,EAAE;AAC3D;CACA,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,cAAc,EAAE;AACvD;CACA,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,cAAc,EAAE;AACvD;CACA,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,aAAa,EAAE;AACrD;CACA,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,cAAc,EAAE;AACvD;CACA,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,aAAa,EAAE;AAC1D;CACA,EAAE,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,kBAAkB,EAAE;AAC/D;CACA;CACA,EAAE,OAAO,IAAI,CAAC,kBAAkB,EAAE;CAClC,EAAE;AACF;CACA,CAAC,gBAAgB,GAAG;CACpB;CACA,EAAE,IAAI,IAAI,CAAC,kBAAkB,KAAK,CAAC,EAAE,OAAO,IAAI;CAChD;CACA;CACA,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,MAAM,CAAC,QAAQ,EAAE;CACpD,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CACxB,IAAI,IAAI,EAAE,MAAM,CAAC,QAAQ;CACzB,IAAI,EAAC;CACL,GAAG;CACH,EAAE;AACF;CACA,CAAC,eAAe,GAAG;CACnB;CACA,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CACvB,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO;CACvB,GAAG,EAAC;CACJ,EAAE;AACF;CACA,CAAC,kBAAkB,GAAG;CACtB,EAAE,MAAM,WAAW,GAAG,IAAI,SAAS;CACnC,GAAG,IAAI,CAAC,MAAM;CACd,GAAG,IAAI,CAAC,OAAO;CACf,GAAG,IAAI,CAAC,eAAe;CACvB,GAAG,IAAI,CAAC,kBAAkB;CAC1B,IAAG;AACH;CACA,EAAE,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,GAAE;AACzC;CACA,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAC;AACtC;CACA;CACA,EAAE,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAM;CAChC,EAAE;AACF;CACA,CAAC,cAAc,GAAG;CAClB,EAAE,MAAM,cAAc,GAAG,IAAI,KAAK;CAClC,GAAG,IAAI,CAAC,MAAM;CACd,GAAG,IAAI,CAAC,OAAO;CACf,GAAG,IAAI,CAAC,eAAe;CACvB,GAAG,IAAI,CAAC,SAAS;CACjB,IAAG;CACH,EAAE,MAAM,WAAW,GAAG,cAAc,CAAC,QAAQ,GAAE;AAC/C;CACA,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAC;AACzC;CACA,EAAE,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,OAAM;CACnC,EAAE;AACF;CACA,CAAC,aAAa,GAAG;CACjB,EAAE,MAAM,aAAa,GAAG,IAAI,IAAI;CAChC,GAAG,IAAI,CAAC,MAAM;CACd,GAAG,IAAI,CAAC,OAAO;CACf,GAAG,IAAI,CAAC,eAAe;CACvB,GAAG,IAAI,CAAC,SAAS;CACjB,IAAG;CACH,EAAE,MAAM,UAAU,GAAG,aAAa,CAAC,QAAQ,GAAE;AAC7C;CACA,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAC;AACxC;CACA,EAAE,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAM;CAClC,EAAE;AACF;CACA,CAAC,aAAa,GAAG;CACjB,EAAE,MAAM,IAAI,GAAG,IAAI,IAAI;CACvB,GAAG,IAAI,CAAC,MAAM;CACd,GAAG,IAAI,CAAC,OAAO;CACf,GAAG,IAAI,CAAC,eAAe;CACvB,GAAG,IAAI,CAAC,UAAU;CAClB,IAAG;CACH,EAAE,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,GAAE;AACpC;AACA;CACA,EAAE,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAM;AAClC;CACA;CACA;CACA,EAAE;CACF,GAAG,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC;CACjG,IAAI;CACJ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAC;CACnD,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;CACzD,GAAG,MAAM;CACT,GAAG;AACH;CACA;CACA;CACA,EAAE,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,MAAK;AAChF;CACA,EAAE;CACF,GAAG,IAAI,CAAC,cAAc;CACtB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,MAAM,CAAC,QAAQ;CAC/C,GAAG,IAAI,CAAC,kCAAkC,CAAC,iBAAiB,EAAE,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC;CAC/F,IAAI;CACJ;CACA,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,GAAE;CACxB;CACA,GAAG,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;CAC/C;CACA,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAC;CAC7C,GAAG,aAAa,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;CACnD,GAAG,MAAM;CACT,GAAG;AACH;CACA,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CACvB,GAAG,IAAI,EAAE,MAAM,CAAC,IAAI;CACpB,GAAG,MAAM,EAAE,IAAI,CAAC,eAAe;CAC/B,GAAG,IAAI,EAAE,UAAU,CAAC,IAAI;CACxB,GAAG,KAAK,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC;CAC5B,GAAG,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG;CAC5B,GAAG,EAAC;CACJ,EAAE;AACF;CACA,CAAC,cAAc,GAAG;CAClB,EAAE,MAAM,cAAc,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAC;CAC7D,EAAE,MAAM,WAAW,GAAG,cAAc,CAAC,QAAQ,GAAE;CAC/C,EAAE,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,OAAM;AACnC;CACA,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CACvB,GAAG,MAAM,EAAE,IAAI,CAAC,eAAe;CAC/B,GAAG,GAAG,WAAW,CAAC,KAAK;CACvB,GAAG,EAAC;CACJ,EAAE;AACF;CACA,CAAC,gBAAgB,GAAG;CACpB,EAAE,MAAM,UAAU,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAC;CAChE,EAAE,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,GAAE;AACvC;CACA,EAAE,IAAI,OAAO,CAAC,MAAM,EAAE;CACtB,GAAG,IAAI,CAAC,OAAO,GAAE;CACjB,GAAG;AACH;CACA,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CACvB,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO;CACvB,GAAG,MAAM,EAAE,IAAI,CAAC,eAAe;CAC/B,GAAG,GAAG,OAAO;CACb,GAAG,MAAM,EAAED,WAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC;CAC5D,GAAG,EAAC;CACJ,EAAE;AACF;CACA,CAAC,gBAAgB,GAAG;CACpB,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CACvB,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO;CACvB,GAAG,MAAM,EAAE,IAAI,CAAC,eAAe;CAC/B,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;CACtC,GAAG,GAAG,EAAE,IAAI,CAAC,SAAS;CACtB,GAAG,EAAC;CACJ,EAAE;AACF;CACA,CAAC,cAAc,GAAG;CAClB,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CACvB,GAAG,IAAI,EAAE,MAAM,CAAC,KAAK;CACrB,GAAG,MAAM,EAAE,IAAI,CAAC,eAAe;CAC/B,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;CACpC,GAAG,GAAG,EAAE,IAAI,CAAC,SAAS;CACtB,GAAG,EAAC;CACJ,EAAE;AACF;CACA,CAAC,kBAAkB,GAAG;CACtB,EAAE;CACF,GAAG,IAAI,CAAC,cAAc;CACtB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,MAAM,CAAC,SAAS;CAChD,GAAG,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM;CACrD,IAAI;CACJ;CACA;CACA;CACA,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;CAC/C,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,OAAM;CAC5E,IAAI;CACJ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC;CACnD,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC;CACpD,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,GAAGA,WAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAC;CAC7F,GAAG,MAAM;CACT,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;CACxB,IAAI,IAAI,EAAE,MAAM,CAAC,SAAS;CAC1B,IAAI,MAAM,EAAE,IAAI,CAAC,eAAe;CAChC,IAAI,MAAM,EAAEA,WAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;CAC9D,IAAI,GAAG,EAAE,IAAI,CAAC,SAAS;CACvB,IAAI,KAAK,EAAE,IAAI,CAAC,SAAS;CACzB,IAAI,EAAC;CACL,GAAG;CACH,EAAE;AACF;CACA,CAAC,iBAAiB,GAAG;CACrB,EAAE,KAAK,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE;CAC5E,GAAG,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAC;CACzC,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;CAC1D,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,MAAM,EAAC;CACjF;CACA,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAC;CACvC;CACA,IAAI,IAAI,CAAC,OAAO,GAAE;CAClB,IAAI;CACJ,GAAG;CACH,EAAE;AACF;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAC;CAC5C,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,EAAC;CAChD,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,OAAM;CAClD,EAAE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,IAAI,KAAI;CAC5E,EAAE,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAC;CACtD,EAAE,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAC;CAC7D,EAAE;AACF;CACA,CAAC,gBAAgB,GAAG;CACpB,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;CACrC,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,EAAC;CACnD,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,+BAA+B,GAAE;CACpE,GAAG,IAAI,CAAC,OAAO,GAAG,EAAC;CACnB,GAAG;CACH,EAAE;AACF;CACA,CAAC,cAAc,GAAG;CAClB,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;CACrC,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,EAAC;CACnD,GAAG,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;CACtC,GAAG,MAAM;CACT,GAAG,OAAO,EAAE;CACZ,GAAG;CACH,EAAE;AACF;CACA,CAAC,GAAG,GAAG;CACP,EAAE,IAAI,CAAC,gBAAgB,GAAE;CACzB,EAAE,IAAI,CAAC,iBAAiB,GAAE;AAC1B;CACA,EAAE,KAAK,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE;CAC5E,GAAG,IAAI,CAAC,QAAQ,GAAE;CAClB,GAAG,IAAI,CAAC,iBAAiB,GAAE;CAC3B,GAAG;AACH;CACA,EAAE,OAAO,IAAI,CAAC,UAAU;CACxB,EAAE;CACF,CAAC;AACD;AACA,eAAe;;CC1Sf,MAAM,QAAQ,CAAC;CACf,CAAC,MAAM,GAAG,EAAE;AACZ;CACA,CAAC,WAAW,CAAC,MAAM,GAAG,EAAE,EAAE;CAC1B,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAC;CACzC,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,KAAI;CACtD,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,MAAK;CACvD,EAAE;AACF;CACA,CAAC,QAAQ,CAAC,GAAG,EAAE;CACf,EAAE,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC;CACxE,EAAE,MAAM,KAAK,GAAG,IAAIE,OAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAC;CACnE,EAAE,OAAO,KAAK,CAAC,GAAG,EAAE;CACpB,EAAE;AACF;CACA,CAAC,KAAK,CAAC,GAAG,EAAE;CACZ,EAAE,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC;CACxE,EAAE,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAC;CAChC,EAAE,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAC;CACzD,EAAE,OAAO,MAAM,CAAC,GAAG,EAAE;CACrB,EAAE;AACF;CACA,CAAC,cAAc,CAAC,GAAG,EAAE;CACrB,EAAE,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC;CACxE,EAAE,MAAM,KAAK,GAAG,IAAIA,OAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC;CAC1C,EAAE,OAAO,KAAK,CAAC,cAAc,EAAE;CAC/B,EAAE;CACF;;;;;;;;"}