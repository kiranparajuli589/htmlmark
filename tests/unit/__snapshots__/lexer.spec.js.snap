// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lexer codeblock should be broken with wrong indent 1`] = `
Array [
  Object {
    "indent": 6,
    "raw": "      \`\`\`",
    "type": "paragraph",
    "value": "      \`\`\`",
  },
  Object {
    "indent": 2,
    "raw": "  abcd",
    "type": "paragraph",
    "value": "  abcd",
  },
  Object {
    "indent": 6,
    "raw": "      \`\`\`",
    "type": "paragraph",
    "value": "      \`\`\`",
  },
]
`;

exports[`lexer codeblock should cope with empty body 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "",
  },
]
`;

exports[`lexer codeblock should cope with multiple items 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "const a = 1",
  },
  Object {
    "indent": 0,
    "raw": "some people are funny",
    "type": "paragraph",
    "value": "some people are funny",
  },
]
`;

exports[`lexer codeblock should detect acceptable indent for closing codeblock 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "const a = 1
const b = 2
const c = 3",
  },
]
`;

exports[`lexer codeblock should detect mis-indented closing codeblock 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "const a = 1
const b = 2
const c = 3
    \`\`\`",
  },
]
`;

exports[`lexer codeblock should parse multiple consecutive codeblocks 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "const a = 1",
  },
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "const b = 2",
  },
]
`;

exports[`lexer codeblock should parse the codeblock 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "const a = 1",
  },
]
`;

exports[`lexer codeblock should parse the codeblock with multiple lines 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "const a = 1
const b = 2",
  },
]
`;

exports[`lexer codeblock should parse the codeblock with multiple lines and a newline 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "type": "code-block",
    "value": "const a = 1
const b = 2

const c = 3",
  },
]
`;

exports[`lexer codeblock should parse the codeblock without the language 1`] = `
Array [
  Object {
    "indent": 0,
    "language": null,
    "type": "code-block",
    "value": "const a = 1",
  },
]
`;

exports[`lexer codeblock should set incomplete codeblock as a code block 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "some line",
    "type": "paragraph",
    "value": "some line",
  },
  Object {
    "indent": 2,
    "language": "js",
    "type": "code-block",
    "value": "const a = 1
const b = 2",
  },
]
`;

exports[`lexer common tokens should parse the common tokens: '![alt text](image.png)' 1`] = `
Array [
  Object {
    "alt": "alt text",
    "indent": 0,
    "raw": "![alt text](image.png)",
    "type": "image",
    "url": "image.png",
  },
]
`;

exports[`lexer common tokens should parse the common tokens: '# Heading One Text' 1`] = `
Array [
  Object {
    "indent": 0,
    "level": 1,
    "raw": "# Heading One Text",
    "type": "heading",
    "value": "Heading One Text",
  },
]
`;

exports[`lexer common tokens should parse the common tokens: '## Heading Two Text' 1`] = `
Array [
  Object {
    "indent": 0,
    "level": 2,
    "raw": "## Heading Two Text",
    "type": "heading",
    "value": "Heading Two Text",
  },
]
`;

exports[`lexer common tokens should parse the common tokens: '### Heading Three Text' 1`] = `
Array [
  Object {
    "indent": 0,
    "level": 3,
    "raw": "### Heading Three Text",
    "type": "heading",
    "value": "Heading Three Text",
  },
]
`;

exports[`lexer common tokens should parse the common tokens: '#### Heading Four Text' 1`] = `
Array [
  Object {
    "indent": 0,
    "level": 4,
    "raw": "#### Heading Four Text",
    "type": "heading",
    "value": "Heading Four Text",
  },
]
`;

exports[`lexer common tokens should parse the common tokens: '##### Heading Five Text' 1`] = `
Array [
  Object {
    "indent": 0,
    "level": 5,
    "raw": "##### Heading Five Text",
    "type": "heading",
    "value": "Heading Five Text",
  },
]
`;

exports[`lexer common tokens should parse the common tokens: '###### Heading Six Text' 1`] = `
Array [
  Object {
    "indent": 0,
    "level": 6,
    "raw": "###### Heading Six Text",
    "type": "heading",
    "value": "Heading Six Text",
  },
]
`;

exports[`lexer common tokens should parse the common tokens: '<!-- comment item text -->' 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "<!-- comment item text -->",
    "type": "comment",
    "value": "comment item text",
  },
]
`;

exports[`lexer emphasis bold should be deep tokenized 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "**bold with \`code\` and *italics* and ~~strikes~~ and [link](https://kiranparajuli.com.np)**",
    "type": "paragraph",
    "value": "**bold with \`code\` and *italics* and ~~strikes~~ and [link](https://kiranparajuli.com.np)**",
  },
]
`;

exports[`lexer emphasis bold should match the consecutive occurrences 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "**first bold** **second bold** **third bold**",
    "type": "paragraph",
    "value": "**first bold** **second bold** **third bold**",
  },
]
`;

exports[`lexer emphasis code should match the consecutive occurrences 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "\`first code\` \`second code\` \`third code\`",
    "type": "paragraph",
    "value": "\`first code\` \`second code\` \`third code\`",
  },
]
`;

exports[`lexer emphasis code should not be deep tokenized 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "\`code with ~ gem and **bold** and *italics* and [link](https://kiranparajuli.com.np)\`",
    "type": "paragraph",
    "value": "\`code with ~ gem and **bold** and *italics* and [link](https://kiranparajuli.com.np)\`",
  },
]
`;

exports[`lexer emphasis italics should be deep tokenized 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "*italics with \`code\` and ~~strikes~~ and [link](https://kiranparajuli.com.np)*",
    "type": "paragraph",
    "value": "*italics with \`code\` and ~~strikes~~ and [link](https://kiranparajuli.com.np)*",
  },
]
`;

exports[`lexer emphasis italics should match the consecutive occurrences 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "*first italics* *second italics* *third italics*",
    "type": "paragraph",
    "value": "*first italics* *second italics* *third italics*",
  },
]
`;

exports[`lexer emphasis link should deep tokenized the link title 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "[*italic* with **bold** and \`code\`](https://kiranparajuli.com.np)",
    "type": "paragraph",
    "value": "[*italic* with **bold** and \`code\`](https://kiranparajuli.com.np)",
  },
]
`;

exports[`lexer emphasis link should match the consecutive occurrences 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "[link](https://kiranparajuli.com.np) [link](https://kiranparajuli.com.np)",
    "type": "paragraph",
    "value": "[link](https://kiranparajuli.com.np) [link](https://kiranparajuli.com.np)",
  },
]
`;

exports[`lexer emphasis strikes should be deep tokenized 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "~~strikes with ~ gem and \`code\` and **bold** and *italics* and [link](https://kiranparajuli.com.np)~~",
    "type": "paragraph",
    "value": "~~strikes with ~ gem and \`code\` and **bold** and *italics* and [link](https://kiranparajuli.com.np)~~",
  },
]
`;

exports[`lexer emphasis strikes should match the consecutive occurrences 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "~~first strikes~~ ~~second strikes~~ ~~third strikes~~",
    "type": "paragraph",
    "value": "~~first strikes~~ ~~second strikes~~ ~~third strikes~~",
  },
]
`;

exports[`lexer list indent should break the list 1`] = `
Array [
  Object {
    "indent": 2,
    "items": Array [
      Object {
        "raw": "  - item **1**",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item **1**",
              "type": "paragraph",
              "value": "item **1**",
            },
          ],
        },
      },
      Object {
        "raw": "  - item [link](link-url)",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item [link](link-url)",
              "type": "paragraph",
              "value": "item [link](link-url)",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": "-",
      "isCheckList": false,
      "ordered": false,
    },
    "type": "list",
  },
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "raw": "- item 3 \`code item\`",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item 3 \`code item\`",
              "type": "paragraph",
              "value": "item 3 \`code item\`",
            },
          ],
        },
      },
      Object {
        "raw": "- item 4",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item 4",
              "type": "paragraph",
              "value": "item 4",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": "-",
      "isCheckList": false,
      "ordered": false,
    },
    "type": "list",
  },
]
`;

exports[`lexer list should allow lazy lexing 1`] = `
Array [
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "raw": "- [x] list *item* one",
        "tokens": Object {
          "isChecked": true,
          "value": Array [
            Object {
              "indent": 0,
              "raw": "list *item* one
omg this is merged with the above line",
              "type": "paragraph",
              "value": "list *item* one omg this is merged with the above line",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": "-",
      "isCheckList": true,
      "ordered": false,
    },
    "type": "list",
  },
]
`;

exports[`lexer list should tokenize a valid ordered list 1`] = `
Array [
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "raw": "1. item **1**",
        "tokens": Object {
          "count": "1",
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item **1**",
              "type": "paragraph",
              "value": "item **1**",
            },
          ],
        },
      },
      Object {
        "raw": "1. item [link](link-url)",
        "tokens": Object {
          "count": "1",
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item [link](link-url)",
              "type": "paragraph",
              "value": "item [link](link-url)",
            },
          ],
        },
      },
      Object {
        "raw": "1. item 3 \`code item\`",
        "tokens": Object {
          "count": "1",
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item 3 \`code item\`",
              "type": "paragraph",
              "value": "item 3 \`code item\`",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": null,
      "isCheckList": false,
      "ordered": true,
    },
    "type": "list",
  },
]
`;

exports[`lexer list should tokenize a valid un-ordered list 1`] = `
Array [
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "raw": "- item **1**",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item **1**",
              "type": "paragraph",
              "value": "item **1**",
            },
          ],
        },
      },
      Object {
        "raw": "- item [link](link-url)",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item [link](link-url)",
              "type": "paragraph",
              "value": "item [link](link-url)",
            },
          ],
        },
      },
      Object {
        "raw": "- item 3 \`code item\`",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "item 3 \`code item\`",
              "type": "paragraph",
              "value": "item 3 \`code item\`",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": "-",
      "isCheckList": false,
      "ordered": false,
    },
    "type": "list",
  },
]
`;

exports[`lexer list should tokenize list combination 1`] = `
Array [
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "raw": "- one",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "one",
              "type": "paragraph",
              "value": "one",
            },
          ],
        },
      },
      Object {
        "raw": "- two",
        "tokens": Object {
          "value": Array [
            Object {
              "indent": 0,
              "raw": "two",
              "type": "paragraph",
              "value": "two",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": "-",
      "isCheckList": false,
      "ordered": false,
    },
    "type": "list",
  },
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "raw": "1. one",
        "tokens": Object {
          "count": "1",
          "value": Array [
            Object {
              "indent": 0,
              "raw": "one",
              "type": "paragraph",
              "value": "one",
            },
          ],
        },
      },
      Object {
        "raw": "2. two",
        "tokens": Object {
          "count": "2",
          "value": Array [
            Object {
              "indent": 0,
              "raw": "two",
              "type": "paragraph",
              "value": "two",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": null,
      "isCheckList": false,
      "ordered": true,
    },
    "type": "list",
  },
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "raw": "- [ ] c empty",
        "tokens": Object {
          "isChecked": false,
          "value": Array [
            Object {
              "indent": 0,
              "raw": "c empty",
              "type": "paragraph",
              "value": "c empty",
            },
          ],
        },
      },
      Object {
        "raw": "- [x] c checked",
        "tokens": Object {
          "isChecked": true,
          "value": Array [
            Object {
              "indent": 0,
              "raw": "c checked",
              "type": "paragraph",
              "value": "c checked",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": "-",
      "isCheckList": true,
      "ordered": false,
    },
    "type": "list",
  },
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "raw": "1. [ ] c empty",
        "tokens": Object {
          "count": "1",
          "isChecked": false,
          "value": Array [
            Object {
              "indent": 0,
              "raw": "c empty",
              "type": "paragraph",
              "value": "c empty",
            },
          ],
        },
      },
      Object {
        "raw": "1. [x] c checked",
        "tokens": Object {
          "count": "1",
          "isChecked": true,
          "value": Array [
            Object {
              "indent": 0,
              "raw": "c checked",
              "type": "paragraph",
              "value": "c checked",
            },
          ],
        },
      },
    ],
    "meta": Object {
      "identifier": null,
      "isCheckList": true,
      "ordered": true,
    },
    "type": "list",
  },
]
`;

exports[`lexer paragraph should be deep tokenized 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "some normal and **bold with * gem** but pure *italics* is alos there baby now ~~coming~~hola amigons~~strike~~ wooo lala what about blazing *********here baby ~~~~~~~~~baby \`baby\`\`\`[[[[[[[[[[[[[[[l]]]]int](href)[link](href)\`\`\`\`\`\`\`\`\`\`",
    "type": "paragraph",
    "value": "some normal and **bold with * gem** but pure *italics* is alos there baby now ~~coming~~hola amigons~~strike~~ wooo lala what about blazing *********here baby ~~~~~~~~~baby \`baby\`\`\`[[[[[[[[[[[[[[[l]]]]int](href)[link](href)\`\`\`\`\`\`\`\`\`\`",
  },
]
`;

exports[`lexer paragraph should be deep tokenized 2`] = `
Array [
  Object {
    "indent": 0,
    "raw": "a paragraph of <u>words</u> \`first code\` normal text here \`code body\` *first italics* here me crying *italic body* here me crying **first bolds** some normal again **bold body** [Kiran Parajuli](https://kiranparajuli.com.np) ~~strikes body~~ here some",
    "type": "paragraph",
    "value": "a paragraph of <u>words</u> \`first code\` normal text here \`code body\` *first italics* here me crying *italic body* here me crying **first bolds** some normal again **bold body** [Kiran Parajuli](https://kiranparajuli.com.np) ~~strikes body~~ here some",
  },
]
`;

exports[`lexer paragraph should be deep tokenized 3`] = `
Array [
  Object {
    "indent": 0,
    "raw": "now with __underlined text__ within some ___underl_ined_text___",
    "type": "paragraph",
    "value": "now with __underlined text__ within some ___underl_ined_text___",
  },
]
`;

exports[`lexer paragraph should be separated with different indent 1`] = `
Array [
  Object {
    "indent": 2,
    "raw": "  abc
  def",
    "type": "paragraph",
    "value": "  abc def",
  },
  Object {
    "indent": 4,
    "raw": "    ghi
    jkl",
    "type": "paragraph",
    "value": "    ghi jkl",
  },
]
`;

exports[`lexer paragraph should be separated with other tokens 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "abc",
    "type": "paragraph",
    "value": "abc",
  },
  Object {
    "indent": 0,
    "level": 1,
    "raw": "# one",
    "type": "heading",
    "value": "one",
  },
  Object {
    "indent": 0,
    "raw": "def",
    "type": "paragraph",
    "value": "def",
  },
]
`;

exports[`lexer paragraph should merge consecutive paragraph not separated by other tokens 1`] = `
Array [
  Object {
    "indent": 2,
    "raw": "  abc
  def",
    "type": "paragraph",
    "value": "  abc def",
  },
]
`;

exports[`lexer quote other tokens should break laziness 1`] = `
Array [
  Object {
    "depth": 1,
    "indent": 0,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " one quote",
          "type": "paragraph",
          "value": " one quote",
        },
        Object {
          "indent": 1,
          "level": 1,
          "raw": " # two quote",
          "type": "heading",
          "value": "two quote",
        },
      ],
    ],
    "type": "quote",
  },
  Object {
    "indent": 0,
    "raw": "three quote",
    "type": "paragraph",
    "value": "three quote",
  },
]
`;

exports[`lexer quote other tokens should break laziness 2`] = `
Array [
  Object {
    "depth": 1,
    "indent": 0,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " one quote
 two quote",
          "type": "paragraph",
          "value": " one quote two quote",
        },
      ],
    ],
    "type": "quote",
  },
  Object {
    "indent": 0,
    "level": 1,
    "raw": "# three quote",
    "type": "heading",
    "value": "three quote",
  },
]
`;

exports[`lexer quote should allow laziness for plain paragraph 1`] = `
Array [
  Object {
    "depth": 1,
    "indent": 0,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " one quote
 two quote
three quote",
          "type": "paragraph",
          "value": " one quote two quote three quote",
        },
      ],
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote '  > > > quote \`four\` with ~~five~~' 1`] = `
Array [
  Object {
    "depth": 3,
    "indent": 2,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " quote \`four\` with ~~five~~",
          "type": "paragraph",
          "value": " quote \`four\` with ~~five~~",
        },
      ],
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote '  > quote \`four\` with ~~five~~' 1`] = `
Array [
  Object {
    "depth": 1,
    "indent": 2,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " quote \`four\` with ~~five~~",
          "type": "paragraph",
          "value": " quote \`four\` with ~~five~~",
        },
      ],
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote '> > > > quote [link-title](link-url) with *two*' 1`] = `
Array [
  Object {
    "depth": 4,
    "indent": 0,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " quote [link-title](link-url) with *two*",
          "type": "paragraph",
          "value": " quote [link-title](link-url) with *two*",
        },
      ],
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote '> > quote **one** with *two*' 1`] = `
Array [
  Object {
    "depth": 2,
    "indent": 0,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " quote **one** with *two*",
          "type": "paragraph",
          "value": " quote **one** with *two*",
        },
      ],
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote '> quote **one** with *two*' 1`] = `
Array [
  Object {
    "depth": 1,
    "indent": 0,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " quote **one** with *two*",
          "type": "paragraph",
          "value": " quote **one** with *two*",
        },
      ],
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote '> quote [link-title](link-url) with *two*' 1`] = `
Array [
  Object {
    "depth": 1,
    "indent": 0,
    "tokens": Array [
      Array [
        Object {
          "indent": 1,
          "raw": " quote [link-title](link-url) with *two*",
          "type": "paragraph",
          "value": " quote [link-title](link-url) with *two*",
        },
      ],
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should lexify multiline quote with the same depth and indent 1`] = `
Array [
  Object {
    "depth": 1,
    "indent": 0,
    "tokens": Array [
      Object {
        "depth": 2,
        "type": "quote",
        "value": Array [
          Object {
            "indent": 1,
            "raw": " zero f
 one f",
            "type": "paragraph",
            "value": " zero f one f",
          },
          Object {
            "type": "new-line",
          },
        ],
      },
      Array [
        Object {
          "indent": 1,
          "raw": " one",
          "type": "paragraph",
          "value": " one",
        },
        Object {
          "indent": 1,
          "level": 1,
          "raw": " # two",
          "type": "heading",
          "value": "two",
        },
      ],
      Object {
        "depth": 1,
        "type": "quote",
        "value": Array [
          Object {
            "indent": 1,
            "raw": " three",
            "type": "paragraph",
            "value": " three",
          },
        ],
      },
      Object {
        "depth": 2,
        "type": "quote",
        "value": Array [
          Object {
            "indent": 1,
            "raw": " four",
            "type": "paragraph",
            "value": " four",
          },
        ],
      },
      Object {
        "depth": 3,
        "type": "quote",
        "value": Array [
          Object {
            "indent": 1,
            "raw": " d-five",
            "type": "paragraph",
            "value": " d-five",
          },
          Object {
            "indent": 1,
            "level": 1,
            "raw": " # five",
            "type": "heading",
            "value": "five",
          },
          Object {
            "indent": 1,
            "level": 2,
            "raw": " ## six",
            "type": "heading",
            "value": "six",
          },
          Object {
            "indent": 1,
            "raw": " seven
simple para",
            "type": "paragraph",
            "value": " seven simple para",
          },
        ],
      },
    ],
    "type": "quote",
  },
]
`;

exports[`lexer table cell count cell count should break the table 1 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "indent": 0,
    "raw": "| row 2 c1 |",
    "type": "paragraph",
    "value": "| row 2 c1 |",
  },
]
`;

exports[`lexer table cell count cell count should break the table 2 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table heading body separator should parse a table with separator: '| :-------: | :---------: |' 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
      Array [
        Object {
          "raw": " row 2 c1 ",
          "value": "row 2 c1",
        },
        Object {
          "raw": " row 2 c2 ",
          "value": "row 2 c2",
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table heading body separator should parse a table with separator: '| ------- | --------- |' 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
      Array [
        Object {
          "raw": " row 2 c1 ",
          "value": "row 2 c1",
        },
        Object {
          "raw": " row 2 c2 ",
          "value": "row 2 c2",
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table heading body separator should parse a table with separator: '|:-------:|:---------:|' 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
      Array [
        Object {
          "raw": " row 2 c1 ",
          "value": "row 2 c1",
        },
        Object {
          "raw": " row 2 c2 ",
          "value": "row 2 c2",
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table heading body separator should parse a table with separator: '|-------|-------|' 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
      Array [
        Object {
          "raw": " row 2 c1 ",
          "value": "row 2 c1",
        },
        Object {
          "raw": " row 2 c2 ",
          "value": "row 2 c2",
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table indentation different indent header -> separator 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "| column 1 | column 2 |",
    "type": "paragraph",
    "value": "| column 1 | column 2 |",
  },
  Object {
    "indent": 2,
    "raw": "  |---|---|",
    "type": "paragraph",
    "value": "  |---|---|",
  },
  Object {
    "indent": 0,
    "raw": "| row 1 c1 | row 1 c2 |",
    "type": "paragraph",
    "value": "| row 1 c1 | row 1 c2 |",
  },
]
`;

exports[`lexer table indentation different indent header, separator -> body row 1`] = `
Array [
  Object {
    "indent": 2,
    "raw": "  | column 1 | column 2 |
  |---|---|",
    "type": "paragraph",
    "value": "  | column 1 | column 2 | |---|---|",
  },
  Object {
    "indent": 0,
    "raw": "| row 1 c1 | row 1 c2 |",
    "type": "paragraph",
    "value": "| row 1 c1 | row 1 c2 |",
  },
]
`;

exports[`lexer table indentation indent should break the table 1 1`] = `
Array [
  Object {
    "indent": 2,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "indent": 0,
    "raw": "| row 2 c1 | row 2 c2 |",
    "type": "paragraph",
    "value": "| row 2 c1 | row 2 c2 |",
  },
]
`;

exports[`lexer table indentation indent should break the table 2 1`] = `
Array [
  Object {
    "indent": 2,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table indentation the indented table 1`] = `
Array [
  Object {
    "indent": 2,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table is not a table false separator 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "| column 1 | column 2 |
| --- |--|
| row 1 c1 | row 1 c2 |",
    "type": "paragraph",
    "value": "| column 1 | column 2 | | --- |--| | row 1 c1 | row 1 c2 |",
  },
]
`;

exports[`lexer table is not a table only header 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "| column 1 | column 2 |",
    "type": "paragraph",
    "value": "| column 1 | column 2 |",
  },
]
`;

exports[`lexer table is not a table only header and separator 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "| column 1 | column 2 |
|---|---|",
    "type": "paragraph",
    "value": "| column 1 | column 2 | |---|---|",
  },
]
`;

exports[`lexer table is not a table other tokens in between 1 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "| column 1 | column 2 |",
    "type": "paragraph",
    "value": "| column 1 | column 2 |",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "raw": "|---|---|
| row 1 c1 | row 1 c2 |",
    "type": "paragraph",
    "value": "|---|---| | row 1 c1 | row 1 c2 |",
  },
]
`;

exports[`lexer table is not a table other tokens in between 2 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "| column 1 | column 2 |
|---|---|",
    "type": "paragraph",
    "value": "| column 1 | column 2 | |---|---|",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "raw": "| row 1 c1 | row 1 c2 |",
    "type": "paragraph",
    "value": "| row 1 c1 | row 1 c2 |",
  },
]
`;

exports[`lexer table is not a table other tokens in between 3 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "value": "column 1",
        },
        Object {
          "raw": " column 2 ",
          "value": "column 2",
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "value": "row 1 c1",
        },
        Object {
          "raw": " row 1 c2 ",
          "value": "row 1 c2",
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "raw": "| row 2 c1 | row 2 c2 |",
    "type": "paragraph",
    "value": "| row 2 c1 | row 2 c2 |",
  },
]
`;
