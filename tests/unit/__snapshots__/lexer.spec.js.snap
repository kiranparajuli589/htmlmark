// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lexer codeblock should cope with multiple items 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "tokens": Array [
      Object {
        "value": "const a = 1",
      },
    ],
    "type": "code-block",
  },
  Object {
    "indent": 0,
    "raw": "some people are funny",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "some people are funny",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer codeblock should parse multiple consequetive codeblocks 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "tokens": Array [
      Object {
        "value": "const a = 1",
      },
    ],
    "type": "code-block",
  },
  Object {
    "indent": 0,
    "language": "js",
    "tokens": Array [
      Object {
        "value": "const b = 2",
      },
    ],
    "type": "code-block",
  },
]
`;

exports[`lexer codeblock should parse the codeblock 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "tokens": Array [
      Object {
        "value": "const a = 1",
      },
    ],
    "type": "code-block",
  },
]
`;

exports[`lexer codeblock should parse the codeblock with multiple lines 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "tokens": Array [
      Object {
        "value": "const a = 1
const b = 2",
      },
    ],
    "type": "code-block",
  },
]
`;

exports[`lexer codeblock should parse the codeblock with multiple lines and a newline 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "tokens": Array [
      Object {
        "value": "const a = 1
const b = 2

const c = 3",
      },
    ],
    "type": "code-block",
  },
]
`;

exports[`lexer codeblock should parse the codeblock without the language 1`] = `
Array [
  Object {
    "indent": 0,
    "language": null,
    "tokens": Array [
      Object {
        "value": "const a = 1",
      },
    ],
    "type": "code-block",
  },
]
`;

exports[`lexer common tokens should parse the common tokens 1`] = `
Array [
  Object {
    "indent": 0,
    "level": 1,
    "raw": "# Heading One Text",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading One Text",
      },
    ],
    "type": "heading",
  },
]
`;

exports[`lexer common tokens should parse the common tokens 2`] = `
Array [
  Object {
    "indent": 0,
    "level": 2,
    "raw": "## Heading Two Text",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Two Text",
      },
    ],
    "type": "heading",
  },
]
`;

exports[`lexer common tokens should parse the common tokens 3`] = `
Array [
  Object {
    "indent": 0,
    "level": 3,
    "raw": "### Heading Three Text",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Three Text",
      },
    ],
    "type": "heading",
  },
]
`;

exports[`lexer common tokens should parse the common tokens 4`] = `
Array [
  Object {
    "indent": 0,
    "level": 4,
    "raw": "#### Heading Four Text",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Four Text",
      },
    ],
    "type": "heading",
  },
]
`;

exports[`lexer common tokens should parse the common tokens 5`] = `
Array [
  Object {
    "indent": 0,
    "level": 5,
    "raw": "##### Heading Five Text",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Five Text",
      },
    ],
    "type": "heading",
  },
]
`;

exports[`lexer common tokens should parse the common tokens 6`] = `
Array [
  Object {
    "indent": 0,
    "level": 6,
    "raw": "###### Heading Six Text",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Six Text",
      },
    ],
    "type": "heading",
  },
]
`;

exports[`lexer common tokens should parse the common tokens 7`] = `
Array [
  Object {
    "indent": 0,
    "raw": "<!-- comment item text -->",
    "tokens": Object {
      "value": "comment item text",
    },
    "type": "comment",
  },
]
`;

exports[`lexer common tokens should parse the common tokens 8`] = `
Array [
  Object {
    "indent": 0,
    "raw": "![alt text](image.png)",
    "tokens": Object {
      "alt": "alt text",
      "url": "image.png",
    },
    "type": "image",
  },
]
`;

exports[`lexer hr line should parse the hr line 1`] = `
Array [
  Object {
    "type": "hr-line",
  },
]
`;

exports[`lexer list indent should break the list 1`] = `
Array [
  Object {
    "checkList": false,
    "indent": 2,
    "items": Array [
      Object {
        "countText": "-",
        "raw": "  - item **1**",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item ",
          },
          Object {
            "type": "bold",
            "value": "1",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "-",
        "raw": "  - item [link](link-url)",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item ",
          },
          Object {
            "href": "link-url",
            "type": "link",
            "value": "link",
          },
        ],
        "type": "count-item",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  Object {
    "checkList": false,
    "indent": 0,
    "items": Array [
      Object {
        "countText": "-",
        "raw": "- item 3 \`code item\`",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item 3 ",
          },
          Object {
            "type": "code",
            "value": "code item",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "-",
        "raw": "- item 4",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item 4",
          },
        ],
        "type": "count-item",
      },
    ],
    "ordered": false,
    "type": "list",
  },
]
`;

exports[`lexer list should tokenize a valid ordered list 1`] = `
Array [
  Object {
    "checkList": false,
    "indent": 0,
    "items": Array [
      Object {
        "countText": "1.",
        "raw": "1. item **1**",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item ",
          },
          Object {
            "type": "bold",
            "value": "1",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "1.",
        "raw": "1. item [link](link-url)",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item ",
          },
          Object {
            "href": "link-url",
            "type": "link",
            "value": "link",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "1.",
        "raw": "1. item 3 \`code item\`",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item 3 ",
          },
          Object {
            "type": "code",
            "value": "code item",
          },
        ],
        "type": "count-item",
      },
    ],
    "ordered": true,
    "type": "list",
  },
]
`;

exports[`lexer list should tokenize a valid un-ordered list 1`] = `
Array [
  Object {
    "checkList": false,
    "indent": 0,
    "items": Array [
      Object {
        "countText": "-",
        "raw": "- item **1**",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item ",
          },
          Object {
            "type": "bold",
            "value": "1",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "-",
        "raw": "- item [link](link-url)",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item ",
          },
          Object {
            "href": "link-url",
            "type": "link",
            "value": "link",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "-",
        "raw": "- item 3 \`code item\`",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "item 3 ",
          },
          Object {
            "type": "code",
            "value": "code item",
          },
        ],
        "type": "count-item",
      },
    ],
    "ordered": false,
    "type": "list",
  },
]
`;

exports[`lexer paragraph should be deep tokenized 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "a paragraph of words \`first code\` normal text here \`code body\` *first italics* here me crying *italic body* here me crying **first bolds** some normal again **bold body** [Kiran Parajuli](https://kiranparajuli.com.np) ~~strikes body~~ here some",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "a paragraph of words ",
      },
      Object {
        "type": "code",
        "value": "first code",
      },
      Object {
        "type": "text",
        "value": " normal text here ",
      },
      Object {
        "type": "code",
        "value": "code body",
      },
      Object {
        "type": "text",
        "value": " ",
      },
      Object {
        "type": "italic",
        "value": "first italics",
      },
      Object {
        "type": "text",
        "value": " here me crying ",
      },
      Object {
        "type": "italic",
        "value": "italic body",
      },
      Object {
        "type": "text",
        "value": " here me crying ",
      },
      Object {
        "type": "bold",
        "value": "first bolds",
      },
      Object {
        "type": "text",
        "value": " some normal again ",
      },
      Object {
        "type": "bold",
        "value": "bold body",
      },
      Object {
        "type": "text",
        "value": " ",
      },
      Object {
        "href": "https://kiranparajuli.com.np",
        "type": "link",
        "value": "Kiran Parajuli",
      },
      Object {
        "type": "text",
        "value": " ",
      },
      Object {
        "type": "strike-through",
        "value": "strikes body",
      },
      Object {
        "type": "text",
        "value": " here some",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer quote should deep tokenize quote with multiple depth 1`] = `
Array [
  Object {
    "depth": 1,
    "indent": 0,
    "raw": "> > quote **one** with *two*",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "quote ",
      },
      Object {
        "type": "bold",
        "value": "one",
      },
      Object {
        "type": "text",
        "value": " with ",
      },
      Object {
        "type": "italic",
        "value": "two",
      },
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote with multiple depth 2`] = `
Array [
  Object {
    "depth": 2,
    "indent": 2,
    "raw": "  > > > quote \`four\` with ~~five~~",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "quote ",
      },
      Object {
        "type": "code",
        "value": "four",
      },
      Object {
        "type": "text",
        "value": " with ",
      },
      Object {
        "type": "strike-through",
        "value": "five",
      },
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote with multiple depth 3`] = `
Array [
  Object {
    "depth": 3,
    "indent": 0,
    "raw": "> > > > quote [link-title](link-url) with *two*",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "quote ",
      },
      Object {
        "href": "link-url",
        "type": "link",
        "value": "link-title",
      },
      Object {
        "type": "text",
        "value": " with ",
      },
      Object {
        "type": "italic",
        "value": "two",
      },
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote with zero depth 1`] = `
Array [
  Object {
    "depth": 0,
    "indent": 0,
    "raw": "> quote **one** with *two*",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "quote ",
      },
      Object {
        "type": "bold",
        "value": "one",
      },
      Object {
        "type": "text",
        "value": " with ",
      },
      Object {
        "type": "italic",
        "value": "two",
      },
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote with zero depth 2`] = `
Array [
  Object {
    "depth": 0,
    "indent": 2,
    "raw": "  > quote \`four\` with ~~five~~",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "quote ",
      },
      Object {
        "type": "code",
        "value": "four",
      },
      Object {
        "type": "text",
        "value": " with ",
      },
      Object {
        "type": "strike-through",
        "value": "five",
      },
    ],
    "type": "quote",
  },
]
`;

exports[`lexer quote should deep tokenize quote with zero depth 3`] = `
Array [
  Object {
    "depth": 0,
    "indent": 0,
    "raw": "> quote [link-title](link-url) with *two*",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "quote ",
      },
      Object {
        "href": "link-url",
        "type": "link",
        "value": "link-title",
      },
      Object {
        "type": "text",
        "value": " with ",
      },
      Object {
        "type": "italic",
        "value": "two",
      },
    ],
    "type": "quote",
  },
]
`;

exports[`lexer should tokenize a markdown content 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "<!-- https://regex101.com/r/C6SxZH/1 -->",
    "tokens": Object {
      "value": "https://regex101.com/r/C6SxZH/1",
    },
    "type": "comment",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "level": 1,
    "raw": "# Heading One",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading One",
      },
    ],
    "type": "heading",
  },
  Object {
    "indent": 0,
    "level": 2,
    "raw": "## Heading Two",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Two",
      },
    ],
    "type": "heading",
  },
  Object {
    "indent": 0,
    "level": 3,
    "raw": "### Heading Three",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Three",
      },
    ],
    "type": "heading",
  },
  Object {
    "indent": 0,
    "level": 4,
    "raw": "#### Heading Four",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Four",
      },
    ],
    "type": "heading",
  },
  Object {
    "indent": 0,
    "level": 5,
    "raw": "##### Heading Five",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Five",
      },
    ],
    "type": "heading",
  },
  Object {
    "indent": 0,
    "level": 6,
    "raw": "###### Heading Six",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "Heading Six",
      },
    ],
    "type": "heading",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "raw": "a paragraph of words \`first code\` normal text here \`code body\` *first italics* here me crying *italic body* here me crying **first bolds** some normal again **bold body** [Kiran Parajuli](https://kiranparajuli.com.np) ~~strikes body~~ here some normal again at the last",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "a paragraph of words ",
      },
      Object {
        "type": "code",
        "value": "first code",
      },
      Object {
        "type": "text",
        "value": " normal text here ",
      },
      Object {
        "type": "code",
        "value": "code body",
      },
      Object {
        "type": "text",
        "value": " ",
      },
      Object {
        "type": "italic",
        "value": "first italics",
      },
      Object {
        "type": "text",
        "value": " here me crying ",
      },
      Object {
        "type": "italic",
        "value": "italic body",
      },
      Object {
        "type": "text",
        "value": " here me crying ",
      },
      Object {
        "type": "bold",
        "value": "first bolds",
      },
      Object {
        "type": "text",
        "value": " some normal again ",
      },
      Object {
        "type": "bold",
        "value": "bold body",
      },
      Object {
        "type": "text",
        "value": " ",
      },
      Object {
        "href": "https://kiranparajuli.com.np",
        "type": "link",
        "value": "Kiran Parajuli",
      },
      Object {
        "type": "text",
        "value": " ",
      },
      Object {
        "type": "strike-through",
        "value": "strikes body",
      },
      Object {
        "type": "text",
        "value": " here some normal again at the last",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "depth": 0,
    "indent": 0,
    "raw": "> some quote",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "some quote",
      },
    ],
    "type": "quote",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "checkList": false,
    "indent": 0,
    "items": Array [
      Object {
        "countText": "-",
        "raw": "- list item 1",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "list item 1",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "-",
        "raw": "- list item 2
",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "list item 2",
          },
        ],
        "type": "count-item",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  Object {
    "checkList": true,
    "indent": 0,
    "items": Array [
      Object {
        "checked": false,
        "countText": "-",
        "raw": "- [ ] checkbox empty",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "checkbox empty",
          },
        ],
        "type": "check-item",
      },
      Object {
        "checked": true,
        "countText": "-",
        "raw": "- [x] checkbox checked
",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "checkbox checked",
          },
        ],
        "type": "check-item",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  Object {
    "indent": 4,
    "raw": "    paragraph just below hmm, but with some indentation",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "paragraph just below hmm, but with some indentation",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "depth": 0,
    "indent": 0,
    "raw": "> quote 1",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "quote 1",
      },
    ],
    "type": "quote",
  },
  Object {
    "depth": 1,
    "indent": 0,
    "raw": "> > nested quote 2 [quote-link](quote-link-url)",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "nested quote 2 ",
      },
      Object {
        "href": "quote-link-url",
        "type": "link",
        "value": "quote-link",
      },
    ],
    "type": "quote",
  },
  Object {
    "depth": 2,
    "indent": 0,
    "raw": "> > > nested quote 3 with *italics* and **bolds**",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "nested quote 3 with ",
      },
      Object {
        "type": "italic",
        "value": "italics",
      },
      Object {
        "type": "text",
        "value": " and ",
      },
      Object {
        "type": "bold",
        "value": "bolds",
      },
    ],
    "type": "quote",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "language": "js",
    "tokens": Array [
      Object {
        "value": "const a = 1;
const b = 1;
const c = a + b;

if (c === 2) {
  console.log('success');
} else {
  console.log('failure');
}",
      },
    ],
    "type": "code-block",
  },
  Object {
    "indent": 2,
    "raw": "  some line with small space ahead",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "some line with small space ahead",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "language": "js",
    "tokens": Array [
      Object {
        "value": "",
      },
    ],
    "type": "code-block",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "raw": "some piece of normal paragraph",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "some piece of normal paragraph",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "language": null,
    "tokens": Array [
      Object {
        "value": "another code block is here",
      },
    ],
    "type": "code-block",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "raw": "![Kiran Parajuli](https://avatars.githubusercontent.com/u/39373750?v=4)",
    "tokens": Object {
      "alt": "Kiran Parajuli",
      "url": "https://avatars.githubusercontent.com/u/39373750?v=4",
    },
    "type": "image",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "raw": "some random text",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "some random text",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 1",
            },
          ],
        },
        Object {
          "raw": " column 2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 2",
            },
          ],
        },
        Object {
          "raw": " column 3 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 3",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " r1 text c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r1 text c1",
            },
          ],
        },
        Object {
          "raw": " r1 text c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r1 text c2",
            },
          ],
        },
        Object {
          "raw": " r1 text c3 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r1 text c3",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " r2 text c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r2 text c1",
            },
          ],
        },
        Object {
          "raw": " r2 text c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r2 text c2",
            },
          ],
        },
        Object {
          "raw": " r2 text c3 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r2 text c3",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " r3 text c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r3 text c1",
            },
          ],
        },
        Object {
          "raw": " r3 text c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r3 text c2",
            },
          ],
        },
        Object {
          "raw": " r3 text c3 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r3 text c3",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " r4 text c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r4 text c1",
            },
          ],
        },
        Object {
          "raw": " r4 text c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r4 text c2",
            },
          ],
        },
        Object {
          "raw": " r5 text c3 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r5 text c3",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " r6 text c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r6 text c1",
            },
          ],
        },
        Object {
          "raw": " r6 text c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r6 text c2",
            },
          ],
        },
        Object {
          "raw": " r6 text c3 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "r6 text c3",
            },
          ],
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "indent": 0,
    "raw": "some random text again just below table",
    "tokens": Array [
      Object {
        "type": "text",
        "value": "some random text again just below table",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "type": "new-line",
  },
]
`;

exports[`lexer should tokenize list combination 1`] = `
Array [
  Object {
    "checkList": false,
    "indent": 0,
    "items": Array [
      Object {
        "countText": "-",
        "raw": "- one",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "one",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "-",
        "raw": "- two",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "two",
          },
        ],
        "type": "count-item",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  Object {
    "checkList": false,
    "indent": 0,
    "items": Array [
      Object {
        "countText": "1.",
        "raw": "1. one",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "one",
          },
        ],
        "type": "count-item",
      },
      Object {
        "countText": "2.",
        "raw": "2. two",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "two",
          },
        ],
        "type": "count-item",
      },
    ],
    "ordered": true,
    "type": "list",
  },
  Object {
    "checkList": true,
    "indent": 0,
    "items": Array [
      Object {
        "checked": false,
        "countText": "-",
        "raw": "- [ ] c empty",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "c empty",
          },
        ],
        "type": "check-item",
      },
      Object {
        "checked": true,
        "countText": "-",
        "raw": "- [x] c checked",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "c checked",
          },
        ],
        "type": "check-item",
      },
    ],
    "ordered": false,
    "type": "list",
  },
  Object {
    "checkList": true,
    "indent": 0,
    "items": Array [
      Object {
        "checked": false,
        "countText": "1.",
        "raw": "1. [ ] c empty",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "c empty",
          },
        ],
        "type": "check-item",
      },
      Object {
        "checked": true,
        "countText": "1.",
        "raw": "1. [x] c checked",
        "tokens": Array [
          Object {
            "type": "text",
            "value": "c checked",
          },
        ],
        "type": "check-item",
      },
    ],
    "ordered": true,
    "type": "list",
  },
]
`;

exports[`lexer table is not a table false separator 1`] = `
Array [
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| column 1 | column 2 |",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| --- | --- |",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| row 1 c1 | row 1 c2 |",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table is not a table only header 1`] = `
Array [
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| column 1 | column 2 |",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table is not a table only header and separator 1`] = `
Array [
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| column 1 | column 2 |",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "|---|---|",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table is not a table other tokens in between 1 1`] = `
Array [
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| column 1 | column 2 |",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "|---|---|",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| row 1 c1 | row 1 c2 |",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table is not a table other tokens in between 2 1`] = `
Array [
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| column 1 | column 2 |",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "|---|---|",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| row 1 c1 | row 1 c2 |",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table is not a table other tokens in between 3 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 1",
            },
          ],
        },
        Object {
          "raw": " column 2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c1",
            },
          ],
        },
        Object {
          "raw": " row 1 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c2",
            },
          ],
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| row 2 c1 | row 2 c2 |",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table table heading-body separator should parse a table 1`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 1",
            },
          ],
        },
        Object {
          "raw": " column 2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c1",
            },
          ],
        },
        Object {
          "raw": " row 1 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 2 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 2 c1",
            },
          ],
        },
        Object {
          "raw": " row 2 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 2 c2",
            },
          ],
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table table heading-body separator should parse a table 2`] = `
Array [
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 1",
            },
          ],
        },
        Object {
          "raw": " column 2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c1",
            },
          ],
        },
        Object {
          "raw": " row 1 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 2 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 2 c1",
            },
          ],
        },
        Object {
          "raw": " row 2 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 2 c2",
            },
          ],
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table table indent different indent header -> separator 1`] = `
Array [
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| column 1 | column 2 |",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 2,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "  |---|---|",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| row 1 c1 | row 1 c2 |",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table table indent different indent header, separator -> body row 1`] = `
Array [
  Object {
    "indent": 2,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "  | column 1 | column 2 |",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 2,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "  |---|---|",
      },
    ],
    "type": "paragraph",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| row 1 c1 | row 1 c2 |",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table table indent indent should break the table 1 1`] = `
Array [
  Object {
    "indent": 2,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 1",
            },
          ],
        },
        Object {
          "raw": " column 2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c1",
            },
          ],
        },
        Object {
          "raw": " row 1 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c2",
            },
          ],
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "indent": 0,
    "tokens": Array [
      Object {
        "type": "text",
        "value": "| row 2 c1 | row 2 c2 |",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`lexer table table indent indent should break the table 2 1`] = `
Array [
  Object {
    "indent": 2,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 1",
            },
          ],
        },
        Object {
          "raw": " column 2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c1",
            },
          ],
        },
        Object {
          "raw": " row 1 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c2",
            },
          ],
        },
      ],
    ],
    "type": "table",
  },
  Object {
    "indent": 0,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 1",
            },
          ],
        },
        Object {
          "raw": " column 2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c1",
            },
          ],
        },
        Object {
          "raw": " row 1 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c2",
            },
          ],
        },
      ],
    ],
    "type": "table",
  },
]
`;

exports[`lexer table table indent the indented table 1`] = `
Array [
  Object {
    "indent": 2,
    "rows": Array [
      Array [
        Object {
          "raw": " column 1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 1",
            },
          ],
        },
        Object {
          "raw": " column 2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "column 2",
            },
          ],
        },
      ],
      Array [
        Object {
          "raw": " row 1 c1 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c1",
            },
          ],
        },
        Object {
          "raw": " row 1 c2 ",
          "tokens": Array [
            Object {
              "type": "text",
              "value": "row 1 c2",
            },
          ],
        },
      ],
    ],
    "type": "table",
  },
]
`;
