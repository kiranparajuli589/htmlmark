// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codeblock should accept long but equal ticked code blocks 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "example",
    "raw": "\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
===
.
<p>===</p>
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`",
    "type": "code-block",
    "value": "===
.
<p>===</p>",
  },
  Object {
    "type": "new-line",
  },
]
`;

exports[`codeblock should be set just with indentation bigger or equals to 4 at top 1`] = `
Array [
  Object {
    "indent": 4,
    "language": null,
    "raw": "    one
          two
    three",
    "type": "code-block",
    "value": "one
      two
three",
  },
  Object {
    "indent": 0,
    "raw": "four",
    "tokens": Array [
      Object {
        "raw": "four",
        "type": "text",
        "value": "four",
      },
    ],
    "type": "paragraph",
    "value": "four",
  },
]
`;

exports[`codeblock should be set just with indentation bigger or equals to 4 below newline 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "zero one two",
    "tokens": Array [
      Object {
        "raw": "zero one two",
        "type": "text",
        "value": "zero one two",
      },
    ],
    "type": "paragraph",
    "value": "zero one two",
  },
  Object {
    "type": "new-line",
  },
  Object {
    "indent": 4,
    "language": null,
    "raw": "    one
          two
    three",
    "type": "code-block",
    "value": "one
      two
three",
  },
  Object {
    "indent": 0,
    "raw": "four",
    "tokens": Array [
      Object {
        "raw": "four",
        "type": "text",
        "value": "four",
      },
    ],
    "type": "paragraph",
    "value": "four",
  },
]
`;

exports[`codeblock should be set just with indentation bigger or equals to 4 but consecutive with other tokens 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "zero one two
    one
          two
    three
four",
    "tokens": Array [
      Object {
        "raw": "zero one two     one           two     three four",
        "type": "text",
        "value": "zero one two     one           two     three four",
      },
    ],
    "type": "paragraph",
    "value": "zero one two     one           two     three four",
  },
]
`;

exports[`codeblock should be work just fine within a list item 1`] = `
Array [
  Object {
    "indent": 0,
    "items": Array [
      Object {
        "checked": null,
        "count": "4",
        "raw": "4.  What is the exact rule for determining when list items get
	wrapped in \`<p>\` tags?  Can a list be partially \\"loose\\" and partially
	\\"tight\\"?  What should we do with a list like this?

		\`\`\` markdown
		1. one

		2. two
		3. three
		\`\`\`",
        "tokens": Array [
          Object {
            "indent": 0,
            "raw": "What is the exact rule for determining when list items get
	wrapped in \`<p>\` tags?  Can a list be partially \\"loose\\" and partially
	\\"tight\\"?  What should we do with a list like this?",
            "tokens": Array [
              Object {
                "raw": "What is the exact rule for determining when list items get 	wrapped in ",
                "type": "text",
                "value": "What is the exact rule for determining when list items get 	wrapped in ",
              },
              Object {
                "raw": "\`<p>\`",
                "type": "code",
                "value": "<p>",
              },
              Object {
                "raw": " tags?  Can a list be partially \\"loose\\" and partially 	\\"tight\\"?  What should we do with a list like this?",
                "type": "text",
                "value": " tags?  Can a list be partially \\"loose\\" and partially 	\\"tight\\"?  What should we do with a list like this?",
              },
            ],
            "type": "paragraph",
            "value": "What is the exact rule for determining when list items get 	wrapped in \`<p>\` tags?  Can a list be partially \\"loose\\" and partially 	\\"tight\\"?  What should we do with a list like this?",
          },
          Object {
            "type": "new-line",
          },
          Object {
            "indent": 8,
            "language": "markdown",
            "raw": "		\`\`\` markdown
		1. one

		2. two
		3. three
		\`\`\`",
            "type": "code-block",
            "value": "1. one

2. two
3. three",
          },
        ],
        "type": "list-item",
      },
    ],
    "meta": Object {
      "checklist": false,
      "identifier": null,
      "ordered": true,
    },
    "raw": "4.  What is the exact rule for determining when list items get
	wrapped in \`<p>\` tags?  Can a list be partially \\"loose\\" and partially
	\\"tight\\"?  What should we do with a list like this?

		\`\`\` markdown
		1. one

		2. two
		3. three
		\`\`\`",
    "type": "list",
  },
  Object {
    "type": "new-line",
  },
]
`;

exports[`codeblock should cope with empty body 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
\`\`\`",
    "type": "code-block",
    "value": "",
  },
]
`;

exports[`codeblock should cope with multiple items 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
const a = 1
\`\`\`",
    "type": "code-block",
    "value": "const a = 1",
  },
  Object {
    "indent": 0,
    "raw": "some people are funny",
    "tokens": Array [
      Object {
        "raw": "some people are funny",
        "type": "text",
        "value": "some people are funny",
      },
    ],
    "type": "paragraph",
    "value": "some people are funny",
  },
]
`;

exports[`codeblock should detect acceptable indent for closing codeblock 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
const a = 1
const b = 2
const c = 3
   \`\`\`",
    "type": "code-block",
    "value": "const a = 1
const b = 2
const c = 3",
  },
]
`;

exports[`codeblock should detect mis-indented closing codeblock 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
const a = 1
const b = 2
const c = 3
    \`\`\`",
    "type": "code-block",
    "value": "const a = 1
const b = 2
const c = 3
    \`\`\`",
  },
]
`;

exports[`codeblock should not be broken with acceptable wrong indent 1`] = `
Array [
  Object {
    "indent": 0,
    "language": null,
    "raw": "   \`\`\`
abcd
   \`\`\`",
    "type": "code-block",
    "value": "abcd",
  },
]
`;

exports[`codeblock should parse multiple consecutive codeblocks 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
const a = 1
\`\`\`",
    "type": "code-block",
    "value": "const a = 1",
  },
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
const b = 2
\`\`\`",
    "type": "code-block",
    "value": "const b = 2",
  },
]
`;

exports[`codeblock should parse the codeblock 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
const a = 1
\`\`\`",
    "type": "code-block",
    "value": "const a = 1",
  },
]
`;

exports[`codeblock should parse the codeblock with multiple lines 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
const a = 1
const b = 2
\`\`\`",
    "type": "code-block",
    "value": "const a = 1
const b = 2",
  },
]
`;

exports[`codeblock should parse the codeblock with multiple lines and a newline 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "js",
    "raw": "\`\`\`js
const a = 1
  const b = 2

const c = 3
\`\`\`",
    "type": "code-block",
    "value": "const a = 1
  const b = 2

const c = 3",
  },
]
`;

exports[`codeblock should parse the codeblock without the language 1`] = `
Array [
  Object {
    "indent": 0,
    "language": null,
    "raw": "\`\`\`
const a = 1
\`\`\`",
    "type": "code-block",
    "value": "const a = 1",
  },
]
`;

exports[`codeblock should remove the link refs inside codeblock but do not change the usage 1`] = `
Array [
  Object {
    "indent": 0,
    "language": "markdown",
    "raw": "\`\`\` markdown

[foo][]
\`\`\`",
    "type": "code-block",
    "value": "
[foo][]",
  },
]
`;

exports[`codeblock should set incomplete codeblock as a code block 1`] = `
Array [
  Object {
    "indent": 0,
    "raw": "some line",
    "tokens": Array [
      Object {
        "raw": "some line",
        "type": "text",
        "value": "some line",
      },
    ],
    "type": "paragraph",
    "value": "some line",
  },
  Object {
    "indent": 4,
    "language": "js",
    "raw": "    \`\`\`js
    const a = 1
    const b = 2",
    "type": "code-block",
    "value": "const a = 1
const b = 2",
  },
  Object {
    "indent": 0,
    "raw": "here again",
    "tokens": Array [
      Object {
        "raw": "here again",
        "type": "text",
        "value": "here again",
      },
    ],
    "type": "paragraph",
    "value": "here again",
  },
]
`;
