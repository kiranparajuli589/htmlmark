// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Large MD To HTML should parse the large markdown file content to html 1`] = `
"<h1>Markdown: Syntax</h1><p><s>strikethrough</s></p><p><strong>Note:</strong> This document is itself written using Markdown; you can <a href=\\"/projects/markdown/syntax.text\\">see the source for it by adding &#39;.text&#39; to the URL</a>.</p><hr><h2>Overview</h2><h3>Philosophy</h3><p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p><p>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it&#39;s been marked up with tags or formatting instructions. While Markdown&#39;s syntax has been influenced by several existing text-to-HTML filters -- including <a href=\\"http://docutils.sourceforge.net/mirror/setext.html\\">Setext</a>, <a href=\\"http://www.aaronsw.com/2002/atx/\\">atx</a>, <a href=\\"http://textism.com/tools/textile/\\">Textile</a>, <a href=\\"http://docutils.sourceforge.net/rst.html\\">reStructuredText</a>, <a href=\\"http://www.triptico.com/software/grutatxt.html\\">Grutatext</a>, and <a href=\\"http://ettext.taint.org/doc/\\">EtText</a> -- the single biggest source of inspiration for Markdown&#39;s syntax is the format of plain text email.</p><h2>Block Elements</h2><h3>Paragraphs and Line Breaks</h3><p>A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.</p><p>The implication of the &quot;one or more consecutive lines of text&quot; rule is that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type&#39;s &quot;Convert Line Breaks&quot; option) which translate every line break character in a paragraph into a <code>&lt;br /&gt;</code> tag.</p><p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you end a line with two or more spaces, then type return.</p><h3>Headers</h3><p>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].</p><p>Optionally, you may &quot;close&quot; atx-style headers. This is purely cosmetic -- you can use this if you think it looks better. The closing hashes don&#39;t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.)</p><h3>Blockquotes</h3><p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you&#39;re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a <code>&gt;</code> before every line:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse  id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first line of a hard-wrapped paragraph:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote>
<p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of <code>&gt;</code>:</p><blockquote>
<p> This is the first level of quoting.</p><blockquote>
<p> This is nested blockquote.</p></blockquote><p> Back to the first level.</p></blockquote><p>Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:</p><blockquote>
<h2>This is a header.</h2><ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol><p> Here&#39;s some example code:</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.</p><h3>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p><p>Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list markers:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>is equivalent to:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>and:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>Ordered lists use numbers followed by periods:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>It&#39;s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:</p><p>If you instead wrote the list in Markdown like this:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>or even:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>you&#39;d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don&#39;t have to.</p><p>To make lists look nice, you can wrap items with hanging indents:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>But if you want to be lazy, you don&#39;t have to:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:</p><ol>
<li>This is a list item with two paragraphs. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit. Aliquam hendrerit     mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet     vitae, risus. Donec sit amet nisl. Aliquam semper ipsum     sit amet velit.</li>
<li>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ol><p>It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:</p><ul>
<li>This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;re     only required to indent the first line. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit.</li>
<li>Another item in the same list.</li>
</ul><p>To put a blockquote within a list item, the blockquote&#39;s <code>&gt;</code> delimiters need to be indented:</p><ul>
<li>A list item with a blockquote:<blockquote>
<p> This is a blockquote  inside a list item.</p></blockquote></li>
</ul><p>To put a code block within a list item, the code block needs to be indented <em>twice</em> -- 8 spaces or two tabs:</p><ul>
<li>A list item with a code block:<pre><code>&lt;code goes here&gt;</code></pre></li>
</ul><h3>Code Blocks</h3><p>Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p><p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.</p><p>This is a normal paragraph:</p><pre><code>This is a code block.</code></pre><p>Here is an example of AppleScript:</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><p>A code block continues until it reaches a line that is not indented (or the end of the article).</p><p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown -- just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:</p>    <div class=\\"footer\\"><p>        &amp;copy; 2004 Foo Corporation</p><p>    </div></p><p>Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it&#39;s also easy to use Markdown to write about Markdown&#39;s own syntax.</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><h2>Span Elements</h2><h3>Links</h3><p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text&#39;s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an <em>optional</em> title for the link, surrounded in quotes. For example:</p><p>This is <a href=\\"http://example.com/\\">an example</a> inline link.</p><p><a href=\\"http://example.net/\\">This link</a> has no title attribute.</p><h3>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag; double <code>*</code>&#39;s or <code>_</code>&#39;s will be wrapped with an HTML <code>&lt;strong&gt;</code> tag. E.g., this input:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h3>Code</h3><p>To indicate a span of code, wrap it with backtick quotes (<code>\`</code>). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><p>Use the <code>printf()</code> function.</p><h1>Markdown: Syntax</h1><p><strong>Note:</strong> This document is itself written using Markdown; you can <a href=\\"/projects/markdown/syntax.text\\">see the source for it by adding &#39;.text&#39; to the URL</a>.</p><hr><h2>Overview</h2><h3>Philosophy</h3><p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p><p>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it&#39;s been marked up with tags or formatting instructions. While Markdown&#39;s syntax has been influenced by several existing text-to-HTML filters -- including <a href=\\"http://docutils.sourceforge.net/mirror/setext.html\\">Setext</a>, <a href=\\"http://www.aaronsw.com/2002/atx/\\">atx</a>, <a href=\\"http://textism.com/tools/textile/\\">Textile</a>, <a href=\\"http://docutils.sourceforge.net/rst.html\\">reStructuredText</a>, <a href=\\"http://www.triptico.com/software/grutatxt.html\\">Grutatext</a>, and <a href=\\"http://ettext.taint.org/doc/\\">EtText</a> -- the single biggest source of inspiration for Markdown&#39;s syntax is the format of plain text email.</p><h2>Block Elements</h2><h3>Paragraphs and Line Breaks</h3><p>A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.</p><p>The implication of the &quot;one or more consecutive lines of text&quot; rule is that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type&#39;s &quot;Convert Line Breaks&quot; option) which translate every line break character in a paragraph into a <code>&lt;br /&gt;</code> tag.</p><p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you end a line with two or more spaces, then type return.</p><h3>Headers</h3><p>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].</p><p>Optionally, you may &quot;close&quot; atx-style headers. This is purely cosmetic -- you can use this if you think it looks better. The closing hashes don&#39;t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.)</p><h3>Blockquotes</h3><p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you&#39;re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a <code>&gt;</code> before every line:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse  id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first line of a hard-wrapped paragraph:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote>
<p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of <code>&gt;</code>:</p><blockquote>
<p> This is the first level of quoting.</p><blockquote>
<p> This is nested blockquote.</p></blockquote><p> Back to the first level.</p></blockquote><p>Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:</p><blockquote>
<h2>This is a header.</h2><ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol><p> Here&#39;s some example code:</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.</p><h3>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p><p>Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list markers:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>is equivalent to:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>and:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>Ordered lists use numbers followed by periods:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>It&#39;s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:</p><p>If you instead wrote the list in Markdown like this:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>or even:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>you&#39;d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don&#39;t have to.</p><p>To make lists look nice, you can wrap items with hanging indents:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>But if you want to be lazy, you don&#39;t have to:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:</p><ol>
<li>This is a list item with two paragraphs. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit. Aliquam hendrerit     mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet     vitae, risus. Donec sit amet nisl. Aliquam semper ipsum     sit amet velit.</li>
<li>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ol><p>It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:</p><ul>
<li>This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;re     only required to indent the first line. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit.</li>
<li>Another item in the same list.</li>
</ul><p>To put a blockquote within a list item, the blockquote&#39;s <code>&gt;</code> delimiters need to be indented:</p><ul>
<li>A list item with a blockquote:<blockquote>
<p> This is a blockquote  inside a list item.</p></blockquote></li>
</ul><p>To put a code block within a list item, the code block needs to be indented <em>twice</em> -- 8 spaces or two tabs:</p><ul>
<li>A list item with a code block:<pre><code>&lt;code goes here&gt;</code></pre></li>
</ul><h3>Code Blocks</h3><p>Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p><p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.</p><p>This is a normal paragraph:</p><pre><code>This is a code block.</code></pre><p>Here is an example of AppleScript:</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><p>A code block continues until it reaches a line that is not indented (or the end of the article).</p><p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown -- just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:</p>    <div class=\\"footer\\"><p>        &amp;copy; 2004 Foo Corporation</p><p>    </div></p><p>Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it&#39;s also easy to use Markdown to write about Markdown&#39;s own syntax.</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><h2>Span Elements</h2><h3>Links</h3><p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text&#39;s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an <em>optional</em> title for the link, surrounded in quotes. For example:</p><p>This is <a href=\\"http://example.com/\\">an example</a> inline link.</p><p><a href=\\"http://example.net/\\">This link</a> has no title attribute.</p><h3>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag; double <code>*</code>&#39;s or <code>_</code>&#39;s will be wrapped with an HTML <code>&lt;strong&gt;</code> tag. E.g., this input:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h3>Code</h3><p>To indicate a span of code, wrap it with backtick quotes (<code>\`</code>). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><p>Use the <code>printf()</code> function.</p><h1>Markdown: Syntax</h1><p><strong>Note:</strong> This document is itself written using Markdown; you can <a href=\\"/projects/markdown/syntax.text\\">see the source for it by adding &#39;.text&#39; to the URL</a>.</p><hr><h2>Overview</h2><h3>Philosophy</h3><p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p><p>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it&#39;s been marked up with tags or formatting instructions. While Markdown&#39;s syntax has been influenced by several existing text-to-HTML filters -- including <a href=\\"http://docutils.sourceforge.net/mirror/setext.html\\">Setext</a>, <a href=\\"http://www.aaronsw.com/2002/atx/\\">atx</a>, <a href=\\"http://textism.com/tools/textile/\\">Textile</a>, <a href=\\"http://docutils.sourceforge.net/rst.html\\">reStructuredText</a>, <a href=\\"http://www.triptico.com/software/grutatxt.html\\">Grutatext</a>, and <a href=\\"http://ettext.taint.org/doc/\\">EtText</a> -- the single biggest source of inspiration for Markdown&#39;s syntax is the format of plain text email.</p><h2>Block Elements</h2><h3>Paragraphs and Line Breaks</h3><p>A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.</p><p>The implication of the &quot;one or more consecutive lines of text&quot; rule is that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type&#39;s &quot;Convert Line Breaks&quot; option) which translate every line break character in a paragraph into a <code>&lt;br /&gt;</code> tag.</p><p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you end a line with two or more spaces, then type return.</p><h3>Headers</h3><p>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].</p><p>Optionally, you may &quot;close&quot; atx-style headers. This is purely cosmetic -- you can use this if you think it looks better. The closing hashes don&#39;t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.)</p><h3>Blockquotes</h3><p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you&#39;re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a <code>&gt;</code> before every line:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse  id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first line of a hard-wrapped paragraph:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote>
<p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of <code>&gt;</code>:</p><blockquote>
<p> This is the first level of quoting.</p><blockquote>
<p> This is nested blockquote.</p></blockquote><p> Back to the first level.</p></blockquote><p>Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:</p><blockquote>
<h2>This is a header.</h2><ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol><p> Here&#39;s some example code:</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.</p><h3>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p><p>Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list markers:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>is equivalent to:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>and:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>Ordered lists use numbers followed by periods:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>It&#39;s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:</p><p>If you instead wrote the list in Markdown like this:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>or even:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>you&#39;d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don&#39;t have to.</p><p>To make lists look nice, you can wrap items with hanging indents:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>But if you want to be lazy, you don&#39;t have to:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:</p><ol>
<li>This is a list item with two paragraphs. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit. Aliquam hendrerit     mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet     vitae, risus. Donec sit amet nisl. Aliquam semper ipsum     sit amet velit.</li>
<li>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ol><p>It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:</p><ul>
<li>This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;re     only required to indent the first line. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit.</li>
<li>Another item in the same list.</li>
</ul><p>To put a blockquote within a list item, the blockquote&#39;s <code>&gt;</code> delimiters need to be indented:</p><ul>
<li>A list item with a blockquote:<blockquote>
<p> This is a blockquote  inside a list item.</p></blockquote></li>
</ul><p>To put a code block within a list item, the code block needs to be indented <em>twice</em> -- 8 spaces or two tabs:</p><ul>
<li>A list item with a code block:<pre><code>&lt;code goes here&gt;</code></pre></li>
</ul><h3>Code Blocks</h3><p>Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p><p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.</p><p>This is a normal paragraph:</p><pre><code>This is a code block.</code></pre><p>Here is an example of AppleScript:</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><p>A code block continues until it reaches a line that is not indented (or the end of the article).</p><p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown -- just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:</p>    <div class=\\"footer\\"><p>        &amp;copy; 2004 Foo Corporation</p><p>    </div></p><p>Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it&#39;s also easy to use Markdown to write about Markdown&#39;s own syntax.</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><h2>Span Elements</h2><h3>Links</h3><p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text&#39;s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an <em>optional</em> title for the link, surrounded in quotes. For example:</p><p>This is <a href=\\"http://example.com/\\">an example</a> inline link.</p><p><a href=\\"http://example.net/\\">This link</a> has no title attribute.</p><h3>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag; double <code>*</code>&#39;s or <code>_</code>&#39;s will be wrapped with an HTML <code>&lt;strong&gt;</code> tag. E.g., this input:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h3>Code</h3><p>To indicate a span of code, wrap it with backtick quotes (<code>\`</code>). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><p>Use the <code>printf()</code> function.</p><h1>Markdown: Syntax</h1><p><strong>Note:</strong> This document is itself written using Markdown; you can <a href=\\"/projects/markdown/syntax.text\\">see the source for it by adding &#39;.text&#39; to the URL</a>.</p><hr><h2>Overview</h2><h3>Philosophy</h3><p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p><p>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it&#39;s been marked up with tags or formatting instructions. While Markdown&#39;s syntax has been influenced by several existing text-to-HTML filters -- including <a href=\\"http://docutils.sourceforge.net/mirror/setext.html\\">Setext</a>, <a href=\\"http://www.aaronsw.com/2002/atx/\\">atx</a>, <a href=\\"http://textism.com/tools/textile/\\">Textile</a>, <a href=\\"http://docutils.sourceforge.net/rst.html\\">reStructuredText</a>, <a href=\\"http://www.triptico.com/software/grutatxt.html\\">Grutatext</a>, and <a href=\\"http://ettext.taint.org/doc/\\">EtText</a> -- the single biggest source of inspiration for Markdown&#39;s syntax is the format of plain text email.</p><h2>Block Elements</h2><h3>Paragraphs and Line Breaks</h3><p>A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.</p><p>The implication of the &quot;one or more consecutive lines of text&quot; rule is that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type&#39;s &quot;Convert Line Breaks&quot; option) which translate every line break character in a paragraph into a <code>&lt;br /&gt;</code> tag.</p><p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you end a line with two or more spaces, then type return.</p><h3>Headers</h3><p>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].</p><p>Optionally, you may &quot;close&quot; atx-style headers. This is purely cosmetic -- you can use this if you think it looks better. The closing hashes don&#39;t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.)</p><h3>Blockquotes</h3><p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you&#39;re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a <code>&gt;</code> before every line:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse  id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first line of a hard-wrapped paragraph:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote>
<p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of <code>&gt;</code>:</p><blockquote>
<p> This is the first level of quoting.</p><blockquote>
<p> This is nested blockquote.</p></blockquote><p> Back to the first level.</p></blockquote><p>Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:</p><blockquote>
<h2>This is a header.</h2><ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol><p> Here&#39;s some example code:</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.</p><h3>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p><p>Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list markers:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>is equivalent to:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>and:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>Ordered lists use numbers followed by periods:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>It&#39;s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:</p><p>If you instead wrote the list in Markdown like this:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>or even:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>you&#39;d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don&#39;t have to.</p><p>To make lists look nice, you can wrap items with hanging indents:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>But if you want to be lazy, you don&#39;t have to:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:</p><ol>
<li>This is a list item with two paragraphs. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit. Aliquam hendrerit     mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet     vitae, risus. Donec sit amet nisl. Aliquam semper ipsum     sit amet velit.</li>
<li>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ol><p>It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:</p><ul>
<li>This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;re     only required to indent the first line. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit.</li>
<li>Another item in the same list.</li>
</ul><p>To put a blockquote within a list item, the blockquote&#39;s <code>&gt;</code> delimiters need to be indented:</p><ul>
<li>A list item with a blockquote:<blockquote>
<p> This is a blockquote  inside a list item.</p></blockquote></li>
</ul><p>To put a code block within a list item, the code block needs to be indented <em>twice</em> -- 8 spaces or two tabs:</p><ul>
<li>A list item with a code block:<pre><code>&lt;code goes here&gt;</code></pre></li>
</ul><h3>Code Blocks</h3><p>Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p><p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.</p><p>This is a normal paragraph:</p><pre><code>This is a code block.</code></pre><p>Here is an example of AppleScript:</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><p>A code block continues until it reaches a line that is not indented (or the end of the article).</p><p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown -- just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:</p>    <div class=\\"footer\\"><p>        &amp;copy; 2004 Foo Corporation</p><p>    </div></p><p>Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it&#39;s also easy to use Markdown to write about Markdown&#39;s own syntax.</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><h2>Span Elements</h2><h3>Links</h3><p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text&#39;s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an <em>optional</em> title for the link, surrounded in quotes. For example:</p><p>This is <a href=\\"http://example.com/\\">an example</a> inline link.</p><p><a href=\\"http://example.net/\\">This link</a> has no title attribute.</p><h3>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag; double <code>*</code>&#39;s or <code>_</code>&#39;s will be wrapped with an HTML <code>&lt;strong&gt;</code> tag. E.g., this input:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h3>Code</h3><p>To indicate a span of code, wrap it with backtick quotes (<code>\`</code>). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><p>Use the <code>printf()</code> function.</p><p><strong>Note:</strong> This document is itself written using Markdown; you can <a href=\\"/projects/markdown/syntax.text\\">see the source for it by adding &#39;.text&#39; to the URL</a>.</p><hr><h2>Overview</h2><h3>Philosophy</h3><p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p><p>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it&#39;s been marked up with tags or formatting instructions. While Markdown&#39;s syntax has been influenced by several existing text-to-HTML filters -- including <a href=\\"http://docutils.sourceforge.net/mirror/setext.html\\">Setext</a>, <a href=\\"http://www.aaronsw.com/2002/atx/\\">atx</a>, <a href=\\"http://textism.com/tools/textile/\\">Textile</a>, <a href=\\"http://docutils.sourceforge.net/rst.html\\">reStructuredText</a>, <a href=\\"http://www.triptico.com/software/grutatxt.html\\">Grutatext</a>, and <a href=\\"http://ettext.taint.org/doc/\\">EtText</a> -- the single biggest source of inspiration for Markdown&#39;s syntax is the format of plain text email.</p><h2>Block Elements</h2><h3>Paragraphs and Line Breaks</h3><p>A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.</p><p>The implication of the &quot;one or more consecutive lines of text&quot; rule is that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type&#39;s &quot;Convert Line Breaks&quot; option) which translate every line break character in a paragraph into a <code>&lt;br /&gt;</code> tag.</p><p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you end a line with two or more spaces, then type return.</p><h3>Headers</h3><p>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].</p><p>Optionally, you may &quot;close&quot; atx-style headers. This is purely cosmetic -- you can use this if you think it looks better. The closing hashes don&#39;t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.)</p><h3>Blockquotes</h3><p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you&#39;re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a <code>&gt;</code> before every line:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse  id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first line of a hard-wrapped paragraph:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote>
<p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of <code>&gt;</code>:</p><blockquote>
<p> This is the first level of quoting.</p><blockquote>
<p> This is nested blockquote.</p></blockquote><p> Back to the first level.</p></blockquote><p>Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:</p><blockquote>
<h2>This is a header.</h2><ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol><p> Here&#39;s some example code:</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.</p><h3>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p><p>Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list markers:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>is equivalent to:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>and:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>Ordered lists use numbers followed by periods:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>It&#39;s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:</p><p>If you instead wrote the list in Markdown like this:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>or even:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>you&#39;d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don&#39;t have to.</p><p>To make lists look nice, you can wrap items with hanging indents:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>But if you want to be lazy, you don&#39;t have to:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:</p><ol>
<li>This is a list item with two paragraphs. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit. Aliquam hendrerit     mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet     vitae, risus. Donec sit amet nisl. Aliquam semper ipsum     sit amet velit.</li>
<li>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ol><p>It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:</p><ul>
<li>This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;re     only required to indent the first line. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit.</li>
<li>Another item in the same list.</li>
</ul><p>To put a blockquote within a list item, the blockquote&#39;s <code>&gt;</code> delimiters need to be indented:</p><ul>
<li>A list item with a blockquote:<blockquote>
<p> This is a blockquote  inside a list item.</p></blockquote></li>
</ul><p>To put a code block within a list item, the code block needs to be indented <em>twice</em> -- 8 spaces or two tabs:</p><ul>
<li>A list item with a code block:<pre><code>&lt;code goes here&gt;</code></pre></li>
</ul><h3>Code Blocks</h3><p>Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p><p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.</p><p>This is a normal paragraph:</p><pre><code>This is a code block.</code></pre><p>Here is an example of AppleScript:</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><p>A code block continues until it reaches a line that is not indented (or the end of the article).</p><p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown -- just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:</p>    <div class=\\"footer\\"><p>        &amp;copy; 2004 Foo Corporation</p><p>    </div></p><p>Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it&#39;s also easy to use Markdown to write about Markdown&#39;s own syntax.</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><h2>Span Elements</h2><h3>Links</h3><p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text&#39;s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an <em>optional</em> title for the link, surrounded in quotes. For example:</p><p>This is <a href=\\"http://example.com/\\">an example</a> inline link.</p><p><a href=\\"http://example.net/\\">This link</a> has no title attribute.</p><h3>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag; double <code>*</code>&#39;s or <code>_</code>&#39;s will be wrapped with an HTML <code>&lt;strong&gt;</code> tag. E.g., this input:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h3>Code</h3><p>To indicate a span of code, wrap it with backtick quotes (<code>\`</code>). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><p>Use the <code>printf()</code> function.</p><p><strong>Note:</strong> This document is itself written using Markdown; you can <a href=\\"/projects/markdown/syntax.text\\">see the source for it by adding &#39;.text&#39; to the URL</a>.</p><hr><h2>Overview</h2><h3>Philosophy</h3><p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p><p>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it&#39;s been marked up with tags or formatting instructions. While Markdown&#39;s syntax has been influenced by several existing text-to-HTML filters -- including <a href=\\"http://docutils.sourceforge.net/mirror/setext.html\\">Setext</a>, <a href=\\"http://www.aaronsw.com/2002/atx/\\">atx</a>, <a href=\\"http://textism.com/tools/textile/\\">Textile</a>, <a href=\\"http://docutils.sourceforge.net/rst.html\\">reStructuredText</a>, <a href=\\"http://www.triptico.com/software/grutatxt.html\\">Grutatext</a>, and <a href=\\"http://ettext.taint.org/doc/\\">EtText</a> -- the single biggest source of inspiration for Markdown&#39;s syntax is the format of plain text email.</p><h2>Block Elements</h2><h3>Paragraphs and Line Breaks</h3><p>A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.</p><p>The implication of the &quot;one or more consecutive lines of text&quot; rule is that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type&#39;s &quot;Convert Line Breaks&quot; option) which translate every line break character in a paragraph into a <code>&lt;br /&gt;</code> tag.</p><p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you end a line with two or more spaces, then type return.</p><h3>Headers</h3><p>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].</p><p>Optionally, you may &quot;close&quot; atx-style headers. This is purely cosmetic -- you can use this if you think it looks better. The closing hashes don&#39;t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.)</p><h3>Blockquotes</h3><p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you&#39;re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a <code>&gt;</code> before every line:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse  id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first line of a hard-wrapped paragraph:</p><blockquote>
<p> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote>
<p> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of <code>&gt;</code>:</p><blockquote>
<p> This is the first level of quoting.</p><blockquote>
<p> This is nested blockquote.</p></blockquote><p> Back to the first level.</p></blockquote><p>Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:</p><blockquote>
<h2>This is a header.</h2><ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol><p> Here&#39;s some example code:</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.</p><h3>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p><p>Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list markers:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>is equivalent to:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>and:</p><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul><p>Ordered lists use numbers followed by periods:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>It&#39;s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:</p><p>If you instead wrote the list in Markdown like this:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>or even:</p><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol><p>you&#39;d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don&#39;t have to.</p><p>To make lists look nice, you can wrap items with hanging indents:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>But if you want to be lazy, you don&#39;t have to:</p><ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.     Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,     viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.     Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul><p>List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:</p><ol>
<li>This is a list item with two paragraphs. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit. Aliquam hendrerit     mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet     vitae, risus. Donec sit amet nisl. Aliquam semper ipsum     sit amet velit.</li>
<li>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ol><p>It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:</p><ul>
<li>This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;re     only required to indent the first line. Lorem ipsum dolor     sit amet, consectetuer adipiscing elit.</li>
<li>Another item in the same list.</li>
</ul><p>To put a blockquote within a list item, the blockquote&#39;s <code>&gt;</code> delimiters need to be indented:</p><ul>
<li>A list item with a blockquote:<blockquote>
<p> This is a blockquote  inside a list item.</p></blockquote></li>
</ul><p>To put a code block within a list item, the code block needs to be indented <em>twice</em> -- 8 spaces or two tabs:</p><ul>
<li>A list item with a code block:<pre><code>&lt;code goes here&gt;</code></pre></li>
</ul><h3>Code Blocks</h3><p>Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p><p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.</p><p>This is a normal paragraph:</p><pre><code>This is a code block.</code></pre><p>Here is an example of AppleScript:</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><p>A code block continues until it reaches a line that is not indented (or the end of the article).</p><p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown -- just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:</p>    <div class=\\"footer\\"><p>        &amp;copy; 2004 Foo Corporation</p><p>    </div></p><p>Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it&#39;s also easy to use Markdown to write about Markdown&#39;s own syntax.</p><pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><h2>Span Elements</h2><h3>Links</h3><p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text&#39;s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an <em>optional</em> title for the link, surrounded in quotes. For example:</p><p>This is <a href=\\"http://example.com/\\">an example</a> inline link.</p><p><a href=\\"http://example.net/\\">This link</a> has no title attribute.</p><h3>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag; double <code>*</code>&#39;s or <code>_</code>&#39;s will be wrapped with an HTML <code>&lt;strong&gt;</code> tag. E.g., this input:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h3>Code</h3><p>To indicate a span of code, wrap it with backtick quotes (<code>\`</code>). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><p>Use the <code>printf()</code> function.</p>"
`;

exports[`Large MD To HTML should parse the large markdown file content to html 2`] = `
"<blockquote><p>foo</p><p></blockquote> &lt;hr /&gt; \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Similarly, if we omit the <code>&gt;</code> in the second line of</p><p>\`\`\` markdown</p><blockquote>
<ul>
<li>foo</li>
<li>bar</li>
</ul></blockquote><pre><code>
then the block quote ends after the first line:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&gt; - foo
- bar
.
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


For the same reason, we can&#39;t omit the \`&gt; \` in front of
subsequent lines of an indented or fenced code block:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&gt;     foo
    bar
.
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;bar
&lt;/code&gt;&lt;/pre&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&gt; \`\`\`
foo</code></pre><p>.</p><blockquote><pre><code></code></pre><p></blockquote></p><p>foo</p><pre><code></code></pre><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that in the following case, we have a [lazy continuation line]:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<p> foo</p></blockquote><ul>
<li>bar .<blockquote><p>foo</li>
</ul><ul>
<li>bar</p> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>To see why, note that in</p><pre><code class='language-markdown'>&gt; foo
&gt;     - bar</code></pre><p>the <code>- bar</code> is indented too far to start a list, and can&#39;t be an indented code block because indented code blocks cannot interrupt paragraphs, so it is [paragraph continuation text].</p><p>A block quote can be empty:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example &gt; .</p><blockquote><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example &gt; &gt; &gt; .</p><blockquote><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>A block quote can have initial or final blank lines:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example &gt;</p><blockquote>
<p> foo</p></blockquote><p>.</p><blockquote><p>foo</p><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>A blank line always separates block quotes:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<p> foo</p></blockquote><blockquote>
<p> bar .</p><blockquote><p>foo</p><p></blockquote></p><blockquote><p>bar</p><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote><p>(Most current Markdown implementations, including John Gruber&#39;s original <code>Markdown.pl</code>, will parse this example as a single block quote with two paragraphs.  But it seems better to allow the author to decide whether two block quotes or one are wanted.)</p><p>Consecutiveness means that if we put these block quotes together, we get a single block quote:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<p> foo  bar .</p><blockquote><p>foo<p>bar</p> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote><p>To get a block quote with two paragraphs, use:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<p> foo</p><p> bar .</p><blockquote><p>foo</p><p>bar</p><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote><p>Block quotes can interrupt paragraphs:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo</p><blockquote>
<p> bar .</p><p>foo</p><blockquote><p>bar</p><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote><p>In general, blank lines are not needed before or after block quotes:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<p> aaa</p><hr><p> bbb .</p><blockquote><p>aaa</p><p></blockquote> &lt;hr /&gt;</p><blockquote><p>bbb</p><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote><p>However, because of laziness, a blank line is needed between a block quote and a following paragraph:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<p> bar baz .</p><blockquote><p>bar<p>baz</p> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<p> bar</p></blockquote><p>baz .</p><blockquote><p>bar</p><p></blockquote></p><p>baz</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<p> bar</p></blockquote><p>baz .</p><blockquote><p>bar</p><p></blockquote></p><p>baz</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>It is a consequence of the Laziness rule that any number of initial <code>&gt;</code>s may be omitted on a continuation line of a nested block quote:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<blockquote>
<blockquote>
<p> foo bar .</p><blockquote><blockquote><blockquote><p>foo<p>bar</p> </blockquote> </blockquote> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></blockquote></blockquote><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<blockquote>
<blockquote>
<p> foo  bar baz .</p><blockquote><blockquote><blockquote><p>foo<p>bar baz</p> </blockquote> </blockquote> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></blockquote></blockquote><p>When including an indented code block in a block quote, remember that the [block quote marker] includes both the <code>&gt;</code> and a following space of indentation.  So <em>five spaces</em> are needed after the <code>&gt;</code>:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<pre><code>code</code></pre></blockquote><blockquote>
<pre><code>not code</code></pre><p>.</p><blockquote><pre><code>code<p></code></pre> </blockquote></p><blockquote><p>not code</p><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote><h2>List items</h2><p>A <a href=\\"@\\">list marker</a> is a [bullet list marker] or an [ordered list marker].</p><p>A <a href=\\"@\\">bullet list marker</a> is a <code>-</code>, <code>+</code>, or <code>*</code> character.</p><p>An <a href=\\"@\\">ordered list marker</a> is a sequence of 1--9 arabic digits (<code>0-9</code>), followed by either a <code>.</code> character or a <code>)</code> character.  (The reason for the length limit is that with 10 digits we start seeing integer overflows in some browsers.)</p><p>The following rules define [list items]:</p><ol>
<li><strong>Basic case.</strong>  If a sequence of lines <em>Ls</em> constitute a sequence of 		blocks <em>Bs</em> starting with a character other than a space or tab, and <em>M</em> is 		a list marker of width <em>W</em> followed by 1 ≤ <em>N</em> ≤ 4 spaces of indentation, 		then the result of prepending <em>M</em> and the following spaces to the first line 		of Ls<em>, and indenting subsequent lines of </em>Ls<em> by </em>W + N<em> spaces, is a 		list item with </em>Bs* as its contents.  The type of the list item 		(bullet or ordered) is determined by the type of its list marker. 		If the list item is ordered, then it is also assigned a start 		number, based on the ordered list marker.		Exceptions:</li>
<li>When the first list item in a [list] interrupts 		 a paragraph---that is, when it starts on a line that would 		 otherwise count as [paragraph continuation text]---then (a) 		 the lines <em>Ls</em> must not begin with a blank line, and (b) if 		 the list item is ordered, the start number must be 1.</li>
<li>If any line is a [thematic break][thematic breaks] then 		 that line is not a list item.</li>
</ol><p>For example, let <em>Ls</em> be the lines</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example A paragraph with two lines.</p><pre><code>indented code</code></pre><blockquote>
<p> A block quote. .</p><p>A paragraph<p>with two lines.</p></p><pre><code>indented code<p></code></pre></p><blockquote><p>A block quote.</p><p></blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote><p>And let <em>M</em> be the marker <code>1.</code>, and <em>N</em> = 2.  Then rule #1 says that the following is an ordered list item with start number 1, and the same contents as <em>Ls</em>:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>A paragraph     with two lines.<pre><code>indented code</code></pre><blockquote>
<p> A block quote. .</p><ol><li><p>A paragraph<p>with two lines.</p></p><pre><code>indented code<p></code></pre></p><blockquote><p>A block quote.</p><p></blockquote> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></li>
</ol><p>The most important thing to notice is that the position of the text after the list marker determines how much indentation is needed in subsequent blocks in the list item.  If the list marker takes up two spaces of indentation, and there are three spaces between the list marker and the next character other than a space or tab, then blocks must be indented five spaces in order to fall under the list item.</p><p>Here are some examples showing how far content must be indented to be put under the list item:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>one</li>
</ul><p> two .</p><ul><li>one</li><p></ul></p><p>two</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>one  two.<ul><li><p>one</p><p>two</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>one     two.<ul><li>one</li></ul><pre><code> two</code></pre> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>one      two.<ul><li><p>one</p><p>two</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>It is tempting to think of this in terms of columns:  the continuation blocks must be indented at least to the column of the first character other than a space or tab after the list marker.  However, that is not quite right. The spaces of indentation after the list marker determine how much relative indentation is needed.  Which column this indentation reaches will depend on how the list item is embedded in other constructions, as shown by this example:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<blockquote>
<ol>
<li>one     two.<blockquote><blockquote><ol><li><p>one</p><p>two</p></li> </ol> </blockquote> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol></blockquote></blockquote><p>Here <code>two</code> occurs in the same column as the list marker <code>1.</code>, but is actually contained in the list item, because there is sufficient indentation after the last containing blockquote marker.</p><p>The converse is also possible.  In the following example, the word <code>two</code> occurs far to the right of the initial text of the list item, <code>one</code>, but it is not considered part of the list item, because it is not indented far enough past the blockquote marker:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<blockquote>
<ul>
<li>one</li>
</ul><p> two .</p><blockquote><blockquote><ul><li>one</li><p></ul></p><p>two</p><p></blockquote> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></blockquote><p>Note that at least one space or tab is needed between the list marker and any following content, so these are not list items:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example -one</p><p>2.two .</p><p>-one</p><p>2.two</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>A list item may contain blocks that are separated by more than one blank line.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo</li>
</ul><p>  bar</p><p>.</p><ul><li><p>foo</p><p>bar</p><p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>A list item may contain any kind of block:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>foo<pre><code>bar</code></pre>    baz<blockquote>
<p> bam .</p><ol><li><p>foo</p><pre><code>bar<p></code></pre></p><p>baz</p><blockquote><p>bam</p><p></blockquote> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></li>
</ol><p>A list item that contains an indented code block will preserve empty lines within the code block verbatim.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>Foo      bar</li>
</ul><pre><code>baz</code></pre><p>.</p><ul><li><p>Foo</p><pre><code>bar<p>baz </code></pre> </li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that ordered list start numbers must be nine digits or less:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>ok .<ol start=\\"123456789\\"><li>ok</li></ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>not ok .<p>1234567890. not ok</p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>A start number may begin with 0s:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>ok .<ol start=\\"0\\"><li>ok</li></ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>ok .<ol start=\\"3\\"><li>ok</li></ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>A start number may not be negative:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example -1. not ok .</p><p>-1. not ok</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><ol>
<li><strong>Item starting with indented code.</strong>  If a sequence of lines <em>Ls</em> 		constitute a sequence of blocks <em>Bs</em> starting with an indented code 		block, and <em>M</em> is a list marker of width <em>W</em> followed by 		one space of indentation, then the result of prepending <em>M</em> and the 		following space to the first line of <em>Ls</em>, and indenting subsequent lines 		of <em>Ls</em> by <em>W + 1</em> spaces, is a list item with <em>Bs</em> as its contents. 		If a line is empty, then it need not be indented.  The type of the 		list item (bullet or ordered) is determined by the type of its list 		marker.  If the list item is ordered, then it is also assigned a 		start number, based on the ordered list marker.</li>
</ol><p>An indented code block will have to be preceded by four spaces of indentation beyond the edge of the region where text will be included in the list item. In the following case that is 6 spaces:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo      bar.<ul><li><p>foo</p><pre><code>bar</code></pre> </li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>And in this case it is 11 spaces:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>foo<pre><code>bar</code></pre>.<ol start=\\"10\\"><li><p>foo</p><pre><code>bar</code></pre> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>If the <em>first</em> block in the list item is an indented code block, then by rule #2, the contents must be preceded by <em>one</em> space of indentation after the list marker:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example     indented code</p><p>paragraph</p><pre><code>more code</code></pre><p>.</p><pre><code>indented code<p></code></pre></p><p>paragraph</p><pre><code>more code<p></code></pre> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>indented code   paragraph       more code.<ol><li><pre><code>indented code</code></pre><p>paragraph</p><pre><code>more code</code></pre> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>Note that an additional space of indentation is interpreted as space inside the code block:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>indented code   paragraph       more code.<ol><li><pre><code> indented code</code></pre><p>paragraph</p><pre><code>more code</code></pre> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>Note that rules #1 and #2 only apply to two cases:  (a) cases in which the lines to be included in a list item begin with a characer other than a space or tab, and (b) cases in which they begin with an indented code block.  In a case like the following, where the first block begins with three spaces of indentation, the rules do not allow us to form a list item by indenting the whole thing and prepending a list marker:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example    foo</p><p>bar .</p><p>foo</p><p>bar</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo  bar.<ul><li>foo</li></ul><p>bar</p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>This is not a significant restriction, because when a block is preceded by up to three spaces of indentation, the indentation can always be removed without a change in interpretation, allowing rule #1 to be applied.  So, in the above case:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo   bar.<ul><li><p>foo</p><p>bar</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><ol>
<li><strong>Item starting with a blank line.</strong>  If a sequence of lines <em>Ls</em> 		starting with a single [blank line] constitute a (possibly empty) 		sequence of blocks <em>Bs</em>, and <em>M</em> is a list marker of width <em>W</em>, 		then the result of prepending <em>M</em> to the first line of <em>Ls</em>, and 		preceding subsequent lines of <em>Ls</em> by <em>W + 1</em> spaces of indentation, is a 		list item with <em>Bs</em> as its contents. 		If a line is empty, then it need not be indented.  The type of the 		list item (bullet or ordered) is determined by the type of its list 		marker.  If the list item is ordered, then it is also assigned a 		start number, based on the ordered list marker.</li>
</ol><p>Here are some list items that start with a blank line but are not empty:</p><h2>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</h2><h2>  foo</h2><pre><code>bar</code></pre><ul>
<li></li>
</ul><p>      baz</p><p>.</p><ul><li>foo</li><li><pre><code>bar<p></code></pre> </li></p><li><pre><code>baz<p></code></pre> </li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>When the list item starts with a blank line, the number of spaces following the list marker doesn&#39;t change the required indentation:</p><h2>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</h2><p>  foo</p><p>.</p><ul><li>foo</li><p></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>A list item can begin with at most one blank line. In the following example, <code>foo</code> is not part of the list item:</p><h2>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</h2><p>  foo</p><p>.</p><ul><li></li><p></ul></p><p>foo</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Here is an empty bullet list item:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><h2>- foo</h2><ul>
<li>bar .<ul><li>foo</li><li></li><li>bar</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>It does not matter whether there are spaces or tabs following the [list marker]:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><h2>- foo</h2><ul>
<li>bar .<ul><li>foo</li><li></li><li>bar</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>Here is an empty ordered list item:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>foo</li>
</ol><ol>
<li></li>
</ol><ol>
<li>bar .<ol><li>foo</li><li></li><li>bar</li></ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>A list may start or end with an empty list item:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li></li>
</ul><p>.</p><ul><li></li><p></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>However, an empty list item cannot interrupt a paragraph:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo</p><ul>
<li></li>
</ul><p>foo</p><ol>
<li></li>
</ol><p>.</p><p>foo<p>*</p></p><p>foo<p>1.</p> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><ol>
<li><strong>Indentation.</strong>  If a sequence of lines <em>Ls</em> constitutes a list item 		according to rule #1, #2, or #3, then the result of preceding each line 		of <em>Ls</em> by up to three spaces of indentation (the same for each line) also 		constitutes a list item with the same contents and attributes.  If a line is 		empty, then it need not be indented.</li>
</ol><p>Indented one space:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>A paragraph      with two lines.<pre><code>indented code</code></pre><blockquote>
<p> A block quote. .</p><ol><li><p>A paragraph<p>with two lines.</p></p><pre><code>indented code<p></code></pre></p><blockquote><p>A block quote.</p><p></blockquote> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></li>
</ol><p>Indented two spaces:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>A paragraph       with two lines.<pre><code>indented code</code></pre><blockquote>
<p> A block quote. .</p><ol><li><p>A paragraph<p>with two lines.</p></p><pre><code>indented code<p></code></pre></p><blockquote><p>A block quote.</p><p></blockquote> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></li>
</ol><p>Indented three spaces:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>A paragraph        with two lines.<pre><code>indented code</code></pre><blockquote>
<p> A block quote. .</p><ol><li><p>A paragraph<p>with two lines.</p></p><pre><code>indented code<p></code></pre></p><blockquote><p>A block quote.</p><p></blockquote> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></li>
</ol><p>Four spaces indent gives a code block:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>A paragraph         with two lines.<pre><code>indented code</code></pre><blockquote>
<p> A block quote. .</p><pre><code>1.  A paragraph<p>    with two lines.</p></blockquote><pre><code>indented code</code></pre></li>
</ol><pre><code>&amp;gt; A block quote.</code></pre><p></code></pre> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><ol>
<li><strong>Laziness.</strong>  If a string of lines <em>Ls</em> constitute a <a href=\\"#list-items\\">list 		item</a> with contents <em>Bs</em>, then the result of deleting 		some or all of the indentation from one or more lines in which the 		next character other than a space or tab after the indentation is 		<a href=\\"@\\">paragraph continuation text] is a 		list item with the same contents and attributes.  The unindented 		lines are called 		[lazy continuation line</a>s.</li>
</ol><p>Here is an example with [lazy continuation lines]:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>A paragraph with two lines.<pre><code>indented code</code></pre><blockquote>
<p> A block quote. .</p><ol><li><p>A paragraph<p>with two lines.</p></p><pre><code>indented code<p></code></pre></p><blockquote><p>A block quote.</p><p></blockquote> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></li>
</ol><p>Indentation can be partially deleted:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>A paragraph     with two lines. .<ol><li>A paragraphwith two lines.</li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>These examples show how laziness can work in nested structures:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<ol>
<li><blockquote>
<p> Blockquote continued here. .</p><blockquote><ol><li><blockquote><p>Blockquote<p>continued here.</p> </blockquote> </li> </ol> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></li>
</ol></blockquote><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><blockquote>
<ol>
<li><blockquote>
<p> Blockquote  continued here. .</p><blockquote><ol><li><blockquote><p>Blockquote<p>continued here.</p> </blockquote> </li> </ol> </blockquote> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p></blockquote></li>
</ol></blockquote><ol>
<li><strong>That&#39;s all.</strong> Nothing that is not counted as a list item by rules 		#1--5 counts as a <a href=\\"#list-items\\">list item</a>.</li>
</ol><p>The rules for sublists follow from the general rules [above][List items].  A sublist must be indented the same number of spaces of indentation a paragraph would need to be in order to be included in the list item.</p><p>So, in this case we need two spaces indent:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo<ul>
<li>bar<ul>
<li>baz<ul>
<li>boo .<ul><li>foo<ul><li>bar<ul><li>baz<ul><li>boo</li></ul> </li> </ul> </li> </ul> </li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul></li>
</ul></li>
</ul></li>
</ul><p>One is not enough:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo</li>
<li>bar<ul>
<li>baz</li>
<li>boo .<ul><li>foo</li><li>bar</li><li>baz</li><li>boo</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul></li>
</ul><p>Here we need four, because the list marker is wider:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example 10) foo</p><ul>
<li>bar .<ol start=\\"10\\"><li>foo<ul><li>bar</li></ul> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>Three is not enough:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example 10) foo</p><ul>
<li>bar .<ol start=\\"10\\"><li>foo</li></ol><ul><li>bar</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>A list may be the first block in a list item:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li><ul>
<li>foo .<ul><li><ul><li>foo</li></ul> </li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul></li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li><ul>
<li><ol>
<li>foo .<ol><li><ul><li><ol start=\\"2\\"><li>foo</li></ol> </li> </ul> </li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol></li>
</ul></li>
</ol><p>A list item can contain a heading:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li><h1>Foo</h1></li>
</ul><h2>- Bar</h2><p>  baz</p><p>.</p><ul><li><h1>Foo</h1><p></li></p><li><h2>Bar</h2><p>baz</li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><h3>Motivation</h3><p>John Gruber&#39;s Markdown spec says the following about list items:</p><ol>
<li>&quot;List markers typically start at the left margin, but may be indented 	 by up to three spaces. List markers must be followed by one or more 	 spaces or a tab.&quot;</li>
<li>&quot;To make lists look nice, you can wrap items with hanging indents.... 	 But if you don&#39;t want to, you don&#39;t have to.&quot;</li>
<li>&quot;List items may consist of multiple paragraphs. Each subsequent 	 paragraph in a list item must be indented by either 4 spaces or one 	 tab.&quot;</li>
<li>&quot;It looks nice if you indent every line of the subsequent paragraphs, 	 but here again, Markdown will allow you to be lazy.&quot;</li>
<li>&quot;To put a blockquote within a list item, the blockquote&#39;s <code>&gt;</code> 	 delimiters need to be indented.&quot;</li>
<li>&quot;To put a code block within a list item, the code block needs to be 	 indented twice — 8 spaces or two tabs.&quot;</li>
</ol><p>These rules specify that a paragraph under a list item must be indented four spaces (presumably, from the left margin, rather than the start of the list marker, but this is not said), and that code under a list item must be indented eight spaces instead of the usual four.  They also say that a block quote must be indented, but not by how much; however, the example given has four spaces indentation.  Although nothing is said about other kinds of block-level content, it is certainly reasonable to infer that <em>all</em> block elements under a list item, including other lists, must be indented four spaces.  This principle has been called the <em>four-space rule</em>.</p><p>The four-space rule is clear and principled, and if the reference implementation <code>Markdown.pl</code> had followed it, it probably would have become the standard.  However, <code>Markdown.pl</code> allowed paragraphs and sublists to start with only two spaces indentation, at least on the outer level.  Worse, its behavior was inconsistent: a sublist of an outer-level list needed two spaces indentation, but a sublist of this sublist needed three spaces.  It is not surprising, then, that different implementations of Markdown have developed very different rules for determining what comes under a list item.  (Pandoc and python-Markdown, for example, stuck with Gruber&#39;s syntax description and the four-space rule, while discount, redcarpet, marked, PHP Markdown, and others followed <code>Markdown.pl</code>&#39;s behavior more closely.)</p><p>Unfortunately, given the divergences between implementations, there is no way to give a spec for list items that will be guaranteed not to break any existing documents.  However, the spec given here should correctly handle lists formatted with either the four-space rule or the more forgiving <code>Markdown.pl</code> behavior, provided they are laid out in a way that is natural for a human to read.</p><p>The strategy here is to let the width and indentation of the list marker determine the indentation necessary for blocks to fall under the list item, rather than having a fixed and arbitrary number.  The writer can think of the body of the list item as a unit which gets indented to the right enough to fit the list marker (and any indentation on the list marker).  (The laziness rule, #5, then allows continuation lines to be unindented if needed.)</p><p>This rule is superior, we claim, to any rule requiring a fixed level of indentation from the margin.  The four-space rule is clear but unnatural. It is quite unintuitive that</p><p>\`\`\` markdown</p><ul>
<li>foo  bar<ul>
<li>baz<pre><code></code></pre></li>
</ul></li>
</ul><p>should be parsed as two lists with an intervening paragraph,</p><p>\`\`\` html</p><ul><li>foo</li><p></ul></p><p>bar</p><ul><li>baz</li><p></ul></p><pre><code>
as the four-space rule demands, rather than a single list,

\`\`\` html
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</code></pre><p>The choice of four spaces is arbitrary.  It can be learned, but it is not likely to be guessed, and it trips up beginners regularly.</p><p>Would it help to adopt a two-space rule?  The problem is that such a rule, together with the rule allowing up to three spaces of indentation for the initial list marker, allows text that is indented <em>less than</em> the original list marker to be included in the list item. For example, <code>Markdown.pl</code> parses</p><p>\`\`\` markdown</p><ul>
<li>one</li>
</ul><p>  two</p><pre><code>
as a single list item, with \`two\` a continuation paragraph:

\`\`\` html
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</code></pre><p>and similarly</p><p>\`\`\` markdown</p><blockquote>
<ul>
<li>one</li>
</ul><p>  two</p></blockquote><pre><code>
as

\`\`\` html
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</code></pre><p>This is extremely unintuitive.</p><p>Rather than requiring a fixed indent from the margin, we could require a fixed indent (say, two spaces, or even one space) from the list marker (which may itself be indented).  This proposal would remove the last anomaly discussed.  Unlike the spec presented above, it would count the following as a list item with a subparagraph, even though the paragraph <code>bar</code> is not indented as far as the first paragraph <code>foo</code>:</p><p>\`\`\` markdown</p><ol>
<li>foo   bar<pre><code></code></pre></li>
</ol><p>Arguably this text does read like a list item with <code>bar</code> as a subparagraph, which may count in favor of the proposal.  However, on this proposal indented code would have to be indented six spaces after the list marker.  And this would break a lot of existing Markdown, which has the pattern:</p><p>\`\`\` markdown</p><ol>
<li>foo<pre><code>indented code</code></pre><pre><code></code></pre></li>
</ol><p>where the code is indented eight spaces.  The spec above, by contrast, will parse this text as expected, since the code block&#39;s indentation is measured from the beginning of <code>foo</code>.</p><p>The one case that needs special treatment is a list item that <em>starts</em> with indented code.  How much indentation is required in that case, since we don&#39;t have a &quot;first paragraph&quot; to measure from?  Rule #2 simply stipulates that in such cases, we require one space indentation from the list marker (and then the normal four spaces for the indented code).  This will match the four-space rule in cases where the list marker plus its initial indentation takes four spaces (a common case), but diverge in other cases.</p><h2>Lists</h2><p>A <a href=\\"@\\">list</a> is a sequence of one or more list items [of the same type].  The list items may be separated by any number of blank lines.</p><p>Two list items are <a href=\\"@\\">of the same type</a> if they begin with a [list marker] of the same type. Two list markers are of the same type if (a) they are bullet list markers using the same character (<code>-</code>, <code>+</code>, or <code>*</code>) or (b) they are ordered list numbers with the same delimiter (either <code>.</code> or <code>)</code>).</p><p>A list is an <a href=\\"@\\">ordered list</a> if its constituent list items begin with <a href=\\"@\\">ordered list markers], and a [bullet list</a> if its constituent list items begin with [bullet list markers].</p><p>The <a href=\\"@\\">start number</a> of an [ordered list] is determined by the list number of its initial list item.  The numbers of subsequent list items are disregarded.</p><p>A list is <a href=\\"@\\">loose</a> if any of its constituent list items are separated by blank lines, or if any of its constituent list items directly contain two block-level elements with a blank line between them.  Otherwise a list is <a href=\\"@\\">tight</a>. (The difference in HTML output is that paragraphs in a loose list are wrapped in <code>&lt;p&gt;</code> tags, while paragraphs in a tight list are not.)</p><p>Changing the bullet or ordered list delimiter starts a new list:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo</li>
<li>bar</li>
</ul><ul>
<li>baz .<ul><li>foo</li><li>bar</li></ul><ul><li>baz</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>foo</li>
<li>bar 3) baz .<ol><li>foo</li><li>bar</li></ol><ol start=\\"3\\"><li>baz</li></ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>In CommonMark, a list can interrupt a paragraph. That is, no blank line is needed to separate a paragraph from a following list:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example Foo</p><ul>
<li>bar</li>
<li>baz .<p>Foo</p><ul><li>bar</li><li>baz</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p><code>Markdown.pl</code> does not allow this, through fear of triggering a list via a numeral in a hard-wrapped line:</p><p>\`\`\` markdown The number of windows in my house is</p><ol>
<li>The number of doors is 6.<pre><code></code></pre></li>
</ol><p>Oddly, though, <code>Markdown.pl</code> <em>does</em> allow a blockquote to interrupt a paragraph, even though the same considerations might apply.</p><p>In CommonMark, we do allow lists to interrupt paragraphs, for two reasons.  First, it is natural and not uncommon for people to start lists without blank lines:</p><p>\`\`\` markdown I need to buy</p><ul>
<li>new shoes</li>
<li>a coat</li>
<li>a plane ticket<pre><code></code></pre></li>
</ul><p>Second, we are attracted to a</p><blockquote>
<p> <a href=\\"@\\">principle of uniformity</a>:  if a chunk of text has a certain  meaning, it will continue to have the same meaning when put into a  container block (such as a list item or blockquote).</p></blockquote><p>(Indeed, the spec for [list items] and [block quotes] presupposes this principle.) This principle implies that if</p><p>\`\`\` markdown</p><ul>
<li>I need to buy<ul>
<li>new shoes</li>
<li>a coat</li>
<li>a plane ticket<pre><code></code></pre></li>
</ul></li>
</ul><p>is a list item containing a paragraph followed by a nested sublist, as all Markdown implementations agree it is (though the paragraph may be rendered without <code>&lt;p&gt;</code> tags, since the list is &quot;tight&quot;), then</p><p>\`\`\` markdown I need to buy</p><ul>
<li>new shoes</li>
<li>a coat</li>
<li>a plane ticket<pre><code></code></pre></li>
</ul><p>by itself should be a paragraph followed by a nested sublist.</p><p>Since it is well established Markdown practice to allow lists to interrupt paragraphs inside list items, the <a href=\\"http://docutils.sourceforge.net/rst.html\\">principle of uniformity] requires us to allow this outside list items as well.  ([reStructuredText</a> takes a different approach, requiring blank lines before lists even inside other list items.)</p><p>In order to solve of unwanted lists in paragraphs with hard-wrapped numerals, we allow only lists starting with <code>1</code> to interrupt paragraphs.  Thus,</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example The number of windows in my house is</p><ol>
<li>The number of doors is 6. .<p>The number of windows in my house is</li>
<li>The number of doors is 6.</p> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>We may still get an unintended result in cases like</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example The number of windows in my house is</p><ol>
<li>The number of doors is 6. .<p>The number of windows in my house is</p><ol><li>The number of doors is 6.</li></ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol><p>but this rule should prevent most spurious list captures.</p><p>There can be any number of blank lines between items:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo</li>
<li>bar</li>
<li>baz .<ul><li><p>foo</p></li><li><p>bar</p></li><li><p>baz</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo<ul>
<li>bar<ul>
<li>baz</li>
</ul></li>
</ul></li>
</ul><pre><code>bim</code></pre><p>.</p><ul><li>foo<ul><li>bar<ul><li><p>baz</p><p>bim</p><p></li> </ul> </li> </ul> </li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>To separate consecutive lists of the same type, or to separate a list from an indented code block that would otherwise be parsed as a subparagraph of the final list item, you can insert a blank HTML comment:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo</li>
<li>bar</li>
</ul><p>&lt;!-- --&gt;</p><ul>
<li>baz</li>
<li>bim .<ul><li>foo</li><li>bar</li></ul> &lt;!-- --&gt;<ul><li>baz</li><li>bim</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo    notcode</li>
<li>foo</li>
</ul><p>&lt;!-- --&gt;</p><pre><code>code</code></pre><p>.</p><ul><li><p>foo</p><p>notcode</p><p></li></p><li><p>foo</p><p></li> </ul> &lt;!-- --&gt;</p><pre><code>code<p></code></pre> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>List items need not be indented to the same level.  The following list items will be treated as items at the same list level, since none is indented enough to belong to the previous list item:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a</li>
<li>b<ul>
<li>c</li>
<li>d</li>
<li>e</li>
</ul></li>
<li>f</li>
<li>g .<ul><li>a</li><li>b</li><li>c</li><li>d</li><li>e</li><li>f</li><li>g</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>a<ol>
<li>b</li>
<li>c .<ol><li><p>a</p></li><li><p>b</p></li><li><p>c</p></li> </ol> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol></li>
</ol><p>Note, however, that list items may not be preceded by more than three spaces of indentation.  Here <code>- e</code> is treated as a paragraph continuation line, because it is indented more than three spaces:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a</li>
<li>b<ul>
<li>c</li>
<li>d<ul>
<li>e .<ul><li>a</li><li>b</li><li>c</li><li>d</li>
</ul></li>
</ul></li>
<li>e</li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>And here, <code>3. c</code> is treated as in indented code block, because it is indented four spaces and preceded by a blank line.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li>a<ol>
<li>b<ol>
<li>c .<ol><li><p>a</p></li><li><p>b</p></li> </ol><pre><code>3. c</code></pre> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ol></li>
</ol></li>
</ol><p>This is a loose list, because there is a blank line between two of the list items:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a</li>
<li>b</li>
<li>c .<ul><li><p>a</p></li><li><p>b</p></li><li><p>c</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>So is this, with a empty second item:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a</li>
<li></li>
<li>c .<ul><li><p>a</p></li><li></li><li><p>c</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>These are loose lists, even though there are no blank lines between the items, because one of the items directly contains two block-level elements with a blank line between them:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a</li>
<li>b  c</li>
<li>d .<ul><li><p>a</p></li><li><p>b</p><p>c</p></li><li><p>d</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a</li>
<li>b</li>
<li>d .<ul><li><p>a</p></li><li><p>b</p></li><li><p>d</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>This is a tight list, because the blank lines are in a code block:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a</li>
<li><pre><code>  b</code></pre></li>
</ul><pre><code></code></pre><ul>
<li>c .<ul><li>a</li><li><pre><code>b</li>
</ul><p></code></pre> </li></p><li>c</li><p></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>This is a tight list, because the blank line is between two paragraphs of a sublist.  So the sublist is loose while the outer list is tight:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a<ul>
<li>b    c</li>
</ul></li>
<li>d .<ul><li>a<ul><li><p>b</p><p>c</p></li> </ul> </li><li>d</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>This is a tight list, because the blank line is inside the block quote:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a<blockquote>
<p> b</p></blockquote></li>
<li>c .<ul><li>a<blockquote><p>b</p></blockquote> </li><li>c</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>This list is tight, because the consecutive block elements are not separated by blank lines:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a<blockquote>
<p> b</p></blockquote><pre><code>c</code></pre></li>
<li>d .<ul><li>a<blockquote><p>b</p></blockquote><pre><code>c</code></pre> </li><li>d</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>A single-paragraph list is tight:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a .<ul><li>a</li></ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a<ul>
<li>b .<ul><li>a<ul><li>b</li></ul> </li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul></li>
</ul><p>This list is loose, because of the blank line between the two block elements in the list item:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ol>
<li><pre><code>   foo
   \`\`\`

   bar
.
&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</code></pre></li>
</ol><p>Here the outer list is loose, the inner list tight:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>foo<ul>
<li>bar</li>
</ul>  baz.<ul><li><p>foo</p><ul><li>bar</li></ul><p>baz</p></li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><ul>
<li>a<ul>
<li>b</li>
<li>c</li>
</ul></li>
<li>d<ul>
<li>e</li>
<li>f .<ul><li><p>a</p><ul><li>b</li><li>c</li></ul> </li><li><p>d</p><ul><li>e</li><li>f</li></ul> </li> </ul> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</li>
</ul></li>
</ul><h1>Inlines</h1><p>Inlines are parsed sequentially from the beginning of the character stream to the end (left to right, in left-to-right languages). Thus, for example, in</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code>hi<code>lo</code> .</p><p><code>hi</code>lo\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p><code>hi</code> is parsed as code, leaving the backtick at the end as a literal backtick.</p><h2>Code spans</h2><p>A <a href=\\"@\\">backtick string</a> is a string of one or more backtick characters (<code>\`</code>) that is neither preceded nor followed by a backtick.</p><p>A <a href=\\"@\\">code span</a> begins with a backtick string and ends with a backtick string of equal length.  The contents of the code span are the characters between these two backtick strings, normalized in the following ways:</p><ul>
<li>First, [line endings] are converted to [spaces].</li>
<li>If the resulting string both begins <em>and</em> ends with a [space] 	character, but does not consist entirely of [space] 	characters, a single [space] character is removed from the 	front and back.  This allows you to include code that begins 	or ends with backtick characters, which must be separated by 	whitespace from the opening or closing backtick strings.</li>
</ul><p>This is a simple code span:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code>foo\` .</p><p><code>foo</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Here two backticks are used, because the code contains a backtick. This example also illustrates stripping of a single leading and trailing space:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code> foo \` bar \`\` .</p><p><code>foo \` bar</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>This example shows the motivation for stripping leading and trailing spaces:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example \`</code> \` .</p><p><code>\`\`</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that only <em>one</em> space is stripped:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example \`</code>  \` .</p><p><code> \`\` </code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The stripping only happens if the space is on both sides of the string:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code> a\` .</p><p><code> a</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Only [spaces], and not [unicode whitespace] in general, are stripped in this way:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code> b \` .</p><p><code> b </code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>No stripping occurs if the code span contains only spaces:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code> <code></code>  \` .</p><p><code> </code><code>  </code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>[Line endings] are treated like spaces:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code> foo bar baz \`\` .</p><p><code>foo bar   baz</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code> foo \`\` .</p><p><code>foo </code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Interior spaces are not collapsed:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code>foo   bar baz\` .</p><p><code>foo   bar  baz</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that browsers will typically collapse consecutive spaces when rendering <code>&lt;code&gt;</code> elements, so it is recommended that the following CSS be used:</p><pre><code>code{white-space: pre-wrap;}</code></pre><p>Note that backslash escapes do not work in code spans. All backslashes are treated literally:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code>foo\`bar\` .</p><p><code>foo\\\\</code>bar\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Backslash escapes are never needed, because one can always choose a string of <em>n</em> backtick characters as delimiters, where the code does not contain any strings of exactly <em>n</em> backtick characters.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code>foo\`bar\`\` .</p><p><code>foo\`bar</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example \` foo</code> bar \` .</p><p><code>foo \`\` bar</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Code span backticks have higher precedence than any other inline constructs except HTML tags and autolinks.  Thus, for example, this is not parsed as emphasized text, since the second <code>*</code> is part of a code span:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example *foo</code>*\` .</p><p>*foo<code>*</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>And this is not parsed as a link:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example [not a</code>link](/foo\`) .</p><p>[not a <code>link](/foo</code>)</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Code spans, HTML tags, and autolinks have the same precedence. Thus, this is code:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code><a href=\\"\`\\">\` .</p><p><code>&lt;a href=&quot;</code>&quot;&gt;\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>But this is an HTML tag:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><a href=\\"\`\\">\`<p>.</p><p><a href=\\"\`\\">\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>And this is code:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code>&lt;http://foo.bar.<code>baz&gt;</code> .</p><p><code>&lt;http://foo.bar.</code>baz&gt;\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>But this is an autolink:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example &lt;http://foo.bar.</code>baz&gt;\` .</p><p><a href=\\"http://foo.bar.%60baz\\">http://foo.bar.\`baz</a>\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>When a backtick string is not closed by a matching backtick string, we just have literal backticks:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code>foo\`\` .</p><p>\`\`\`foo\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example</code>foo .</p><p>\`foo</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The following case also illustrates the need for opening and closing backtick strings to be equal in length:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example \`foo</code>bar\`\` .</p><p>\`foo<code>bar</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><h2>Emphasis and strong emphasis</h2><p>John Gruber&#39;s original <a href=\\"http://daringfireball.net/projects/markdown/syntax#em\\">Markdown syntax description</a> says:</p><blockquote>
<p> Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of  emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML  <code>&lt;em&gt;</code> tag; double <code>*</code>&#39;s or <code>_</code>&#39;s will be wrapped with an HTML <code>&lt;strong&gt;</code>  tag.</p></blockquote><p>This is enough for most users, but these rules leave much undecided, especially when it comes to nested emphasis.  The original <code>Markdown.pl</code> test suite makes it clear that triple <code>***</code> and <code>___</code> delimiters can be used for strong emphasis, and most implementations have also allowed the following patterns:</p><p>\`\`\` markdown <em>strong emph</em> <em>strong*<em> in emph</em> </em>emph<em> in strong<strong> </strong>in strong </em>emph<em> <em>in emph </em>*strong</em></p><pre><code>
The following patterns are less widely supported, but the intent
is clear and they are useful (especially in contexts like bibliography
entries):

\`\`\` markdown
*emph *with emph* in it*
**strong **with strong** in it**</code></pre><p>Many implementations have also restricted intraword emphasis to the <code>*</code> forms, to avoid unwanted emphasis in words containing internal underscores.  (It is best practice to put these in code spans, but users often do not.)</p><p>\`\`\` markdown internal emphasis: foo<em>bar</em>baz no emphasis: foo<em>bar</em>baz</p><pre><code>
The rules given below capture all of these patterns, while allowing
for efficient parsing strategies that do not backtrack.

First, some definitions.  A [delimiter run](@) is either
a sequence of one or more \`*\` characters that is not preceded or
followed by a non-backslash-escaped \`*\` character, or a sequence
of one or more \`_\` characters that is not preceded or followed by
a non-backslash-escaped \`_\` character.

A [left-flanking delimiter run](@) is
a [delimiter run] that is (1) not followed by [Unicode whitespace],
and either (2a) not followed by a [Unicode punctuation character], or
(2b) followed by a [Unicode punctuation character] and
preceded by [Unicode whitespace] or a [Unicode punctuation character].
For purposes of this definition, the beginning and the end of
the line count as Unicode whitespace.

A [right-flanking delimiter run](@) is
a [delimiter run] that is (1) not preceded by [Unicode whitespace],
and either (2a) not preceded by a [Unicode punctuation character], or
(2b) preceded by a [Unicode punctuation character] and
followed by [Unicode whitespace] or a [Unicode punctuation character].
For purposes of this definition, the beginning and the end of
the line count as Unicode whitespace.

Here are some examples of delimiter runs.

- left-flanking but not right-flanking:
</code></pre><p>	*<strong>abc 		_abc 	</strong>&quot;abc&quot; 	 _&quot;abc&quot;</p><pre><code>
- right-flanking but not left-flanking:
</code></pre><p>	 abc*** 	 abc_</p><p>	&quot;abc&quot;** 	&quot;abc&quot;_</p><pre><code>
- Both left and right-flanking:
</code></pre><p>	 abc***def</p><p>	&quot;abc&quot;_&quot;def&quot;</p><pre><code>
- Neither left nor right-flanking:
</code></pre><p>	abc *** def 	a _ b</p><pre><code>
(The idea of distinguishing left-flanking and right-flanking
delimiter runs based on the character before and the character
after comes from Roopesh Chander&#39;s
[vfmd](http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags).
vfmd uses the terminology &quot;emphasis indicator string&quot; instead of &quot;delimiter
run,&quot; and its rules for distinguishing left- and right-flanking runs
are a bit more complex than the ones given here.)

The following rules define emphasis and strong emphasis:

1.  A single \`*\` character [can open emphasis](@)
	iff (if and only if) it is part of a [left-flanking delimiter run].

2.  A single \`_\` character [can open emphasis] iff
	it is part of a [left-flanking delimiter run]
	and either (a) not part of a [right-flanking delimiter run]
	or (b) part of a [right-flanking delimiter run]
	preceded by a [Unicode punctuation character].

3.  A single \`*\` character [can close emphasis](@)
	iff it is part of a [right-flanking delimiter run].

4.  A single \`_\` character [can close emphasis] iff
	it is part of a [right-flanking delimiter run]
	and either (a) not part of a [left-flanking delimiter run]
	or (b) part of a [left-flanking delimiter run]
	followed by a [Unicode punctuation character].

5.  A double \`**\` [can open strong emphasis](@)
	iff it is part of a [left-flanking delimiter run].

6.  A double \`__\` [can open strong emphasis] iff
	it is part of a [left-flanking delimiter run]
	and either (a) not part of a [right-flanking delimiter run]
	or (b) part of a [right-flanking delimiter run]
	preceded by a [Unicode punctuation character].

7.  A double \`**\` [can close strong emphasis](@)
	iff it is part of a [right-flanking delimiter run].

8.  A double \`__\` [can close strong emphasis] iff
	it is part of a [right-flanking delimiter run]
	and either (a) not part of a [left-flanking delimiter run]
	or (b) part of a [left-flanking delimiter run]
	followed by a [Unicode punctuation character].

9.  Emphasis begins with a delimiter that [can open emphasis] and ends
	with a delimiter that [can close emphasis], and that uses the same
	character (\`_\` or \`*\`) as the opening delimiter.  The
	opening and closing delimiters must belong to separate
	[delimiter runs].  If one of the delimiters can both
	open and close emphasis, then the sum of the lengths of the
	delimiter runs containing the opening and closing delimiters
	must not be a multiple of 3 unless both lengths are
	multiples of 3.

10. Strong emphasis begins with a delimiter that
	[can open strong emphasis] and ends with a delimiter that
	[can close strong emphasis], and that uses the same character
	(\`_\` or \`*\`) as the opening delimiter.  The
	opening and closing delimiters must belong to separate
	[delimiter runs].  If one of the delimiters can both open
	and close strong emphasis, then the sum of the lengths of
	the delimiter runs containing the opening and closing
	delimiters must not be a multiple of 3 unless both lengths
	are multiples of 3.

11. A literal \`*\` character cannot occur at the beginning or end of
	\`*\`-delimited emphasis or \`**\`-delimited strong emphasis, unless it
	is backslash-escaped.

12. A literal \`_\` character cannot occur at the beginning or end of
	\`_\`-delimited emphasis or \`__\`-delimited strong emphasis, unless it
	is backslash-escaped.

Where rules 1--12 above are compatible with multiple parsings,
the following principles resolve ambiguity:

13. The number of nestings should be minimized. Thus, for example,
	an interpretation \`&lt;strong&gt;...&lt;/strong&gt;\` is always preferred to
	\`&lt;em&gt;&lt;em&gt;...&lt;/em&gt;&lt;/em&gt;\`.

14. An interpretation \`&lt;em&gt;&lt;strong&gt;...&lt;/strong&gt;&lt;/em&gt;\` is always
	preferred to \`&lt;strong&gt;&lt;em&gt;...&lt;/em&gt;&lt;/strong&gt;\`.

15. When two potential emphasis or strong emphasis spans overlap,
	so that the second begins before the first ends and ends after
	the first ends, the first takes precedence. Thus, for example,
	\`*foo _bar* baz_\` is parsed as \`&lt;em&gt;foo _bar&lt;/em&gt; baz_\` rather
	than \`*foo &lt;em&gt;bar* baz&lt;/em&gt;\`.

16. When there are two potential emphasis or strong emphasis spans
	with the same closing delimiter, the shorter one (the one that
	opens later) takes precedence. Thus, for example,
	\`**foo **bar baz**\` is parsed as \`**foo &lt;strong&gt;bar baz&lt;/strong&gt;\`
	rather than \`&lt;strong&gt;foo **bar baz&lt;/strong&gt;\`.

17. Inline code spans, links, images, and HTML tags group more tightly
	than emphasis.  So, when there is a choice between an interpretation
	that contains one of these elements and one that does not, the
	former always wins.  Thus, for example, \`*[foo*](bar)\` is
	parsed as \`*&lt;a href=&quot;bar&quot;&gt;foo*&lt;/a&gt;\` rather than as
	\`&lt;em&gt;[foo&lt;/em&gt;](bar)\`.

These rules can be illustrated through a series of examples.

Rule 1:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo bar*
.
&lt;p&gt;&lt;em&gt;foo bar&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not emphasis, because the opening \`*\` is followed by
whitespace, and hence not part of a [left-flanking delimiter run]:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
a * foo bar*
.
&lt;p&gt;a * foo bar*&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not emphasis, because the opening \`*\` is preceded
by an alphanumeric and followed by punctuation, and hence
not part of a [left-flanking delimiter run]:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
a*&quot;foo&quot;*
.
&lt;p&gt;a*&amp;quot;foo&amp;quot;*&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Unicode nonbreaking spaces count as whitespace, too:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
* a *
.
&lt;p&gt;* a *&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Intraword emphasis with \`*\` is permitted:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo*bar*
.
&lt;p&gt;foo&lt;em&gt;bar&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
5*6*78
.
&lt;p&gt;5&lt;em&gt;6&lt;/em&gt;78&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Rule 2:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_foo bar_
.
&lt;p&gt;&lt;em&gt;foo bar&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not emphasis, because the opening \`_\` is followed by
whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_ foo bar_
.
&lt;p&gt;_ foo bar_&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not emphasis, because the opening \`_\` is preceded
by an alphanumeric and followed by punctuation:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
a_&quot;foo&quot;_
.
&lt;p&gt;a_&amp;quot;foo&amp;quot;_&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Emphasis with \`_\` is not allowed inside words:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo_bar_
.
&lt;p&gt;foo_bar_&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
5_6_78
.
&lt;p&gt;5_6_78&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
пристаням_стремятся_
.
&lt;p&gt;пристаням_стремятся_&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Here \`_\` does not generate emphasis, because the first delimiter run
is right-flanking and the second left-flanking:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
aa_&quot;bb&quot;_cc
.
&lt;p&gt;aa_&amp;quot;bb&amp;quot;_cc&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is emphasis, even though the opening delimiter is
both left- and right-flanking, because it is preceded by
punctuation:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo-_(bar)_
.
&lt;p&gt;foo-&lt;em&gt;(bar)&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Rule 3:

This is not emphasis, because the closing delimiter does
not match the opening delimiter:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_foo*
.
&lt;p&gt;_foo*&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not emphasis, because the closing \`*\` is preceded by
whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo bar *
.
&lt;p&gt;*foo bar *&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


A line ending also counts as whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo bar
*
.
&lt;p&gt;*foo bar
*&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not emphasis, because the second \`*\` is
preceded by punctuation and followed by an alphanumeric
(hence it is not part of a [right-flanking delimiter run]:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*(*foo)
.
&lt;p&gt;*(*foo)&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


The point of this restriction is more easily appreciated
with this example:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*(*foo*)*
.
&lt;p&gt;&lt;em&gt;(&lt;em&gt;foo&lt;/em&gt;)&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Intraword emphasis with \`*\` is allowed:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo*bar
.
&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;bar&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`



Rule 4:

This is not emphasis, because the closing \`_\` is preceded by
whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_foo bar _
.
&lt;p&gt;_foo bar _&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not emphasis, because the second \`_\` is
preceded by punctuation and followed by an alphanumeric:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_(_foo)
.
&lt;p&gt;_(_foo)&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is emphasis within emphasis:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_(_foo_)_
.
&lt;p&gt;&lt;em&gt;(&lt;em&gt;foo&lt;/em&gt;)&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Intraword emphasis is disallowed for \`_\`:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_foo_bar
.
&lt;p&gt;_foo_bar&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_пристаням_стремятся
.
&lt;p&gt;_пристаням_стремятся&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_foo_bar_baz_
.
&lt;p&gt;&lt;em&gt;foo_bar_baz&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is emphasis, even though the closing delimiter is
both left- and right-flanking, because it is followed by
punctuation:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_(bar)_.
.
&lt;p&gt;&lt;em&gt;(bar)&lt;/em&gt;.&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Rule 5:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
**foo bar**
.
&lt;p&gt;&lt;strong&gt;foo bar&lt;/strong&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not strong emphasis, because the opening delimiter is
followed by whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
** foo bar**
.
&lt;p&gt;** foo bar**&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not strong emphasis, because the opening \`**\` is preceded
by an alphanumeric and followed by punctuation, and hence
not part of a [left-flanking delimiter run]:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
a**&quot;foo&quot;**
.
&lt;p&gt;a**&amp;quot;foo&amp;quot;**&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Intraword strong emphasis with \`**\` is permitted:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo**bar**
.
&lt;p&gt;foo&lt;strong&gt;bar&lt;/strong&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Rule 6:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__foo bar__
.
&lt;p&gt;&lt;strong&gt;foo bar&lt;/strong&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not strong emphasis, because the opening delimiter is
followed by whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__ foo bar__
.
&lt;p&gt;__ foo bar__&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


A line ending counts as whitespace:
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__
foo bar__
.
&lt;p&gt;__
foo bar__&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not strong emphasis, because the opening \`__\` is preceded
by an alphanumeric and followed by punctuation:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
a__&quot;foo&quot;__
.
&lt;p&gt;a__&amp;quot;foo&amp;quot;__&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Intraword strong emphasis is forbidden with \`__\`:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo__bar__
.
&lt;p&gt;foo__bar__&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
5__6__78
.
&lt;p&gt;5__6__78&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
пристаням__стремятся__
.
&lt;p&gt;пристаням__стремятся__&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__foo, __bar__, baz__
.
&lt;p&gt;&lt;strong&gt;foo, &lt;strong&gt;bar&lt;/strong&gt;, baz&lt;/strong&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is strong emphasis, even though the opening delimiter is
both left- and right-flanking, because it is preceded by
punctuation:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo-__(bar)__
.
&lt;p&gt;foo-&lt;strong&gt;(bar)&lt;/strong&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`



Rule 7:

This is not strong emphasis, because the closing delimiter is preceded
by whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
**foo bar **
.
&lt;p&gt;**foo bar **&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


(Nor can it be interpreted as an emphasized \`*foo bar *\`, because of
Rule 11.)

This is not strong emphasis, because the second \`**\` is
preceded by punctuation and followed by an alphanumeric:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
**(**foo)
.
&lt;p&gt;**(**foo)&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


The point of this restriction is more easily appreciated
with these examples:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*(**foo**)*
.
&lt;p&gt;&lt;em&gt;(&lt;strong&gt;foo&lt;/strong&gt;)&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
**Gomphocarpus (*Gomphocarpus physocarpus*, syn.
*Asclepias physocarpa*)**
.
&lt;p&gt;&lt;strong&gt;Gomphocarpus (&lt;em&gt;Gomphocarpus physocarpus&lt;/em&gt;, syn.
&lt;em&gt;Asclepias physocarpa&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
**foo &quot;*bar*&quot; foo**
.
&lt;p&gt;&lt;strong&gt;foo &amp;quot;&lt;em&gt;bar&lt;/em&gt;&amp;quot; foo&lt;/strong&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Intraword emphasis:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
**foo**bar
.
&lt;p&gt;&lt;strong&gt;foo&lt;/strong&gt;bar&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Rule 8:

This is not strong emphasis, because the closing delimiter is
preceded by whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__foo bar __
.
&lt;p&gt;__foo bar __&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is not strong emphasis, because the second \`__\` is
preceded by punctuation and followed by an alphanumeric:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__(__foo)
.
&lt;p&gt;__(__foo)&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


The point of this restriction is more easily appreciated
with this example:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_(__foo__)_
.
&lt;p&gt;&lt;em&gt;(&lt;strong&gt;foo&lt;/strong&gt;)&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Intraword strong emphasis is forbidden with \`__\`:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__foo__bar
.
&lt;p&gt;__foo__bar&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__пристаням__стремятся
.
&lt;p&gt;__пристаням__стремятся&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__foo__bar__baz__
.
&lt;p&gt;&lt;strong&gt;foo__bar__baz&lt;/strong&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


This is strong emphasis, even though the closing delimiter is
both left- and right-flanking, because it is followed by
punctuation:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__(bar)__.
.
&lt;p&gt;&lt;strong&gt;(bar)&lt;/strong&gt;.&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Rule 9:

Any nonempty sequence of inline elements can be the contents of an
emphasized span.

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo [bar](/url)*
.
&lt;p&gt;&lt;em&gt;foo &lt;a href=&quot;/url&quot;&gt;bar&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo
bar*
.
&lt;p&gt;&lt;em&gt;foo
bar&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


In particular, emphasis and strong emphasis can be nested
inside emphasis:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_foo __bar__ baz_
.
&lt;p&gt;&lt;em&gt;foo &lt;strong&gt;bar&lt;/strong&gt; baz&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
_foo _bar_ baz_
.
&lt;p&gt;&lt;em&gt;foo &lt;em&gt;bar&lt;/em&gt; baz&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
__foo_ bar_
.
&lt;p&gt;&lt;em&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo *bar**
.
&lt;p&gt;&lt;em&gt;foo &lt;em&gt;bar&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo **bar** baz*
.
&lt;p&gt;&lt;em&gt;foo &lt;strong&gt;bar&lt;/strong&gt; baz&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo**bar**baz*
.
&lt;p&gt;&lt;em&gt;foo&lt;strong&gt;bar&lt;/strong&gt;baz&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`

Note that in the preceding case, the interpretation

\`\`\` markdown
&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;&lt;em&gt;bar&lt;em&gt;&lt;/em&gt;baz&lt;/em&gt;&lt;/p&gt;</code></pre><p>is precluded by the condition that a delimiter that can both open and close (like the <code>*</code> after <code>foo</code>) cannot form emphasis if the sum of the lengths of the delimiter runs containing the opening and closing delimiters is a multiple of 3 unless both lengths are multiples of 3.</p><p>For the same reason, we don&#39;t get two consecutive emphasis sections in this example:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo**bar</em> .</p><p><em>foo**bar</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The same condition ensures that the following cases are all strong emphasis nested inside emphasis, even when the interior whitespace is omitted:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example *<strong>foo</strong> bar* .</p><p><em><strong>foo</strong> bar</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo </em><em>bar</em>** .</p><p><em>foo <strong>bar</strong></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo</em><em>bar</em>** .</p><p><em>foo<strong>bar</strong></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>When the lengths of the interior closing and opening delimiter runs are <em>both</em> multiples of 3, though, they can match to create emphasis:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo<em>bar</em>baz .</p><p>foo<em><strong>bar</strong></em>baz</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo<strong>bar</strong>***baz .</p><p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Indefinite levels of nesting are possible:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo **bar </em>baz<em> bim** bop</em> .</p><p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo [</em>bar<em>](/url)</em> .</p><p><em>foo <a href=\\"/url\\"><em>bar</em></a></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>There can be no empty emphasis or strong emphasis:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example ** is not an empty emphasis .</p><p>** is not an empty emphasis</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example **** is not an empty strong emphasis .</p><p>**** is not an empty strong emphasis</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 10:</p><p>Any nonempty sequence of inline elements can be the contents of an strongly emphasized span.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo <a href=\\"/url\\">bar</a></strong> .</p><p><strong>foo <a href=\\"/url\\">bar</a></strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo bar</strong> .</p><p><strong>foo<p>bar</strong></p> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>In particular, emphasis and strong emphasis can be nested inside strong emphasis:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo <em>bar</em> baz</strong> .</p><p><strong>foo <em>bar</em> baz</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo </strong>bar<strong> baz</strong> .</p><p><strong>foo <strong>bar</strong> baz</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example __<strong>foo</strong> bar__ .</p><p><strong><strong>foo</strong> bar</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo </strong>bar**** .</p><p><strong>foo <strong>bar</strong></strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo <em>bar</em> baz</strong> .</p><p><strong>foo <em>bar</em> baz</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo<em>bar</em>baz</strong> .</p><p><strong>foo<em>bar</em>baz</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example *<strong>foo* bar</strong> .</p><p><strong><em>foo</em> bar</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo *bar</strong>* .</p><p><strong>foo <em>bar</em></strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Indefinite levels of nesting are possible:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo *bar </strong>baz<strong> bim* bop</strong> .</p><p><strong>foo <em>bar <strong>baz</strong><p>bim</em> bop</strong></p> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo <a href=\\"/url\\"><em>bar</em></a></strong> .</p><p><strong>foo <a href=\\"/url\\"><em>bar</em></a></strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>There can be no empty emphasis or strong emphasis:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example __ is not an empty emphasis .</p><p>__ is not an empty emphasis</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example ____ is not an empty strong emphasis .</p><p>____ is not an empty strong emphasis</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 11:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo *** .</p><p>foo ***</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo *** .</p><p>foo <em>*</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo <em>_</em> .</p><p>foo <em>_</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo ***** .</p><p>foo *****</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo ***** .</p><p>foo <strong>*</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo <strong>_</strong> .</p><p>foo <strong>_</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that when delimiters do not match evenly, Rule 11 determines that the excess literal <code>*</code> characters will appear outside of the emphasis, rather than inside it:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example *<em>foo</em> .</p><p>*<em>foo</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo</em>* .</p><p><em>foo</em>*</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example *<strong>foo</strong> .</p><p>*<strong>foo</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example ***<em>foo</em> .</p><p>***<em>foo</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo</strong>* .</p><p><strong>foo</strong>*</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo</em>*** .</p><p><em>foo</em>***</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 12:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo ___ .</p><p>foo ___</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo ___ .</p><p>foo <em>_</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo <em>*</em> .</p><p>foo <em>*</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo _____ .</p><p>foo _____</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo _____ .</p><p>foo <strong>_</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example foo <strong>*</strong> .</p><p>foo <strong>*</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example _<em>foo</em> .</p><p>_<em>foo</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that when delimiters do not match evenly, Rule 12 determines that the excess literal <code>_</code> characters will appear outside of the emphasis, rather than inside it:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo</em>_ .</p><p><em>foo</em>_</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example _<strong>foo</strong> .</p><p>_<strong>foo</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example ___<em>foo</em> .</p><p>___<em>foo</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo</strong>_ .</p><p><strong>foo</strong>_</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo</em>___ .</p><p><em>foo</em>___</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 13 implies that if you want emphasis nested directly inside emphasis, you must use different delimiters:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo</strong> .</p><p><strong>foo</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em><em>foo</em></em> .</p><p><em><em>foo</em></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo</strong> .</p><p><strong>foo</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em><em>foo</em></em> .</p><p><em><em>foo</em></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>However, strong emphasis within strong emphasis is possible without switching delimiters:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo</strong> .</p><p><strong><strong>foo</strong></strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo</strong> .</p><p><strong><strong>foo</strong></strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 13 can be applied to arbitrarily long sequences of delimiters:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo</strong> .</p><p><strong><strong><strong>foo</strong></strong></strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 14:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo</em> .</p><p><em><strong>foo</strong></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo</em> .</p><p><em><strong><strong>foo</strong></strong></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 15:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo _bar</em> baz_ .</p><p><em>foo _bar</em> baz_</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo __bar </em>baz bim__ bam* .</p><p><em>foo <strong>bar *baz bim</strong> bam</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 16:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>foo </strong>bar baz** .</p><p>**foo <strong>bar baz</strong></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo </em>bar baz* .</p><p>*foo <em>bar baz</em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Rule 17:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>[bar</em>](/url) .</p><p>*<a href=\\"/url\\">bar*</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo [bar</em>](/url) .</p><p>_foo <a href=\\"/url\\">bar_</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>&lt;img src=&quot;foo&quot; title=&quot;</em>&quot;/&gt; .</p><p>*<img src=\\"foo\\" title=\\"*\\"/></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>&lt;a href=&quot;</strong>&quot;&gt; .</p><p>**<a href=\\"**\\"></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>&lt;a href=&quot;</strong>&quot;&gt; .</p><p>__<a href=\\"__\\"></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example *a</code><em>\`</em> .</p><p><em>a <code>*</code></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example _a</code><em>\`</em> .</p><p><em>a <code>_</code></em></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>a&lt;http://foo.bar/?q=</strong>&gt; .</p><p>**a<a href=\\"http://foo.bar/?q=**\\">http://foo.bar/?q=**</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <strong>a&lt;http://foo.bar/?q=</strong>&gt; .</p><p>__a<a href=\\"http://foo.bar/?q=__\\">http://foo.bar/?q=__</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><h2>Links</h2><p>A link contains [link text] (the visible text), a [link destination] (the URI that is the link destination), and optionally a [link title]. There are two basic kinds of links in Markdown.  In [inline links] the destination and title are given immediately after the link text.  In [reference links] the destination and title are defined elsewhere in the document.</p><p>A <a href=\\"@\\">link text</a> consists of a sequence of zero or more inline elements enclosed by square brackets (<code>[</code> and <code>]</code>).  The following rules apply:</p><ul>
<li>Links may not contain other links, at any level of nesting. If 	multiple otherwise valid link definitions appear nested inside each 	other, the inner-most definition is used.</li>
<li>Brackets are allowed in the [link text] only if (a) they 	are backslash-escaped or (b) they appear as a matched pair of brackets, 	with an open bracket <code>[</code>, a sequence of zero or more inlines, and 	a close bracket <code>]</code>.</li>
<li>Backtick [code spans], [autolinks], and raw [HTML tags] bind more tightly 	than the brackets in link text.  Thus, for example, 	<code>[foo\`]\`</code> could not be a link text, since the second <code>]</code> 	is part of a code span.</li>
<li>The brackets in link text bind more tightly than markers for 	<a href=\\"url\\">emphasis and strong emphasis]. Thus, for example, \`<em>[foo</em></a>\` is a link.</li>
</ul><p>A <a href=\\"@\\">link destination</a> consists of either</p><ul>
<li>a sequence of zero or more characters between an opening <code>&lt;</code> and a 	closing <code>&gt;</code> that contains no line endings or unescaped 	<code>&lt;</code> or <code>&gt;</code> characters, or</li>
<li>a nonempty sequence of characters that does not start with <code>&lt;</code>, 	does not include [ASCII control characters][ASCII control character] 	or [space] character, and includes parentheses only if (a) they are 	backslash-escaped or (b) they are part of a balanced pair of 	unescaped parentheses. 	(Implementations may impose limits on parentheses nesting to 	avoid performance issues, but at least three levels of nesting 	should be supported.)</li>
</ul><p>A <a href=\\"@\\">link title</a>  consists of either</p><ul>
<li>a sequence of zero or more characters between straight double-quote 	characters (<code>&quot;</code>), including a <code>&quot;</code> character only if it is 	backslash-escaped, or</li>
<li>a sequence of zero or more characters between straight single-quote 	characters (<code>&#39;</code>), including a <code>&#39;</code> character only if it is 	backslash-escaped, or</li>
<li>a sequence of zero or more characters between matching parentheses 	(<code>(...)</code>), including a <code>(</code> or <code>)</code> character only if it is 	backslash-escaped.</li>
</ul><p>Although [link titles] may span multiple lines, they may not contain a [blank line].</p><p>An <a href=\\"@\\">inline link</a> consists of a [link text] followed immediately by a left parenthesis <code>(</code>, an optional [link destination], an optional [link title], and a right parenthesis <code>)</code>. These four components may be separated by spaces, tabs, and up to one line ending. If both [link destination] and [link title] are present, they <em>must</em> be separated by spaces, tabs, and up to one line ending.</p><p>The link&#39;s text consists of the inlines contained in the [link text] (excluding the enclosing square brackets). The link&#39;s URI consists of the link destination, excluding enclosing <code>&lt;...&gt;</code> if present, with backslash-escapes in effect as described above.  The link&#39;s title consists of the link title, excluding its enclosing delimiters, with backslash-escapes in effect as described above.</p><p>Here is a simple inline link:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri\\" title=\\"title\\">link</a> .</p><p><a href=\\"/uri\\" title=\\"title\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The title, the link text and even the destination may be omitted:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri\\">link</a> .</p><p><a href=\\"/uri\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [](./target.md) .</p><p><a href=\\"./target.md\\"></a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [link]() .</p><p><a href=\\"\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"<>\\">link</a> .</p><p><a href=\\"\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example []() .</p><p><a href=\\"\\"></a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The destination can only contain spaces if it is enclosed in pointy brackets:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [link](/my uri) .</p><p>[link](/my uri)</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [link](&lt;/my uri&gt;) .</p><p><a href=\\"/my%20uri\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The destination cannot contain line endings, even if enclosed in pointy brackets:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [link](foo bar) .</p><p>[link](foo<p>bar)</p> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [link](<foo bar>) .</p><p>[link](<foo<p>bar&gt;)</p> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The destination can contain <code>)</code> if it is enclosed in pointy brackets:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"<b)c>\\">a</a> .</p><p><a href=\\"b)c\\">a</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Pointy brackets that enclose links must be unescaped:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"<foo\\\\>\\">link</a> .</p><p>[link](&lt;foo&gt;)</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>These are not links, because the opening pointy bracket is not matched properly:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"<b\\">a</a>c <a href=\\"<b\\">a</a>c&gt; <a href=\\"<b>c\\">a</a> .</p><p>[a](&lt;b)c<p><a href=\\"&lt;b\\">a</a>c&amp;gt; <a href=\\"<b>c\\">a</a></p> \`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Parentheses inside the link destination may be escaped:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"\\\\(foo\\\\)\\">link</a> .</p><p><a href=\\"(foo)\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Any number of parentheses are allowed without escaping, as long as they are balanced:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"foo(and(bar))\\">link</a> .</p><p><a href=\\"foo(and(bar))\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>However, if you have unbalanced parentheses, you need to escape or use the <code>&lt;...&gt;</code> form:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"foo(and(bar)\\">link</a> .</p><p>[link](foo(and(bar))</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"foo\\\\(and\\\\(bar\\\\)\\">link</a> .</p><p><a href=\\"foo(and(bar)\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"<foo(and(bar)>\\">link</a> .</p><p><a href=\\"foo(and(bar)\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Parentheses and other symbols can also be escaped, as usual in Markdown:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"foo\\\\)\\\\:\\">link</a> .</p><p><a href=\\"foo):\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>A link can contain fragment identifiers and queries:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"#fragment\\">link</a></p><p><a href=\\"http://example.com#fragment\\">link</a></p><p><a href=\\"http://example.com?foo=3#frag\\">link</a> .</p><p><a href=\\"#fragment\\">link</a></p><p><a href=\\"http://example.com#fragment\\">link</a></p><p><a href=\\"http://example.com?foo=3#frag\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that a backslash before a non-escapable character is just a backslash:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"foo\\\\bar\\">link</a> .</p><p><a href=\\"foo%5Cbar\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>URL-escaping should be left alone inside the destination, as all URL-escaped characters are also valid URL characters. Entity and numerical character references in the destination will be parsed into the corresponding Unicode code points, as usual.  These may be optionally URL-escaped when written as HTML, but this spec does not enforce any particular policy for rendering URLs in HTML or other formats.  Renderers may make different decisions about how to escape or normalize URLs in the output.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"foo%20b&auml;\\">link</a> .</p><p><a href=\\"foo%20b%C3%A4\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that, because titles can often be parsed as destinations, if you try to omit the destination and keep the title, you&#39;ll get unexpected results:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"\\"title\\"\\">link</a> .</p><p><a href=\\"%22title%22\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Titles may be in single quotes, double quotes, or parentheses:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\" title=\\"title\\") [link](/url 'title\\">link</a> [link](/url (title)) .</p><p><a href=\\"/url\\" title=\\"title\\">link</a><a href=\\"/url\\" title=\\"title\\">link</a><a href=\\"/url\\" title=\\"title\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Backslash escapes and entity and numeric character references may be used in titles:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\" title=\\"title \\\\\\"&quot;\\">link</a> .</p><p><a href=\\"/url\\" title=\\"title &quot;&quot;\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Titles must be separated from the link using spaces, tabs, and up to one line ending. Other [Unicode whitespace] like non-breaking space doesn&#39;t work.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\" title=\\"title\\">link</a> .</p><p><a href=\\"/url%C2%A0%22title%22\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Nested balanced quotes are not allowed without escaping:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\" title=\\"title \\"and\\" title\\">link</a> .</p><p>[link](/url &quot;title &quot;and&quot; title&quot;)</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>But it is easy to work around this by using a different quote type:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\" title=\\"title \\"and\\" title\\">link</a> .</p><p><a href=\\"/url\\" title=\\"title &quot;and&quot; title\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>(Note:  <code>Markdown.pl</code> did allow double quotes inside a double-quoted title, and its test suite included a test demonstrating this. But it is hard to see a good rationale for the extra complexity this brings, since there are already many ways---backslash escaping, entity and numeric character references, or using a different quote type for the enclosing title---to write titles containing double quotes.  <code>Markdown.pl</code>&#39;s handling of titles has a number of other strange features.  For example, it allows single-quoted titles in inline links, but not reference links.  And, in reference links but not inline links, it allows a title to begin with <code>&quot;</code> and end with <code>)</code>.  <code>Markdown.pl</code> 1.0.1 even allows titles with no closing quotation mark, though 1.0.2b8 does not. It seems preferable to adopt a simple, rational rule that works the same way in inline links and link reference definitions.)</p><p>Spaces, tabs, and up to one line ending is allowed around the destination and title:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [link](   /uri   &quot;title&quot;  ) .</p><p><a href=\\"/uri\\" title=\\"title\\">link</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>But it is not allowed between the link text and the following parenthesis:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [link] (/uri) .</p><p>[link] (/uri)</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The link text may contain balanced brackets, but not unbalanced ones, unless they are escaped:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri\\">link [foo <a href=\\"/url\\">bar</a>]</a> .</p><p><a href=\\"/uri\\">link [foo [bar]]</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri\\">link] bar</a> .</p><p>[link] bar](/uri)</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri\\">link [bar</a> .</p><p>[link <a href=\\"/uri\\">bar</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri\\">link [bar</a> .</p><p><a href=\\"/uri\\">link [bar</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The link text may contain inline content:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example [link *foo **bar**</code>#\`*](/uri) .</p><p><a href=\\"/uri\\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"moon.jpg)](/uri\\">![moon</a> .</p><p><a href=\\"/uri\\"><img src=\\"moon.jpg\\" alt=\\"moon\\" /></a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>However, links may not contain other links, at any level of nesting.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri)](/uri\\">foo [bar</a> .</p><p>[foo <a href=\\"/uri\\">bar</a>](/uri)</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri)](/uri)*](/uri\\">foo *[bar [baz</a> .</p><p>[foo <em>[bar <a href=\\"/uri\\">baz</a>](/uri)</em>](/uri)</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example</p><img src='uri3' alt='[[foo](uri1)](uri2)'><p>.</p><p><img src=\\"uri3\\" alt=\\"[foo](uri2)\\" /></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>These cases illustrate the precedence of link text grouping over emphasis grouping:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>[foo</em>](/uri) .</p><p>*<a href=\\"/uri\\">foo*</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"baz*\\">foo *bar</a> .</p><p><a href=\\"baz*\\">foo *bar</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Note that brackets that <em>aren&#39;t</em> part of links do not take precedence:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>foo [bar</em> baz] .</p><p><em>foo [bar</em> baz]</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>These cases illustrate the precedence of HTML tags, code spans, and autolinks over link grouping:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"baz\\">foo &lt;bar attr=&quot;</a>&quot;&gt; .</p><p>[foo <bar attr=\\"](baz)\\"></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example [foo</code>](/uri)\` .</p><p>[foo<code>](/uri)</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"uri\\">foo&lt;http://example.com/?search=</a>&gt; .</p><p>[foo<a href=\\"http://example.com/?search=%5D(uri)\\">http://example.com/?search=](uri)</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>There are three kinds of <a href=\\"@\\">reference link</a>s: <a href=\\"#full-reference-link\\">full</a>, <a href=\\"#collapsed-reference-link\\">collapsed</a>, and <a href=\\"#shortcut-reference-link\\">shortcut</a>.</p><p>A <a href=\\"@\\">full reference link</a> consists of a [link text] immediately followed by a [link label] that [matches] a [link reference definition] elsewhere in the document.</p><p>A <a href=\\"@\\">link label</a>  begins with a left bracket (<code>[</code>) and ends with the first right bracket (<code>]</code>) that is not backslash-escaped. Between these brackets there must be at least one character that is not a space, tab, or line ending. Unescaped square bracket characters are not allowed inside the opening and closing square brackets of [link labels].  A link label can have at most 999 characters inside the square brackets.</p><p>One label <a href=\\"@\\">matches</a> another just in case their normalized forms are equal.  To normalize a label, strip off the opening and closing brackets, perform the <em>Unicode case fold</em>, strip leading and trailing spaces, tabs, and line endings, and collapse consecutive internal spaces, tabs, and line endings to a single space.  If there are multiple matching reference link definitions, the one that comes first in the document is used.  (It is desirable in such cases to emit a warning.)</p><p>The link&#39;s URI and title are provided by the matching [link reference definition].</p><p>Here is a simple example:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\">foo</a></p><p>.</p><p><a href=\\"/url\\" title=\\"title\\">foo</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The rules for the [link text] are the same as with [inline links].  Thus:</p><p>The link text may contain balanced brackets, but not unbalanced ones, unless they are escaped:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\">link [foo <a href=\\"/url\\">bar</a>]</a></p><p>.</p><p><a href=\\"/uri\\">link [foo [bar]]</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\">link [bar</a></p><p>.</p><p><a href=\\"/uri\\">link [bar</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>The link text may contain inline content:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example [link *foo **bar**</code>#\`*]<a href=\\"/url\\">ref</a></p><p>.</p><p><a href=\\"/uri\\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"moon.jpg\\">![moon</a>]<a href=\\"/url\\">ref</a></p><p>.</p><p><a href=\\"/uri\\"><img src=\\"moon.jpg\\" alt=\\"moon\\" /></a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>However, links may not contain other links, at any level of nesting.</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/uri\\">foo [bar</a>]<a href=\\"/url\\">ref</a></p><p>.</p><p>[foo <a href=\\"/uri\\">bar</a>]<a href=\\"/uri\\">ref</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\">foo *bar [baz</a>*]<a href=\\"/url\\">ref</a></p><p>.</p><p>[foo <em>bar <a href=\\"/uri\\">baz</a></em>]<a href=\\"/uri\\">ref</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>(In the examples above, we have two [shortcut reference links] instead of one [full reference link].)</p><p>The following cases illustrate the precedence of link text grouping over emphasis grouping:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <em>[foo</em>]<a href=\\"/url\\">ref</a></p><p>.</p><p>*<a href=\\"/uri\\">foo*</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\">foo *bar</a>*</p><p>.</p><p><a href=\\"/uri\\">foo *bar</a>*</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>These cases illustrate the precedence of HTML tags, code spans, and autolinks over link grouping:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\">foo &lt;bar attr=&quot;</a>&quot;&gt;</p><p>.</p><p>[foo <bar attr=\\"][ref]\\"></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`<code>example [foo</code>]<a href=\\"/url\\">ref</a>\`</p><p>.</p><p>[foo<code>][ref]</code></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url\\">foo&lt;http://example.com/?search=</a>&gt;</p><p>.</p><p>[foo<a href=\\"http://example.com/?search=%5D%5Bref%5D\\">http://example.com/?search=][ref]</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Matching is case-insensitive:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [foo][BaR]</p><p>.</p><p><a href=\\"/url\\" title=\\"title\\">foo</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Unicode case fold is used:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [ẞ]</p><p>.</p><p><a href=\\"/url\\">ẞ</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>Consecutive internal spaces, tabs, and line endings are treated as one space for purposes of determining matching:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example [Foo   bar]: /url</p><p>[Baz][Foo bar] .</p><p><a href=\\"/url\\">Baz</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>No spaces, tabs, or line endings are allowed between the [link text] and the [link label]:</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url1\\">foo</a> <a href=\\"/url\\">bar</a></p><p>.</p><p>[foo] <a href=\\"/url\\" title=\\"title\\">bar</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example <a href=\\"/url1\\">foo</a> <a href=\\"/url\\">bar</a></p><p>.</p><p>[foo]<a href=\\"/url\\" title=\\"title\\">bar</a></p><p>\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`</p><p>This is a departure from John Gruber&#39;s original Markdown syntax description, which explicitly allows whitespace between the link text and the link label.  It brings reference links in line with [inline links], which (according to both original Markdown and this spec) cannot have whitespace after the link text.  More importantly, it prevents inadvertent capture of consecutive [shortcut reference links]. If whitespace is allowed between the link text and the link label, then in the following we will have a single reference link, not two shortcut reference links, as intended:</p><p>\`\`\` markdown <a href=\\"/url1\\">foo</a> <a href=\\"/url\\">bar</a></p><pre><code>
(Note that [shortcut reference links] were introduced by Gruber
himself in a beta version of \`Markdown.pl\`, but never included
in the official syntax description.  Without shortcut reference
links, it is harmless to allow space between the link text and
link label; but once shortcut references are introduced, it is
too dangerous to allow this, as it frequently leads to
unintended results.)

When there are multiple matching [link reference definitions],
the first is used:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example


[bar][foo]
.
&lt;p&gt;&lt;a href=&quot;/url1&quot;&gt;bar&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Note that matching is performed on normalized strings, not parsed
inline content.  So the following does not match, even though the
labels define equivalent inline content:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[bar][foo\\\\!]

.
&lt;p&gt;[bar][foo!]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


[Link labels] cannot contain brackets, unless they are
backslash-escaped:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][ref[]

.
&lt;p&gt;[foo][ref[]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][ref[bar]]

.
&lt;p&gt;[foo][ref[bar]]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[[[foo]]]

.
&lt;p&gt;[[[foo]]]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][ref\\\\[]

.
&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Note that in this example \`]\` is not backslash-escaped:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example

[bar\\\\\\\\]
.
&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;bar\\\\&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


A [link label] must contain at least one character that is not a space, tab, or
line ending:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[]

[]: /uri
.
&lt;p&gt;[]&lt;/p&gt;
&lt;p&gt;[]: /uri&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[
 ]

[
 ]: /uri
.
&lt;p&gt;[
]&lt;/p&gt;
&lt;p&gt;[
]: /uri&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


A [collapsed reference link](@)
consists of a [link label] that [matches] a
[link reference definition] elsewhere in the
document, followed by the string \`[]\`.
The contents of the first link label are parsed as inlines,
which are used as the link&#39;s text.  The link&#39;s URI and title are
provided by the matching reference link definition.  Thus,
\`[foo][]\` is equivalent to \`[foo][foo]\`.

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][]

.
&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[*foo* bar][]

.
&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


The link labels are case-insensitive:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[Foo][]

.
&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;Foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`



As with full reference links, spaces, tabs, or line endings are not
allowed between the two sets of brackets:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo]
[]

.
&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;
[]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


A [shortcut reference link](@)
consists of a [link label] that [matches] a
[link reference definition] elsewhere in the
document and is not followed by \`[]\` or a link label.
The contents of the first link label are parsed as inlines,
which are used as the link&#39;s text.  The link&#39;s URI and title
are provided by the matching link reference definition.
Thus, \`[foo]\` is equivalent to \`[foo][]\`.

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo]

.
&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[*foo* bar]

.
&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[[*foo* bar]]

.
&lt;p&gt;[&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/a&gt;]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[[bar [foo]

.
&lt;p&gt;[[bar &lt;a href=&quot;/url&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


The link labels are case-insensitive:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[Foo]

.
&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;Foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


A space after the link text should be preserved:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo] bar

.
&lt;p&gt;&lt;a href=&quot;/url&quot;&gt;foo&lt;/a&gt; bar&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


If you just want bracketed text, you can backslash-escape the
opening bracket to avoid links:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
\\\\[foo]

.
&lt;p&gt;[foo]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Note that this is a link, because a link label ends with the first
following closing bracket:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example

*[foo*]
.
&lt;p&gt;*&lt;a href=&quot;/url&quot;&gt;foo*&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Full and compact references take precedence over shortcut
references:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][bar]

.
&lt;p&gt;&lt;a href=&quot;/url2&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][]

.
&lt;p&gt;&lt;a href=&quot;/url1&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`

Inline links also take precedence:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo]()

.
&lt;p&gt;&lt;a href=&quot;&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo](not a link)

.
&lt;p&gt;&lt;a href=&quot;/url1&quot;&gt;foo&lt;/a&gt;(not a link)&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`

In the following case \`[bar][baz]\` is parsed as a reference,
\`[foo]\` as normal text:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][bar][baz]

.
&lt;p&gt;[foo]&lt;a href=&quot;/url&quot;&gt;bar&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Here, though, \`[foo][bar]\` is parsed as a reference, since
\`[bar]\` is defined:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][bar][baz]

.
&lt;p&gt;&lt;a href=&quot;/url2&quot;&gt;foo&lt;/a&gt;&lt;a href=&quot;/url1&quot;&gt;baz&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Here \`[foo]\` is not parsed as a shortcut reference, because it
is followed by a link label (even though \`[bar]\` is not defined):

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
[foo][bar][baz]

.
&lt;p&gt;[foo]&lt;a href=&quot;/url1&quot;&gt;bar&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`



## Images

Syntax for images is like the syntax for links, with one
difference. Instead of [link text], we have an
[image description](@).  The rules for this are the
same as for [link text], except that (a) an
image description starts with \`![\` rather than \`[\`, and
(b) an image description may contain links.
An image description has inline elements
as its contents.  When an image is rendered to HTML,
this is standardly used as the image&#39;s \`alt\` attribute.

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo](/url &quot;title&quot;)
.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo *bar*]

.
&lt;p&gt;&lt;img src=&quot;train.jpg&quot; alt=&quot;foo bar&quot; title=&quot;train &amp;amp; tracks&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo ![bar](/url)](/url2)
.
&lt;p&gt;&lt;img src=&quot;/url2&quot; alt=&quot;foo bar&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo [bar](/url)](/url2)
.
&lt;p&gt;&lt;img src=&quot;/url2&quot; alt=&quot;foo bar&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Though this spec is concerned with parsing, not rendering, it is
recommended that in rendering to HTML, only the plain string content
of the [image description] be used.  Note that in
the above example, the alt attribute&#39;s value is \`foo bar\`, not \`foo
[bar](/url)\` or \`foo &lt;a href=&quot;/url&quot;&gt;bar&lt;/a&gt;\`.  Only the plain string
content is rendered, without formatting.

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo *bar*][]

.
&lt;p&gt;&lt;img src=&quot;train.jpg&quot; alt=&quot;foo bar&quot; title=&quot;train &amp;amp; tracks&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo *bar*][foobar]

.
&lt;p&gt;&lt;img src=&quot;train.jpg&quot; alt=&quot;foo bar&quot; title=&quot;train &amp;amp; tracks&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo](train.jpg)
.
&lt;p&gt;&lt;img src=&quot;train.jpg&quot; alt=&quot;foo&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
My ![foo bar](/path/to/train.jpg  &quot;title&quot;   )
.
&lt;p&gt;My &lt;img src=&quot;/path/to/train.jpg&quot; alt=&quot;foo bar&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo](&lt;url&gt;)
.
&lt;p&gt;&lt;img src=&quot;url&quot; alt=&quot;foo&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![](/url)
.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Reference-style:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo][bar]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo][bar]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Collapsed:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo][]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![*foo* bar][]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo bar&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


The labels are case-insensitive:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![Foo][]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;Foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


As with reference links, spaces, tabs, and line endings, are not allowed
between the two sets of brackets:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo]
[]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; title=&quot;title&quot; /&gt;
[]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Shortcut:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![foo]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![*foo* bar]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo bar&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Note that link labels cannot contain unescaped brackets:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![[foo]]

.
&lt;p&gt;![[foo]]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


The link labels are case-insensitive:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
![Foo]

.
&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;Foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


If you just want a literal \`!\` followed by bracketed text, you can
backslash-escape the opening \`[\`:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
!\\\\[foo]

.
&lt;p&gt;![foo]&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


If you want a link after a literal \`!\`, backslash-escape the
\`!\`:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
\\\\![foo]

.
&lt;p&gt;!&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


## Autolinks

[Autolink](@)s are absolute URIs and email addresses inside
\`&lt;\` and \`&gt;\`. They are parsed as links, with the URL or email address
as the link label.

A [URI autolink](@) consists of \`&lt;\`, followed by an
[absolute URI] followed by \`&gt;\`.  It is parsed as
a link to the URI, with the URI as the link&#39;s label.

An [absolute URI](@),
for these purposes, consists of a [scheme] followed by a colon (\`:\`)
followed by zero or more characters other [ASCII control
characters][ASCII control character], [space], \`&lt;\`, and \`&gt;\`.
If the URI includes these characters, they must be percent-encoded
(e.g. \`%20\` for a space).

For purposes of this spec, a [scheme](@) is any sequence
of 2--32 characters beginning with an ASCII letter and followed
by any combination of ASCII letters, digits, or the symbols plus
(&quot;+&quot;), period (&quot;.&quot;), or hyphen (&quot;-&quot;).

Here are some valid autolinks:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;http://foo.bar.baz&gt;
.
&lt;p&gt;&lt;a href=&quot;http://foo.bar.baz&quot;&gt;http://foo.bar.baz&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean&gt;
.
&lt;p&gt;&lt;a href=&quot;http://foo.bar.baz/test?q=hello&amp;amp;id=22&amp;amp;boolean&quot;&gt;http://foo.bar.baz/test?q=hello&amp;amp;id=22&amp;amp;boolean&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;irc://foo.bar:2233/baz&gt;
.
&lt;p&gt;&lt;a href=&quot;irc://foo.bar:2233/baz&quot;&gt;irc://foo.bar:2233/baz&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Uppercase is also fine:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;MAILTO:FOO@BAR.BAZ&gt;
.
&lt;p&gt;&lt;a href=&quot;MAILTO:FOO@BAR.BAZ&quot;&gt;MAILTO:FOO@BAR.BAZ&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Note that many strings that count as [absolute URIs] for
purposes of this spec are not valid URIs, because their
schemes are not registered or because of other problems
with their syntax:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a+b+c:d&gt;
.
&lt;p&gt;&lt;a href=&quot;a+b+c:d&quot;&gt;a+b+c:d&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;made-up-scheme://foo,bar&gt;
.
&lt;p&gt;&lt;a href=&quot;made-up-scheme://foo,bar&quot;&gt;made-up-scheme://foo,bar&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;http://../&gt;
.
&lt;p&gt;&lt;a href=&quot;http://../&quot;&gt;http://../&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;localhost:5001/foo&gt;
.
&lt;p&gt;&lt;a href=&quot;localhost:5001/foo&quot;&gt;localhost:5001/foo&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Spaces are not allowed in autolinks:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;http://foo.bar/baz bim&gt;
.
&lt;p&gt;&amp;lt;http://foo.bar/baz bim&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Backslash-escapes do not work inside autolinks:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;http://example.com/\\\\[\\\\&gt;
.
&lt;p&gt;&lt;a href=&quot;http://example.com/%5C%5B%5C&quot;&gt;http://example.com/\\\\[\\\\&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


An [email autolink](@)
consists of \`&lt;\`, followed by an [email address],
followed by \`&gt;\`.  The link&#39;s label is the email address,
and the URL is \`mailto:\` followed by the email address.

An [email address](@),
for these purposes, is anything that matches
the [non-normative regex from the HTML5
spec](https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email)):

    /^[a-zA-Z0-9.!#$%&amp;&#39;*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?
    (?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/

Examples of email autolinks:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;foo@bar.example.com&gt;
.
&lt;p&gt;&lt;a href=&quot;mailto:foo@bar.example.com&quot;&gt;foo@bar.example.com&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;foo+special@Bar.baz-bar0.com&gt;
.
&lt;p&gt;&lt;a href=&quot;mailto:foo+special@Bar.baz-bar0.com&quot;&gt;foo+special@Bar.baz-bar0.com&lt;/a&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Backslash-escapes do not work inside email autolinks:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;foo\\\\+@bar.example.com&gt;
.
&lt;p&gt;&amp;lt;foo+@bar.example.com&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


These are not autolinks:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;&gt;
.
&lt;p&gt;&amp;lt;&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt; http://foo.bar &gt;
.
&lt;p&gt;&amp;lt; http://foo.bar &amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;m:abc&gt;
.
&lt;p&gt;&amp;lt;m:abc&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;foo.bar.baz&gt;
.
&lt;p&gt;&amp;lt;foo.bar.baz&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
http://example.com
.
&lt;p&gt;http://example.com&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo@bar.example.com
.
&lt;p&gt;foo@bar.example.com&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


## Raw HTML

Text between \`&lt;\` and \`&gt;\` that looks like an HTML tag is parsed as a
raw HTML tag and will be rendered in HTML without escaping.
Tag and attribute names are not limited to current HTML tags,
so custom tags (and even, say, DocBook tags) may be used.

Here is the grammar for tags:

A [tag name](@) consists of an ASCII letter
followed by zero or more ASCII letters, digits, or
hyphens (\`-\`).

An [attribute](@) consists of spaces, tabs, and up to one line ending,
an [attribute name], and an optional
[attribute value specification].

An [attribute name](@)
consists of an ASCII letter, \`_\`, or \`:\`, followed by zero or more ASCII
letters, digits, \`_\`, \`.\`, \`:\`, or \`-\`.  (Note:  This is the XML
specification restricted to ASCII.  HTML5 is laxer.)

An [attribute value specification](@)
consists of optional spaces, tabs, and up to one line ending,
a \`=\` character, optional spaces, tabs, and up to one line ending,
and an [attribute value].

An [attribute value](@)
consists of an [unquoted attribute value],
a [single-quoted attribute value], or a [double-quoted attribute value].

An [unquoted attribute value](@)
is a nonempty string of characters not
including spaces, tabs, line endings, \`&quot;\`, \`&#39;\`, \`=\`, \`&lt;\`, \`&gt;\`, or \`\` \` \`\`.

A [single-quoted attribute value](@)
consists of \`&#39;\`, zero or more
characters not including \`&#39;\`, and a final \`&#39;\`.

A [double-quoted attribute value](@)
consists of \`&quot;\`, zero or more
characters not including \`&quot;\`, and a final \`&quot;\`.

An [open tag](@) consists of a \`&lt;\` character, a [tag name],
zero or more [attributes], optional spaces, tabs, and up to one line ending,
an optional \`/\` character, and a \`&gt;\` character.

A [closing tag](@) consists of the string \`&lt;/\`, a
[tag name], optional spaces, tabs, and up to one line ending, and the character
\`&gt;\`.

An [HTML comment](@) consists of \`&lt;!--\` + *text* + \`--&gt;\`,
where *text* does not start with \`&gt;\` or \`-&gt;\`, does not end with \`-\`,
and does not contain \`--\`.  (See the
[HTML5 spec](http://www.w3.org/TR/html5/syntax.html#comments).)

A [processing instruction](@)
consists of the string \`&lt;?\`, a string
of characters not including the string \`?&gt;\`, and the string
\`?&gt;\`.

A [declaration](@) consists of the string \`&lt;!\`, an ASCII letter, zero or more
characters not including the character \`&gt;\`, and the character \`&gt;\`.

A [CDATA section](@) consists of
the string \`&lt;![CDATA[\`, a string of characters not including the string
\`]]&gt;\`, and the string \`]]&gt;\`.

An [HTML tag](@) consists of an [open tag], a [closing tag],
an [HTML comment], a [processing instruction], a [declaration],
or a [CDATA section].

Here are some simple open tags:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a&gt;&lt;bab&gt;&lt;c2c&gt;
.
&lt;p&gt;&lt;a&gt;&lt;bab&gt;&lt;c2c&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Empty elements:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a/&gt;&lt;b2/&gt;
.
&lt;p&gt;&lt;a/&gt;&lt;b2/&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Whitespace is allowed:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a  /&gt;&lt;b2
data=&quot;foo&quot; &gt;
.
&lt;p&gt;&lt;a  /&gt;&lt;b2
data=&quot;foo&quot; &gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


With attributes:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a foo=&quot;bar&quot; bam = &#39;baz &lt;em&gt;&quot;&lt;/em&gt;&#39;
_boolean zoop:33=zoop:33 /&gt;
.
&lt;p&gt;&lt;a foo=&quot;bar&quot; bam = &#39;baz &lt;em&gt;&quot;&lt;/em&gt;&#39;
_boolean zoop:33=zoop:33 /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Custom tag names can be used:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
Foo &lt;responsive-image src=&quot;foo.jpg&quot; /&gt;
.
&lt;p&gt;Foo &lt;responsive-image src=&quot;foo.jpg&quot; /&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Illegal tag names, not parsed as HTML:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;33&gt; &lt;__&gt;
.
&lt;p&gt;&amp;lt;33&amp;gt; &amp;lt;__&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Illegal attribute names:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a h*#ref=&quot;hi&quot;&gt;
.
&lt;p&gt;&amp;lt;a h*#ref=&amp;quot;hi&amp;quot;&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Illegal attribute values:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a href=&quot;hi&#39;&gt; &lt;a href=hi&#39;&gt;
.
&lt;p&gt;&amp;lt;a href=&amp;quot;hi&#39;&amp;gt; &amp;lt;a href=hi&#39;&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Illegal whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt; a&gt;&lt;
foo&gt;&lt;bar/ &gt;
&lt;foo bar=baz
bim!bop /&gt;
.
&lt;p&gt;&amp;lt; a&amp;gt;&amp;lt;
foo&amp;gt;&amp;lt;bar/ &amp;gt;
&amp;lt;foo bar=baz
bim!bop /&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Missing whitespace:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a href=&#39;bar&#39;title=title&gt;
.
&lt;p&gt;&amp;lt;a href=&#39;bar&#39;title=title&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Closing tags:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;/a&gt;&lt;/foo &gt;
.
&lt;p&gt;&lt;/a&gt;&lt;/foo &gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Illegal attributes in closing tag:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;/a href=&quot;foo&quot;&gt;
.
&lt;p&gt;&amp;lt;/a href=&amp;quot;foo&amp;quot;&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Comments:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo &lt;!-- this is a
comment - with hyphen --&gt;
.
&lt;p&gt;foo &lt;!-- this is a
comment - with hyphen --&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo &lt;!-- not a comment -- two hyphens --&gt;
.
&lt;p&gt;foo &amp;lt;!-- not a comment -- two hyphens --&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Not comments:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo &lt;!--&gt; foo --&gt;

foo &lt;!-- foo---&gt;
.
&lt;p&gt;foo &amp;lt;!--&amp;gt; foo --&amp;gt;&lt;/p&gt;
&lt;p&gt;foo &amp;lt;!-- foo---&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Processing instructions:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo &lt;?php echo $a; ?&gt;
.
&lt;p&gt;foo &lt;?php echo $a; ?&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Declarations:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo &lt;!ELEMENT br EMPTY&gt;
.
&lt;p&gt;foo &lt;!ELEMENT br EMPTY&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


CDATA sections:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo &lt;![CDATA[&gt;&amp;&lt;]]&gt;
.
&lt;p&gt;foo &lt;![CDATA[&gt;&amp;&lt;]]&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Entity and numeric character references are preserved in HTML
attributes:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo &lt;a href=&quot;&amp;ouml;&quot;&gt;
.
&lt;p&gt;foo &lt;a href=&quot;&amp;ouml;&quot;&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Backslash escapes do not work in HTML attributes:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo &lt;a href=&quot;\\\\*&quot;&gt;
.
&lt;p&gt;foo &lt;a href=&quot;\\\\*&quot;&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a href=&quot;\\\\&quot;&quot;&gt;
.
&lt;p&gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;quot;&amp;gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


## Hard line breaks

A line ending (not in a code span or HTML tag) that is preceded
by two or more spaces and does not occur at the end of a block
is parsed as a [hard line break](@) (rendered
in HTML as a \`&lt;br /&gt;\` tag):

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo
baz
.
&lt;p&gt;foo&lt;br /&gt;
baz&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


For a more visible alternative, a backslash before the
[line ending] may be used instead of two or more spaces:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo\\\\
baz
.
&lt;p&gt;foo&lt;br /&gt;
baz&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


More than two spaces can be used:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo
baz
.
&lt;p&gt;foo&lt;br /&gt;
baz&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Leading spaces at the beginning of the next line are ignored:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo
     bar
.
&lt;p&gt;foo&lt;br /&gt;
bar&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo\\\\
     bar
.
&lt;p&gt;foo&lt;br /&gt;
bar&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Hard line breaks can occur inside emphasis, links, and other constructs
that allow inline content:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo
bar*
.
&lt;p&gt;&lt;em&gt;foo&lt;br /&gt;
bar&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
*foo\\\\
bar*
.
&lt;p&gt;&lt;em&gt;foo&lt;br /&gt;
bar&lt;/em&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Hard line breaks do not occur inside code spans

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
\`code
span\`
.
&lt;p&gt;&lt;code&gt;code   span&lt;/code&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
\`code\\\\
span\`
.
&lt;p&gt;&lt;code&gt;code\\\\ span&lt;/code&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


or HTML tags:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a href=&quot;foo
bar&quot;&gt;
.
&lt;p&gt;&lt;a href=&quot;foo
bar&quot;&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
&lt;a href=&quot;foo\\\\
bar&quot;&gt;
.
&lt;p&gt;&lt;a href=&quot;foo\\\\
bar&quot;&gt;&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Hard line breaks are for separating inline content within a block.
Neither syntax for hard line breaks works at the end of a paragraph or
other block element:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo\\\\
.
&lt;p&gt;foo\\\\&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo
.
&lt;p&gt;foo&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
### foo\\\\
.
&lt;h3&gt;foo\\\\&lt;/h3&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
### foo
.
&lt;h3&gt;foo&lt;/h3&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


## Soft line breaks

A regular line ending (not in a code span or HTML tag) that is not
preceded by two or more spaces or a backslash is parsed as a
[softbreak](@).  (A soft line break may be rendered in HTML either as a
[line ending] or as a space. The result will be the same in
browsers. In the examples here, a [line ending] will be used.)

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo
baz
.
&lt;p&gt;foo
baz&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Spaces at the end of the line and beginning of the next line are
removed:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
foo
 baz
.
&lt;p&gt;foo
baz&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


A conforming parser may render a soft line break in HTML either as a
line ending or as a space.

A renderer may also provide an option to render soft line breaks
as hard line breaks.

## Textual content

Any characters not given an interpretation by the above rules will
be parsed as plain textual content.

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
hello $.;&#39;there
.
&lt;p&gt;hello $.;&#39;there&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
Foo χρῆν
.
&lt;p&gt;Foo χρῆν&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


Internal spaces are preserved verbatim:

\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\` example
Multiple     spaces
.
&lt;p&gt;Multiple     spaces&lt;/p&gt;
\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`\`


&lt;!-- END TESTS --&gt;

# Appendix: A parsing strategy

In this appendix we describe some features of the parsing strategy
used in the CommonMark reference implementations.

## Overview

Parsing has two phases:

1. In the first phase, lines of input are consumed and the block
	 structure of the document---its division into paragraphs, block quotes,
	 list items, and so on---is constructed.  Text is assigned to these
	 blocks but not parsed. Link reference definitions are parsed and a
	 map of links is constructed.

2. In the second phase, the raw text contents of paragraphs and headings
	 are parsed into sequences of Markdown inline elements (strings,
	 code spans, links, emphasis, and so on), using the map of link
	 references constructed in phase 1.

At each point in processing, the document is represented as a tree of
**blocks**.  The root of the tree is a \`document\` block.  The \`document\`
may have any number of other blocks as **children**.  These children
may, in turn, have other blocks as children.  The last child of a block
is normally considered **open**, meaning that subsequent lines of input
can alter its contents.  (Blocks that are not open are **closed**.)
Here, for example, is a possible document tree, with the open blocks
marked by arrows:

\`\`\` tree
-&gt; document
  -&gt; block_quote
       paragraph
         &quot;Lorem ipsum dolor\\\\nsit amet.&quot;
    -&gt; list (type=bullet tight=true bullet_char=-)
         list_item
           paragraph
             &quot;Qui *quodsi iracundia*&quot;
      -&gt; list_item
        -&gt; paragraph
             &quot;aliquando id&quot;</code></pre><h2>Phase 1: block structure</h2><p>Each line that is processed has an effect on this tree.  The line is analyzed and, depending on its contents, the document may be altered in one or more of the following ways:</p><ol>
<li>One or more open blocks may be closed.</li>
<li>One or more new blocks may be created as children of the 	 last open block.</li>
<li>Text may be added to the last (deepest) open block remaining 	 on the tree.</li>
</ol><p>Once a line has been incorporated into the tree in this way, it can be discarded, so input can be read in a stream.</p><p>For each line, we follow this procedure:</p><ol>
<li>First we iterate through the open blocks, starting with the 	 root document, and descending through last children down to the last 	 open block.  Each block imposes a condition that the line must satisfy 	 if the block is to remain open.  For example, a block quote requires a 	 <code>&gt;</code> character.  A paragraph requires a non-blank line. 	 In this phase we may match all or just some of the open 	 blocks.  But we cannot close unmatched blocks yet, because we may have a 	 [lazy continuation line].</li>
<li>Next, after consuming the continuation markers for existing 		blocks, we look for new block starts (e.g. <code>&gt;</code> for a block quote). 		If we encounter a new block start, we close any blocks unmatched 		in step 1 before creating the new block as a child of the last 		matched container block.</li>
<li>Finally, we look at the remainder of the line (after block 		markers like <code>&gt;</code>, list markers, and indentation have been consumed). 		This is text that can be incorporated into the last open 		block (a paragraph, code block, heading, or raw HTML).</li>
</ol><p>Setext headings are formed when we see a line of a paragraph that is a [setext heading underline].</p><p>Reference link definitions are detected when a paragraph is closed; the accumulated text lines are parsed to see if they begin with one or more reference link definitions.  Any remainder becomes a normal paragraph.</p><p>We can see how this works by considering how the tree above is generated by four lines of Markdown:</p><p>\`\`\` markdown</p><blockquote>
<p> Lorem ipsum dolor sit amet.</p><ul>
<li>Qui <em>quodsi iracundia</em></li>
<li>aliquando id</li>
</ul></blockquote><pre><code>
At the outset, our document model is just

\`\`\` tree
-&gt; document</code></pre><p>The first line of our text,</p><p>\`\`\` markdown</p><blockquote>
<p> Lorem ipsum dolor</p></blockquote><pre><code>
causes a \`block_quote\` block to be created as a child of our
open \`document\` block, and a \`paragraph\` block as a child of
the \`block_quote\`.  Then the text is added to the last open
block, the \`paragraph\`:

\`\`\` tree
-&gt; document
  -&gt; block_quote
    -&gt; paragraph
         &quot;Lorem ipsum dolor&quot;</code></pre><p>The next line,</p><p>\`\`\` markdown sit amet.</p><pre><code>
is a &quot;lazy continuation&quot; of the open \`paragraph\`, so it gets added
to the paragraph&#39;s text:

\`\`\` tree
-&gt; document
  -&gt; block_quote
    -&gt; paragraph
         &quot;Lorem ipsum dolor\\\\nsit amet.&quot;</code></pre><p>The third line,</p><p>\`\`\` markdown</p><blockquote>
<ul>
<li>Qui <em>quodsi iracundia</em></li>
</ul></blockquote><pre><code>
causes the \`paragraph\` block to be closed, and a new \`list\` block
opened as a child of the \`block_quote\`.  A \`list_item\` is also
added as a child of the \`list\`, and a \`paragraph\` as a child of
the \`list_item\`.  The text is then added to the new \`paragraph\`:

\`\`\` tree
-&gt; document
  -&gt; block_quote
       paragraph
         &quot;Lorem ipsum dolor\\\\nsit amet.&quot;
    -&gt; list (type=bullet tight=true bullet_char=-)
      -&gt; list_item
        -&gt; paragraph
             &quot;Qui *quodsi iracundia*&quot;</code></pre><p>The fourth line,</p><p>\`\`\` markdown</p><blockquote>
<ul>
<li>aliquando id</li>
</ul></blockquote><pre><code>
causes the \`list_item\` (and its child the \`paragraph\`) to be closed,
and a new \`list_item\` opened up as child of the \`list\`.  A \`paragraph\`
is added as a child of the new \`list_item\`, to contain the text.
We thus obtain the final tree:

\`\`\` tree
-&gt; document
  -&gt; block_quote
       paragraph
         &quot;Lorem ipsum dolor\\\\nsit amet.&quot;
    -&gt; list (type=bullet tight=true bullet_char=-)
         list_item
           paragraph
             &quot;Qui *quodsi iracundia*&quot;
      -&gt; list_item
        -&gt; paragraph
             &quot;aliquando id&quot;</code></pre><h2>Phase 2: inline structure</h2><p>Once all of the input has been parsed, all open blocks are closed.</p><p>We then &quot;walk the tree,&quot; visiting every node, and parse raw string contents of paragraphs and headings as inlines.  At this point we have seen all the link reference definitions, so we can resolve reference links as we go.</p><p>\`\`\` tree document   block<em>quote     paragraph       str &quot;Lorem ipsum dolor&quot;       softbreak       str &quot;sit amet.&quot;     list (type=bullet tight=true bullet</em>char=-)       list<em>item         paragraph           str &quot;Qui &quot;           emph             str &quot;quodsi iracundia&quot;       list</em>item         paragraph           str &quot;aliquando id&quot;</p><pre><code>
Notice how the [line ending] in the first paragraph has
been parsed as a \`softbreak\`, and the asterisks in the first list item
have become an \`emph\`.

### An algorithm for parsing nested emphasis and links

By far the trickiest part of inline parsing is handling emphasis,
strong emphasis, links, and images.  This is done using the following
algorithm.

When we&#39;re parsing inlines and we hit either

- a run of \`*\` or \`_\` characters, or
- a \`[\` or \`![\`

we insert a text node with these symbols as its literal content, and we
add a pointer to this text node to the [delimiter stack](@).

The [delimiter stack] is a doubly linked list.  Each
element contains a pointer to a text node, plus information about

- the type of delimiter (\`[\`, \`![\`, \`*\`, \`_\`)
- the number of delimiters,
- whether the delimiter is &quot;active&quot; (all are active to start), and
- whether the delimiter is a potential opener, a potential closer,
	or both (which depends on what sort of characters precede
	and follow the delimiters).

When we hit a \`]\` character, we call the *look for link or image*
procedure (see below).

When we hit the end of the input, we call the *process emphasis*
procedure (see below), with \`stack_bottom\` = NULL.

#### *look for link or image*

Starting at the top of the delimiter stack, we look backwards
through the stack for an opening \`[\` or \`![\` delimiter.

- If we don&#39;t find one, we return a literal text node \`]\`.

- If we do find one, but it&#39;s not *active*, we remove the inactive
	delimiter from the stack, and return a literal text node \`]\`.

- If we find one and it&#39;s active, then we parse ahead to see if
	we have an inline link/image, reference link/image, compact reference
	link/image, or shortcut reference link/image.

	+ If we don&#39;t, then we remove the opening delimiter from the
		delimiter stack and return a literal text node \`]\`.

	+ If we do, then

		* We return a link or image node whose children are the inlines
			after the text node pointed to by the opening delimiter.

		* We run *process emphasis* on these inlines, with the \`[\` opener
			as \`stack_bottom\`.

		* We remove the opening delimiter.

		* If we have a link (and not an image), we also set all
			\`[\` delimiters before the opening delimiter to *inactive*.  (This
			will prevent us from getting links within links.)

#### *process emphasis*

Parameter \`stack_bottom\` sets a lower bound to how far we
descend in the [delimiter stack].  If it is NULL, we can
go all the way to the bottom.  Otherwise, we stop before
visiting \`stack_bottom\`.

Let \`current_position\` point to the element on the [delimiter stack]
just above \`stack_bottom\` (or the first element if \`stack_bottom\`
is NULL).

We keep track of the \`openers_bottom\` for each delimiter
type (\`*\`, \`_\`), indexed to the length of the closing delimiter run
(modulo 3) and to whether the closing delimiter can also be an
opener.  Initialize this to \`stack_bottom\`.

Then we repeat the following until we run out of potential
closers:

- Move \`current_position\` forward in the delimiter stack (if needed)
	until we find the first potential closer with delimiter \`*\` or \`_\`.
	(This will be the potential closer closest
	to the beginning of the input -- the first one in parse order.)

- Now, look back in the stack (staying above \`stack_bottom\` and
	the \`openers_bottom\` for this delimiter type) for the
	first matching potential opener (&quot;matching&quot; means same delimiter).

- If one is found:

	+ Figure out whether we have emphasis or strong emphasis:
		if both closer and opener spans have length &gt;= 2, we have
		strong, otherwise regular.

	+ Insert an emph or strong emph node accordingly, after
		the text node corresponding to the opener.

	+ Remove any delimiters between the opener and closer from
		the delimiter stack.

	+ Remove 1 (for regular emph) or 2 (for strong emph) delimiters
		from the opening and closing text nodes.  If they become empty
		as a result, remove them and remove the corresponding element
		of the delimiter stack.  If the closing node is removed, reset
		\`current_position\` to the next element in the stack.

- If none is found:

	+ Set \`openers_bottom\` to the element before \`current_position\`.
		(We know that there are no openers for this kind of closer up to and
		including this point, so this puts a lower bound on future searches.)

	+ If the closer at \`current_position\` is not a potential opener,
		remove it from the delimiter stack (since we know it can&#39;t
		be a closer either).

	+ Advance \`current_position\` to the next element in the stack.

After we&#39;re done, we remove all delimiters above \`stack_bottom\` from the
delimiter stack.
</code></pre>"
`;
